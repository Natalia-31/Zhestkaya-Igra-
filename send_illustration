async def send_illustration(self, bot: Bot, chat_id: int, situation: str, answer: Optional[str] = None) -> bool:
    if not answer:
        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return False
        
    prompt = create_prompt(situation, answer)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    negative_keywords = "blurry, low quality, text, watermark, signature, bad anatomy"
    
    tasks = [
        self._try_pollinations(prompt),
        self._try_nanobanana(prompt),
    ]
    
    for future in asyncio.as_completed(tasks):
        try:
            result_image = await future
            if result_image:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
                caption = f"üé≠ {situation.replace('____', answer)}"
                await bot.send_photo(
                    chat_id,
                    photo=BufferedInputFile(file=result_image.read(), filename="game_scene.jpg"),
                    caption=caption
                )
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    
    await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.")
    return False
