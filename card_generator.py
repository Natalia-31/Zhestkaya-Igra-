import requests
import google.generativeai as genai
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import os

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

gemini_model = genai.GenerativeModel("gemini-2.5-flash-lite-preview-09-2025")

def generate_pollinations_image(situation, answer):
    prompt = (
        f"Digital board game card illustration for situation: '{situation}'. "
        f"Answer: '{answer}'. Minimalism, Russian board game style, only image, no text."
    )
    url = "https://api.pollinations.ai/prompt"
    params = {"prompt": prompt}
    response = requests.get(url, params=params)
    return response.url if response.status_code == 200 else None

def generate_card_joke(situation, answer):
    prompt = (
        f"–ü—Ä–∏–¥—É–º–∞–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫—É—é —à—É—Ç–∫—É –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã. "
        f"–°–∏—Ç—É–∞—Ü–∏—è: '{situation}', –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞: '{answer}'. "
        f"–§–æ—Ä–º–∞—Ç: 1‚Äì2 —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç—Ä–æ—É–º–Ω–æ, –∏—Ä–æ–Ω–∏—á–Ω–æ, –ø–æ-—Ä—É—Å—Å–∫–∏."
    )
    response = gemini_model.generate_content(prompt)
    return response.text if response else "üòÖ –£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —à—É—Ç–∫–∏!"

def create_situation_card(situation_text: str, template_path: str = 'assets/card_template.png') -> BytesIO:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å–∏—Ç—É–∞—Ü–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —à–∞–±–ª–æ–Ω–µ
    
    Args:
        situation_text: –¢–µ–∫—Å—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
        template_path: –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É –∫–∞—Ä—Ç–æ—á–∫–∏
        
    Returns:
        BytesIO –æ–±—ä–µ–∫—Ç —Å –≥–æ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π
    """
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω
    try:
        card = Image.open(template_path).convert('RGB')
    except FileNotFoundError:
        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–µ–ª—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        card = Image.new('RGB', (864, 1184), 'white')
        print(f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}, —Å–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")
    
    draw = ImageDraw.Draw(card)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç Stalinist One —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    font_paths = [
        'assets/fonts/StalinistOne-Regular.ttf',  # Stalinist One (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        'assets/fonts/RussoOne-Regular.ttf',  # –†–µ–∑–µ—Ä–≤–Ω—ã–π
        'assets/fonts/DejaVuSans.ttf',  # –†–µ–∑–µ—Ä–≤–Ω—ã–π
        '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',  # Linux
        'C:\\Windows\\Fonts\\arial.ttf',  # Windows (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ª—ç—à–∏)
        '/System/Library/Fonts/Helvetica.ttc',  # macOS
    ]
    
    font = None
    for font_path in font_paths:
        try:
            font = ImageFont.truetype(font_path, 38)  # –†–∞–∑–º–µ—Ä 38 –¥–ª—è Stalinist One
            print(f"‚úÖ –®—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {font_path}")
            break
        except Exception as e:
            continue
    
    if font is None:
        font = ImageFont.load_default()
        print("‚ö†Ô∏è –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏
    card_width, card_height = card.size
    max_width = card_width - 150  # –û—Ç—Å—Ç—É–ø—ã –ø–æ –∫—Ä–∞—è–º (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    words = situation_text.split()
    lines = []
    current_line = ""
    
    for word in words:
        test_line = current_line + word + " "
        bbox = draw.textbbox((0, 0), test_line, font=font)
        line_width = bbox[2] - bbox[0]
        
        if line_width <= max_width:
            current_line = test_line
        else:
            if current_line:
                lines.append(current_line.strip())
            current_line = word + " "
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
    if current_line:
        lines.append(current_line.strip())
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    max_lines = 9
    if len(lines) > max_lines:
        lines = lines[:max_lines]
        if len(lines[-1]) > 50:
            lines[-1] = lines[-1][:50] + "..."
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    line_height = 52  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    total_height = len(lines) * line_height
    y_start = (card_height - total_height) // 2
    
    # –†–∏—Å—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    y_position = y_start
    for line in lines:
        bbox = draw.textbbox((0, 0), line, font=font)
        text_width = bbox[2] - bbox[0]
        x_position = (card_width - text_width) // 2
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        draw.text((x_position, y_position), line, fill=(0, 0, 0), font=font)
        y_position += line_height
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
    bio = BytesIO()
    bio.name = 'situation_card.png'
    card.save(bio, 'PNG')
    bio.seek(0)
    
    return bio
