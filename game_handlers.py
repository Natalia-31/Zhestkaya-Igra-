from __future__ import annotations
import asyncio
import json
import random
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Optional
from aiogram import Router, F, Bot, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from PIL import Image, ImageDraw, ImageFont

# =====================  –ù–ê–°–¢–†–û–ô–ö–ò  =====================
MIN_PLAYERS = 1  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - 1 –∏–≥—Ä–æ–∫
HAND_SIZE = 10
ROUND_TIMEOUT = 40

try:
    BASE_DIR = Path(__file__).parent
except NameError:
    BASE_DIR = Path(".").resolve()

CARDS_PATH = BASE_DIR / "cards.json"
FONT_PATH = BASE_DIR / "arial.ttf"

# =====================  –†–û–£–¢–ï–†  =====================
router = Router()

# =====================  –ú–û–î–ï–õ–ò  =====================
@dataclass
class Answer:
    user_id: int
    text: str
    user_name: str

@dataclass
class GameState:
    chat_id: int
    players: Dict[int, str] = field(default_factory=dict)
    host_index: int = 0
    phase: str = "lobby"
    round_no: int = 0
    current_situation: Optional[str] = None
    answers: List[Answer] = field(default_factory=list)
    hands: Dict[int, List[str]] = field(default_factory=dict)
    deck: List[str] = field(default_factory=list)

    @property
    def player_ids(self) -> List[int]:
        return list(self.players.keys())

    def current_host_id(self) -> Optional[int]:
        if not self.player_ids:
            return None
        return self.player_ids[self.host_index % len(self.player_ids)]

    def current_host_name(self) -> Optional[str]:
        host_id = self.current_host_id()
        if host_id:
            return self.players.get(host_id, f"ID: {host_id}")
        return None

    def next_host(self):
        if self.players:
            self.host_index = (self.host_index + 1) % len(self.players)

# =====================  –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï  =====================
GAMES: Dict[int, GameState] = {}
ALL_CARDS: List[str] = []

# =====================  –ó–ê–ì–†–£–ó–ö–ê –ö–ê–†–¢  =====================
def load_cards():
    global ALL_CARDS
    try:
        if CARDS_PATH.exists():
            data = json.loads(CARDS_PATH.read_text(encoding="utf-8"))
            cards = list(data.get("cards", []))
            if cards:
                ALL_CARDS = cards
            else:
                raise Exception("–§–∞–π–ª cards.json –ø—É—Å—Ç.")
        else:
            raise Exception("–§–∞–π–ª cards.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as ex:
        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç: {ex}")

load_cards()

# =====================  –ë–õ–û–ö –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ò–¢–£–ê–¶–ò–ô  =====================
SITUATION_TEMPLATES = [
    "–ù–∞ —É—Ç—Ä–æ –ø–æ—Å–ª–µ –≤–µ—á–µ—Ä–∏–Ω–∫–∏ —è –æ–±–Ω–∞—Ä—É–∂–∏–ª –≤ —Å–≤–æ–µ–π –ø–æ—Å—Ç–µ–ª–∏ ____. ",
    "–°–∞–º–∞—è —Å—Ç—Ä–∞–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —è –æ–ø–æ–∑–¥–∞–ª –Ω–∞ —Ä–∞–±–æ—Ç—É: ____.",
    "–í –∫–æ—Ä–æ–±–∫–µ —Å –ø–æ–¥–∞—Ä–∫–æ–º —è –Ω–∞—à—ë–ª ____. ",
    "–°–µ–∫—Ä–µ—Ç –º–æ–µ–≥–æ —É—Å–ø–µ—Ö–∞ ‚Äî —ç—Ç–æ ____. ",
    "–ú–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å –∑–≤—É—á–∏—Ç –∫–∞–∫ ____. ",
]

FILLERS = [
    "–∫—É—Ä–∏—Ü—É –≤ –∫–æ—Å—Ç—é–º–µ",
    "–≥–æ—Ä—è—â–∏–π —Ç–æ—Å—Ç–µ—Ä",
    "–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –Ω–æ—Å–∫–∏",
    "–º–∏—Å—Ç–µ—Ä–∏—è –≤ —à–∫–∞—Ñ—É",
    "—Å—Ç—Ä–∞–Ω–Ω—ã–π —à—ë–ø–æ—Ç –Ω–æ—á—å—é",
]

def generate_new_situation() -> str:
    template = random.choice(SITUATION_TEMPLATES)
    filler = random.choice(FILLERS)
    return template.replace("____", filler)

# =====================  –£–¢–ò–õ–ò–¢–´  =====================
def ensure_game(chat_id: int) -> GameState:
    return GAMES.setdefault(chat_id, GameState(chat_id=chat_id))

def deal_to_full_hand(game: GameState, user_id: int):
    hand = game.hands.setdefault(user_id, [])
    while len(hand) < HAND_SIZE:
        if not game.deck:
            game.deck = ALL_CARDS.copy()
            random.shuffle(game.deck)
        if not game.deck:
            break
        hand.append(game.deck.pop())

def make_answers_keyboard(hand: List[str]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üëâ {card[:35]}...", callback_data=f"ans:{idx}")]
        for idx, card in enumerate(hand)
    ])

def make_choices_keyboard(answers: List[Answer]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å #{idx}", callback_data=f"pick:{idx-1}")]
        for idx, _ in enumerate(answers, 1)
    ])

def answers_summary(answers: List[Answer]) -> str:
    if not answers:
        return "–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    lines = [f"#{i+1}: {a.text} (–æ—Ç: {a.user_name})" for i, a in enumerate(answers)]
    return "–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n\n" + "\n".join(lines)

async def generate_image_file(situation: str, answer: str, out_path: Path) -> Optional[Path]:
    try:
        out_path.parent.mkdir(parents=True, exist_ok=True)
        img = Image.new("RGB", (1024, 1024), color=(245, 246, 248))
        draw = ImageDraw.Draw(img)

        try:
            font_title = ImageFont.truetype(str(FONT_PATH), 42)
            font_body = ImageFont.truetype(str(FONT_PATH), 36)
        except IOError:
            font_title = ImageFont.load_default()
            font_body = ImageFont.load_default()

        draw.text((40, 40), "–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞", fill=(20, 20, 20), font=font_title)

        def wrap(text: str, width: int = 30) -> List[str]:
            words, lines, buf = text.split(), [], []
            for w in words:
                buf.append(w)
                if len(" ".join(buf)) > width:
                    lines.append(" ".join(buf[:-1]))
                    buf = [w]
            if buf: lines.append(" ".join(buf))
            return lines

        y = 120
        draw.text((40, y), "–°–∏—Ç—É–∞—Ü–∏—è:", fill=(40, 40, 40), font=font_body); y += 40
        for line in wrap(situation):
            draw.text((60, y), line, fill=(10, 10, 10), font=font_body); y += 40
        y += 20
        draw.text((40, y), "–û—Ç–≤–µ—Ç:", fill=(40, 40, 40), font=font_body); y += 40
        for line in wrap(answer):
            draw.text((60, y), line, fill=(10, 10, 10), font=font_body); y += 40

        img.save(out_path)
        return out_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def show_answers_for_all(bot: Bot, chat_id: int):
    game = ensure_game(chat_id)
    if not game.answers:
        await bot.send_message(chat_id, "–û—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.")
        return

    random.shuffle(game.answers)
    game.phase = "choose"
    
    text = (
        f"üßæ –°–∏—Ç—É–∞—Ü–∏—è:\n<b>{game.current_situation}</b>\n\n"
        + answers_summary(game.answers)
        + f"\n\n–í–µ–¥—É—â–∏–π ({game.current_host_name()}) –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç."
    )
    kb = make_choices_keyboard(game.answers)
    await bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")

# =====================  –•–ï–ù–î–õ–ï–†–´  =====================
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ ¬´–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞¬ª.\n\n"
        "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
        "‚Ä¢ /new_game ‚Äî —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏\n"
        "‚Ä¢ /join ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
        "‚Ä¢ /start_round ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥\n"
    )

@router.message(Command("new_game"))
async def cmd_new_game(message: Message):
    GAMES[message.chat.id] = GameState(chat_id=message.chat.id)
    await message.answer(
        "üÉè –ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
        "–ñ–º–∏ /join, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n"
        "–ö–æ–≥–¥–∞ –≤—Å–µ —Å–æ–±–µ—Ä—É—Ç—Å—è, –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥: /start_round."
    )

@router.message(Command("join"))
async def cmd_join(message: Message):
    game = ensure_game(message.chat.id)
    user = message.from_user
    if not user:
        return

    if user.id in game.players:
        await message.reply("–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ! ‚úã")
        return

    game.players[user.id] = user.full_name
    deal_to_full_hand(game, user.id)
    await message.answer(
        f"‚úÖ {user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è.\n"
        f"–ò–≥—Ä–æ–∫–æ–≤ —Å–µ–π—á–∞—Å: {len(game.players)}"
    )

@router.message(Command("start_round"))
async def cmd_start_round(message: Message):
    game = ensure_game(message.chat.id)
    if len(game.players) < MIN_PLAYERS:
        await message.answer(f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_PLAYERS} –∏–≥—Ä–æ–∫–∞, –∞ –≤–∞—Å {len(game.players)}.")
        return
    if game.phase != "lobby":
        await message.answer("–†–∞—É–Ω–¥ —É–∂–µ –∏–¥–µ—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return

    game.phase = "collect"
    game.round_no += 1
    game.answers.clear()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–π
    game.current_situation = generate_new_situation()

    host_name = game.current_host_name()

    await message.answer(
        f"üé¨ –†–∞—É–Ω–¥ #{game.round_no}\n"
        f"–í–µ–¥—É—â–∏–π: <b>{host_name}</b>\n\n"
        f"–°–∏—Ç—É–∞—Ü–∏—è:\n<b>{game.current_situation}</b>\n\n"
        f"–ò–≥—Ä–æ–∫–∏, –≤—ã–±–∏—Ä–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã! –£ –≤–∞—Å {ROUND_TIMEOUT} —Å–µ–∫—É–Ω–¥.",
        parse_mode="HTML"
    )

    for uid in game.player_ids:
        if uid != game.current_host_id():
            await send_hand_to_player(message.bot, game, uid)

    asyncio.create_task(round_timeout_watchdog(message.bot, message.chat.id, ROUND_TIMEOUT))

async def send_hand_to_player(bot: Bot, game: GameState, user_id: int):
    hand = game.hands.get(user_id, [])
    if not hand:
        deal_to_full_hand(game, user_id)
        hand = game.hands[user_id]
    
    if not hand:
        try:
            await bot.send_message(user_id, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–∞—Ä—Ç—ã!")
        except Exception:
            pass
        return

    kb = make_answers_keyboard(hand)
    try:
        await bot.send_message(user_id, "–í–∞—à–∞ —Ä—É–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É-–æ—Ç–≤–µ—Ç:", reply_markup=kb)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É–∫—É –∏–≥—Ä–æ–∫—É {user_id}: {e}")

@router.callback_query(F.data.startswith("ans:"))
async def cb_pick_answer(callback: CallbackQuery, bot: Bot):
    if not callback.message:
        return
    game = ensure_game(callback.message.chat.id)
    user = callback.from_user

    if game.phase != "collect":
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)
        return
    if user.id not in game.players:
        await callback.answer("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ. –ù–∞–∂–º–∏ /join –≤ –≥—Ä—É–ø–ø–µ.", show_alert=True)
        return
    if any(a.user_id == user.id for a in game.answers):
        await callback.answer("–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç.", show_alert=True)
        return
    if user.id == game.current_host_id():
        await callback.answer("–í–µ–¥—É—â–∏–π –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)
        return

    try:
        idx = int(callback.data.split(":")[1])
        hand = game.hands.get(user.id, [])
        if not (0 <= idx < len(hand)):
            await callback.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã.", show_alert=True)
            return
        
        card_text = hand.pop(idx)
        game.answers.append(Answer(user_id=user.id, text=card_text, user_name=user.full_name))
        deal_to_full_hand(game, user.id)
        
        await callback.answer("–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!", show_alert=False)
        await callback.message.delete()

        await bot.send_message(game.chat_id, f"‚úÖ {user.full_name} —Å–¥–µ–ª–∞–ª(–∞) —Å–≤–æ–π –≤—ã–±–æ—Ä.")

        expecting = len([p for p in game.player_ids if p != game.current_host_id()])
        if len(game.answers) >= expecting:
            await show_answers_for_all(bot, game.chat_id)

    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã.", show_alert=True)

@router.callback_query(F.data.startswith("pick:"))
async def cb_pick_winner(callback: CallbackQuery, bot: Bot):
    if not callback.message:
        return
    game = ensure_game(callback.message.chat.id)
    user = callback.from_user

    if game.phase != "choose":
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –≤—ã–±–∏—Ä–∞—Ç—å.", show_alert=True)
        return
    if user.id != game.current_host_id():
        await callback.answer("–í—ã–±–∏—Ä–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π.", show_alert=True)
        return

    try:
        idx = int(callback.data.split(":")[1])
        winner_answer = game.answers[idx]
        winner_name = winner_answer.user_name

        await callback.message.edit_text(
            f"üèÜ –í–µ–¥—É—â–∏–π ({game.current_host_name()}) –≤—ã–±—Ä–∞–ª –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç!\n\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞: <b>{winner_name}</b>\n"
            f"–° –æ—Ç–≤–µ—Ç–æ–º: ¬´<b>{winner_answer.text}</b>¬ª\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É...",
            parse_mode="HTML",
            reply_markup=None
        )

        out_path = BASE_DIR / "generated" / f"round_{game.round_no}.png"
        
        if await generate_image_file(game.current_situation or "", winner_answer.text, out_path):
            try:
                await bot.send_photo(
                    chat_id=game.chat_id,
                    photo=FSInputFile(out_path),
                    caption=f"–°–∏—Ç—É–∞—Ü–∏—è: {game.current_situation}\n–û—Ç–≤–µ—Ç: {winner_answer.text}"
                )
            except Exception as e:
                await bot.send_message(game.chat_id, f"(–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e})")
        else:
            await bot.send_message(game.chat_id, "(–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.)")
        
        game.next_host()
        game.phase = "lobby"
        await bot.send_message(
            game.chat_id,
            "–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
            f"–ù–æ–≤—ã–π –≤–µ–¥—É—â–∏–π: <b>{game.current_host_name()}</b>.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥, –Ω–∞–∂–º–∏—Ç–µ /start_round",
            parse_mode="HTML"
        )
        await callback.answer()

    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.", show_alert=True)

async def round_timeout_watchdog(bot: Bot, chat_id: int, delay: int):
    await asyncio.sleep(delay)
    game = GAMES.get(chat_id)
    if not game or game.phase != "collect":
        return
    
    await bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–∫–∞–∑—ã–≤–∞—é, —á—Ç–æ —É—Å–ø–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å‚Ä¶")
    await show_answers_for_all(bot, chat_id)

def register_game_handlers(dp):
    dp.include_router(router)

async def main():
    bot = Bot(token="–í–ê–®_–¢–û–ö–ï–ù")
    dp = Dispatcher()
    register_game_handlers(dp)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
