# handlers/game_handlers.py ‚Äî –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–µ–Ω—é + —Ä–∞–±–æ—á–∏–π –∏–≥—Ä–æ–≤–æ–π –ø–æ—Ç–æ–∫

from typing import Dict, Any
from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from aiogram.filters import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest
import json

# –ö–æ–ª–æ–¥—ã/–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑ game_utils (–±–µ–∑ —Ü–∏–∫–ª–æ–≤)
from game_utils import decks, gen
# –¢–≤–æ—è –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è (–ª–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–∞—á–∏/–æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏/–ø–æ–¥—Å—á—ë—Ç–∞)
from game_logic import GameSession

router = Router()

# ---------------- –î–ê–ù–ù–´–ï ----------------

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)
with open("cards.json", "r", encoding="utf-8") as f:
    ALL_CARDS = json.load(f)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —á–∞—Ç—É
SESSIONS: Dict[int, GameSession] = {}

# ---------------- –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ ----------------

def main_menu_kb(is_host: bool = True) -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="ui_new_game"),
            InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="ui_join_game"),
        ],
        [
            InlineKeyboardButton(text="üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥", callback_data="ui_start_round")
        ]
    ]
    # –ú–æ–∂–Ω–æ —Å–∫—Ä—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É ‚Äú–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥‚Äù –Ω–µ-—Ö–æ—Å—Ç–∞–º –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏,
    # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º –æ–±—â–∏–π –≤–∏–¥–∏–º—ã–º –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏.
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ---------------- –°–¢–ê–†–¢ ----------------

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üéÆ –ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞\n\n"
        "/new_game ‚Äî –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/join_game ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
        "/start_round ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥",
        reply_markup=main_menu_kb()
    )

# ---------------- –ö–û–ú–ê–ù–î–´ (–¥—É–±–ª–∏—Ä—É—é—Ç –∫–Ω–æ–ø–∫–∏) ----------------

@router.message(Command("new_game"))
async def cmd_new_game(message: Message):
    await _create_game(message.chat.id, host_id=message.from_user.id, host_name=message.from_user.full_name)
    await message.answer("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ü–æ–∫–∞ –∏–≥—Ä–æ–∫–æ–≤: 0", reply_markup=main_menu_kb())

@router.message(Command("join_game"))
async def cmd_join_game(message: Message, bot: Bot):
    await _join_flow(message.chat.id, message.from_user.id, message.from_user.full_name, bot, feedback_message=message)

@router.message(Command("start_round"))
async def cmd_start_round(message: Message):
    await _start_round_logic(message.bot, message.chat.id)

# ---------------- –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ò –ú–ï–ù–Æ ----------------

@router.callback_query(F.data == "ui_new_game")
async def ui_new_game(cb: CallbackQuery):
    await _create_game(cb.message.chat.id, host_id=cb.from_user.id, host_name=cb.from_user.full_name)
    await cb.answer()
    try:
        await cb.message.edit_text("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ü–æ–∫–∞ –∏–≥—Ä–æ–∫–æ–≤: 0", reply_markup=main_menu_kb())
    except TelegramBadRequest:
        pass

@router.callback_query(F.data == "ui_join_game")
async def ui_join_game(cb: CallbackQuery, bot: Bot):
    await _join_flow(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name, bot, feedback_message=cb.message)
    await cb.answer()

@router.callback_query(F.data == "ui_start_round")
async def ui_start_round(cb: CallbackQuery):
    await cb.answer()
    await _start_round_logic(cb.bot, cb.message.chat.id)

# ---------------- –Ø–î–†–û: –°–û–ó–î–ê–ù–ò–ï, –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï, –†–ê–£–ù–î ----------------

async def _create_game(chat_id: int, host_id: int, host_name: str):
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –±—ã–ª–∞ ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º (–∫–∞–∫ –≤ —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–µ)
    session = GameSession(chat_id)
    # –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ö–æ—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –∫–ª–∞—Å—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–ª–µ
    # –í —Ç–≤–æ—ë–º GameSession –µ—Å—Ç—å –º–µ—Ç–æ–¥ next_host(); –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ session.
    SESSIONS[chat_id] = session
    # –ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ:
    # print(f"New game in chat {chat_id}, host {host_name} ({host_id})")

async def _join_flow(chat_id: int, user_id: int, user_name: str, bot: Bot, feedback_message: Message):
    session = SESSIONS.get(chat_id)
    if not session:
        await feedback_message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ù–∞—á–∞—Ç—å –∏–≥—Ä—É‚Äù –∏–ª–∏ /new_game", reply_markup=main_menu_kb())
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ä–∞–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç—ã
    try:
        await bot.send_message(user_id, "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
    except TelegramBadRequest as e:
        await feedback_message.answer(
            f"‚ö†Ô∏è {user_name}, –Ω–∞–∂–º–∏—Ç–µ Start –≤ –ª–∏—á–∫–µ —É –±–æ—Ç–∞, –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ ‚Äú–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è‚Äù.\n{e}"
        )
        return

    session.add_player(user_id, user_name)
    count = len(session.players)
    await feedback_message.answer(f"‚ûï {user_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –°–µ–π—á–∞—Å –∏–≥—Ä–æ–∫–æ–≤: {count}", reply_markup=main_menu_kb())

async def _start_round_logic(bot: Bot, chat_id: int):
    session = SESSIONS.get(chat_id)
    if not session or len(session.players) < 2:
        await bot.send_message(chat_id, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞: /join_game", reply_markup=main_menu_kb())
        return

    # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    mentions = [f"‚Ä¢ {p['username']}" for p in session.players]
    await bot.send_message(chat_id, f"üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å ({len(mentions)}):\n" + "\n".join(mentions))

    # –í–µ–¥—É—â–∏–π –∏ –Ω–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    host = session.next_host()  # –∫–∞–∫ —É —Ç–µ–±—è –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
    session.reset_round()
    situation = session.current_situation = decks.get_random_situation()
    await bot.send_message(chat_id, f"üé¨ –†–∞—É–Ω–¥! üëë –í–µ–¥—É—â–∏–π: {host['username']}\n\nüé≤ {situation}")

    # –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç (–∫–∞–∫ –≤ —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏ ‚Äî –∏–∑ cards.json)
    session.deal_hands(ALL_CARDS)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –µ–≥–æ —Ä—É–∫—É –≤ –ª–∏—á–∫—É –∫–Ω–æ–ø–∫–∞–º–∏ (ans:<index>)
    for uid, hand in session.hands.items():
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=card, callback_data=f"ans:{i}")]
            for i, card in enumerate(hand)
        ])
        try:
            await bot.send_message(uid, f"üé¥ –í–∞—à–∞ —Ä—É–∫–∞ ({len(hand)} –∫–∞—Ä—Ç) ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É-–æ—Ç–≤–µ—Ç:", reply_markup=kb)
        except TelegramBadRequest as e:
            # –ü–æ–∫–∞–∂–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ –∑–Ω–∞–ª, —á—Ç–æ –Ω–∞–¥–æ –Ω–∞–∂–∞—Ç—å Start
            await bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å {uid} –≤ –ª–∏—á–∫—É. –ù–∞–∂–º–∏—Ç–µ Start —É –±–æ—Ç–∞. {e}")

# ---------------- –û–¢–í–ï–¢ –ò–ì–†–û–ö–ê: ans:<i> ----------------

@router.callback_query(F.data.startswith("ans:"))
async def cb_answer(cb: CallbackQuery):
    chat_id = cb.message.chat.id
    session = SESSIONS.get(chat_id)
    if not session:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    uid = cb.from_user.id
    host_id = session.get_host()['user_id']
    if uid == host_id:
        await cb.answer("–í–µ–¥—É—â–∏–π –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.", show_alert=True)
        return

    # –ò–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã –≤ —Ç–µ–∫—É—â–µ–π —Ä—É–∫–µ
    try:
        idx = int(cb.data.split(":", 1)[7])
    except Exception:
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    hand = session.hands.get(uid, [])
    if idx < 0 or idx >= len(hand):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    card = hand.pop(idx)
    session.answers[uid] = card
    await cb.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {card}")

    # –ï—Å–ª–∏ –≤—Å–µ —Å–¥–∞–ª–∏ –æ—Ç–≤–µ—Ç—ã ‚Äî –ø—É–±–ª–∏–∫—É–µ–º —Å–ø–∏—Å–æ–∫ –∏ –¥–∞–µ–º –≤–µ–¥—É—â–µ–º—É –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    if session.all_answers_received():
        answers = [session.answers[uid] for uid in session.answers]
        player_names = [next(p['username'] for p in session.players if p['user_id'] == uid) for uid in session.answers]

        text = "–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(f"{i+1}. {player_names[i]} ‚Äî {ans}" for i, ans in enumerate(answers))
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=str(i+1), callback_data=f"pick:{i}")]
            for i in range(len(answers))
        ])
        await cb.bot.send_message(chat_id, text, reply_markup=kb)

# ---------------- –í–´–ë–û–† –ü–û–ë–ï–î–ò–¢–ï–õ–Ø: pick:<i> ----------------

@router.callback_query(F.data.startswith("pick:"))
async def cb_pick(cb: CallbackQuery):
    chat_id = cb.message.chat.id
    session = SESSIONS.get(chat_id)
    if not session:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    host_id = session.get_host()['user_id']
    if cb.from_user.id != host_id:
        await cb.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å.", show_alert=True)
        return

    try:
        idx = int(cb.data.split(":", 1)[7])
    except Exception:
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    winner_info = session.pick_winner(idx)  # –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å {'user_id', 'username', 'answer'}
    # –°–æ–æ–±—â–∞–µ–º –≤ —á–∞—Ç
    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        pass

    await cb.message.edit_text(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_info['username']}\n–û—Ç–≤–µ—Ç: {winner_info['answer']}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –ø–æ–±–µ–¥–∏–≤—à–µ–º—É –æ—Ç–≤–µ—Ç—É (—á–µ—Ä–µ–∑ game_utils.gen)
    await gen.send_illustration(cb.bot, chat_id, session.current_situation, winner_info["answer"])

    # –î–æ–±–æ—Ä –ø–æ 1 –∫–∞—Ä—Ç–µ –≤ –ª–∏—á–∫—É –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    for pid, hand in session.hands.items():
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –∫–æ–ª–æ–¥—É
        if not ALL_CARDS:
            continue
        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–æ—Ä–∞ —É —Ç–µ–±—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ GameSession; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–¥–∏–º –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é
        # –î–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ–±—â–∏–π –ø—É–ª; –æ—Å—Ç–∞–≤–∏–º –≤ –ø—Ä–æ—Å—Ç–æ–º –≤–∏–¥–µ:
        # new_card = random.choice(ALL_CARDS) ‚Äî –Ω–æ –ª—É—á—à–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞—Å—å: –≤–æ–∑—å–º–∏ –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏.
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É GameSession –µ—Å—Ç—å –º–µ—Ç–æ–¥ draw_one(); –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤—å.
        try:
            new_card = session.draw_one(ALL_CARDS)  # —Ä–µ–∞–ª–∏–∑—É–π –≤ GameSession, —á—Ç–æ–±—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏—Å—å
        except AttributeError:
            # fallback: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–æ–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å
            remaining = [c for c in ALL_CARDS if c not in hand]
            new_card = remaining if remaining else None

        if new_card:
            hand.append(new_card)
            try:
                await cb.bot.send_message(pid, f"–í—ã –¥–æ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: `{new_card}`", parse_mode="Markdown")
            except TelegramBadRequest:
                pass

    await cb.bot.send_message(chat_id, "–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ ‚Äúüé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥‚Äù, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=main_menu_kb())
