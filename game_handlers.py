from __future__ import annotations
import asyncio
import random
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Optional
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from PIL import Image, ImageDraw, ImageFont
import openai
import os

# =====================  –ù–ê–°–¢–†–û–ô–ö–ò  =====================
MIN_PLAYERS = 2
HAND_SIZE = 10
ROUND_TIMEOUT = 60 # –î–∞–¥–∏–º –∏–≥—Ä–æ–∫–∞–º –º–∏–Ω—É—Ç—É –Ω–∞ –æ—Ç–≤–µ—Ç

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
try:
    BASE_DIR = Path(__file__).parent.parent
except NameError:
    BASE_DIR = Path(".").resolve()

FONT_PATH = BASE_DIR / "arial.ttf"

# API –∫–ª—é—á OpenAI
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
if not os.getenv("OPENAI_API_KEY"):
    raise RuntimeError("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY.")
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# =====================  –†–û–£–¢–ï–†  =====================
router = Router()

# =====================  –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•  =====================
@dataclass
class Answer:
    user_id: int
    text: str
    user_name: str

@dataclass
class GameState:
    chat_id: int
    players: Dict[int, str] = field(default_factory=dict)
    host_index: int = 0
    phase: str = "lobby" # lobby, collect, choose
    round_no: int = 0
    current_situation: Optional[str] = None
    answers: List[Answer] = field(default_factory=list)
    hands: Dict[int, List[str]] = field(default_factory=dict)
    deck: List[str] = field(default_factory=list)

    @property
    def player_ids(self) -> List[int]:
        return list(self.players.keys())

    def current_host_id(self) -> Optional[int]:
        if not self.player_ids:
            return None
        return self.player_ids[self.host_index % len(self.player_ids)]

    def current_host_name(self) -> Optional[str]:
        host_id = self.current_host_id()
        return self.players.get(host_id) if host_id else None

    def next_host(self):
        if self.players:
            self.host_index = (self.host_index + 1) % len(self.players)

# =====================  –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´  =====================
GAMES: Dict[int, GameState] = {}

# =====================  OPENAI: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ =====================
def generate_situations_sync(count: int = 1) -> List[str]:
    prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} –æ—Å—Ç—Ä–æ—É–º–Ω—É—é –∏ —Å–º–µ—à–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã. –°–∏—Ç—É–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ '____' –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π."
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=200,
            temperature=0.9,
        )
        text = response.choices[0].message.content.strip()
        return [line.strip("- ‚Ä¢\t") for line in text.split("\n") if "____" in line]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–π: {e}")
        return ["–ù–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω —è —Å–ª—É—á–∞–π–Ω–æ ____."]

def generate_cards_sync(count: int = 50) -> List[str]:
    prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} –∫–æ—Ä–æ—Ç–∫–∏—Ö, —Å–º–µ—à–Ω—ã—Ö –∏ –Ω–µ–º–Ω–æ–≥–æ –∞–±—Å—É—Ä–¥–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã. –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç - –Ω–µ –±–æ–ª–µ–µ 3 —Å–ª–æ–≤. –ü—Ä–∏–º–µ—Ä—ã: '–ø—å—è–Ω—ã–π –µ–Ω–æ—Ç', '–∫–≤–∞–Ω—Ç–æ–≤—ã–π —Å–∫–∞—á–æ–∫', '–º–∞–º–∫–∏–Ω –±–æ—Ä—â'. –û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ."
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=400,
            temperature=1.0,
        )
        text = response.choices[0].message.content.strip()
        return [line.strip("- ‚Ä¢\t") for line in text.split("\n") if line.strip()]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return [f"–û—Ç–≤–µ—Ç #{i+1}" for i in range(count)]

async def generate_content_for_round() -> tuple[str, list[str]]:
    situation_task = asyncio.to_thread(generate_situations_sync, 1)
    cards_task = asyncio.to_thread(generate_cards_sync, 50)
    results = await asyncio.gather(situation_task, cards_task)
    situation = results[0][0] if results[0] else "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é."
    cards = results[1]
    return situation, cards

# =====================  –£–¢–ò–õ–ò–¢–´ –ò–ì–†–´ =====================
def ensure_game(chat_id: int) -> GameState:
    return GAMES.setdefault(chat_id, GameState(chat_id=chat_id))

def deal_to_full_hand(game: GameState, user_id: int):
    hand = game.hands.setdefault(user_id, [])
    while len(hand) < HAND_SIZE and game.deck:
        hand.append(game.deck.pop())

def make_answers_keyboard(hand: List[str]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üëâ {card[:35]}", callback_data=f"ans:{idx}")] for idx, card in enumerate(hand)
    ])

def make_choices_keyboard(answers: List[Answer]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å: {ans.text[:25]}", callback_data=f"pick:{idx}")] for idx, ans in enumerate(answers)
    ])

def answers_summary(answers: List[Answer]) -> str:
    if not answers: return "–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    return "–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n\n" + "\n".join(f"üïµÔ∏è‚Äç‚ôÇÔ∏è {a.text} (–æ—Ç {a.user_name})" for a in answers)

async def generate_image_file(situation: str, answer: str, out_path: Path) -> Optional[Path]:
    try:
        out_path.parent.mkdir(parents=True, exist_ok=True)
        img = Image.new("RGB", (1024, 512), color=(25, 25, 25))
        draw = ImageDraw.Draw(img)
        try:
            font_sit = ImageFont.truetype(str(FONT_PATH), 48)
            font_ans = ImageFont.truetype(str(FONT_PATH), 64)
        except IOError:
            font_sit = ImageFont.load_default()
            font_ans = ImageFont.load_default()

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        sit_text = situation.replace("____", answer)
        draw.text((512, 150), sit_text, fill=(255, 255, 255), font=font_sit, anchor="ms")
        draw.text((512, 300), answer.upper(), fill=(255, 255, 0), font=font_ans, anchor="ms")

        img.save(out_path)
        return out_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


# =====================  –û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ –ò–ì–†–´ =====================
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üî• –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ ¬´–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞¬ª ‚Äî –∞–Ω–∞–ª–æ–≥ 500 –∑–ª–æ–±–Ω—ã—Ö –∫–∞—Ä—Ç.\n\n"
        "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
        "‚Ä¢ `/new_game` ‚Äî —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n"
        "‚Ä¢ `/join` ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ.\n"
        "‚Ä¢ –í–µ–¥—É—â–∏–π –ø—Ä–æ—à–ª–æ–π –∏–≥—Ä—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –∫–æ–º–∞–Ω–¥–æ–π `/start_round`.\n"
    )

@router.message(Command("new_game"))
async def cmd_new_game(message: Message):
    GAMES[message.chat.id] = GameState(chat_id=message.chat.id)
    await message.answer("üÉè –ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /join.")

@router.message(Command("join"))
async def cmd_join(message: Message):
    game = ensure_game(message.chat.id)
    user = message.from_user
    if not user: return
    if user.id in game.players:
        return await message.reply("–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ! ‚úã")
    game.players[user.id] = user.full_name
    await message.answer(f"‚úÖ {user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}")

@router.message(Command("start_round"))
async def cmd_start_round(message: Message):
    game = ensure_game(message.chat.id)
    if len(game.players) < MIN_PLAYERS:
        return await message.answer(f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_PLAYERS} –∏–≥—Ä–æ–∫–∞, –∞ –≤–∞—Å {len(game.players)}.")
    if game.phase != "lobby":
        return await message.answer("–†–∞—É–Ω–¥ —É–∂–µ –∏–¥–µ—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")

    game.phase = "collect"
    game.round_no += 1
    game.answers.clear()

    msg = await message.answer("‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –∫–∞—Ä—Ç—ã... –ú–∏–Ω—É—Ç–∫—É.")
    
    game.current_situation, game.deck = await generate_content_for_round()
    random.shuffle(game.deck)

    await msg.edit_text(
        f"üé¨ **–†–∞—É–Ω–¥ #{game.round_no}**\n\n"
        f"üëë –í–µ–¥—É—â–∏–π: **{game.current_host_name()}**\n\n"
        f"üìú –°–∏—Ç—É–∞—Ü–∏—è: **{game.current_situation}**\n\n"
        f"–ò–≥—Ä–æ–∫–∏, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ä—Ç—ã –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö! –£ –≤–∞—Å {ROUND_TIMEOUT} —Å–µ–∫—É–Ω–¥.",
        parse_mode="Markdown"
    )

    for uid in game.player_ids:
        if uid != game.current_host_id():
            deal_to_full_hand(game, uid)
            await send_hand_to_player(message.bot, game, uid)

    asyncio.create_task(round_timeout_watchdog(message.bot, message.chat.id, game.round_no))

async def send_hand_to_player(bot: Bot, game: GameState, user_id: int):
    hand = game.hands.get(user_id, [])
    if not hand: return
    try:
        await bot.send_message(
            user_id, "–í–∞—à–∞ —Ä—É–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É-–æ—Ç–≤–µ—Ç:",
            reply_markup=make_answers_keyboard(hand)
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É–∫—É –∏–≥—Ä–æ–∫—É {user_id}: {e}")

@router.callback_query(F.data.startswith("ans:"))
async def cb_pick_answer(callback: CallbackQuery, bot: Bot):
    user = callback.from_user
    game = ensure_game(callback.message.chat.id if callback.message else list(GAMES.keys())[0])

    if game.phase != "collect":
        return await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)
    if user.id not in game.players:
        return await callback.answer("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ.", show_alert=True)
    if any(a.user_id == user.id for a in game.answers):
        return await callback.answer("–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç.", show_alert=True)
    if user.id == game.current_host_id():
        return await callback.answer("–í–µ–¥—É—â–∏–π –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)

    try:
        idx = int(callback.data.split(":")[1])
        hand = game.hands.get(user.id, [])
        if not (0 <= idx < len(hand)):
            return await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã.", show_alert=True)

        card_text = hand.pop(idx)
        game.answers.append(Answer(user_id=user.id, text=card_text, user_name=user.full_name))
        
        await callback.answer("–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!", show_alert=False)
        await callback.message.delete()
        await bot.send_message(game.chat_id, f"‚úÖ {user.full_name} —Å–¥–µ–ª–∞–ª(–∞) —Å–≤–æ–π –≤—ã–±–æ—Ä.")

        expecting = len([p for p in game.player_ids if p != game.current_host_id()])
        if len(game.answers) >= expecting:
            await show_answers_for_all(bot, game.chat_id)
    except (ValueError, IndexError) as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

async def show_answers_for_all(bot: Bot, chat_id: int):
    game = ensure_game(chat_id)
    if game.phase != "collect": return # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–π –≤—ã–∑–æ–≤
    
    game.phase = "choose"
    random.shuffle(game.answers)
    
    if not game.answers:
        await bot.send_message(chat_id, "–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ù–∞—á–∏–Ω–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ /start_round")
        game.phase = "lobby"
        game.next_host()
        return

    text = (
        f"üìú –°–∏—Ç—É–∞—Ü–∏—è: **{game.current_situation}**\n\n"
        + answers_summary(game.answers)
        + f"\n\nüëë –í–µ–¥—É—â–∏–π ({game.current_host_name()}), –≤—ã–±–∏—Ä–∞–π –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç!"
    )
    await bot.send_message(chat_id, text, reply_markup=make_choices_keyboard(game.answers), parse_mode="Markdown")

@router.callback_query(F.data.startswith("pick:"))
async def cb_pick_winner(callback: CallbackQuery, bot: Bot):
    game = ensure_game(callback.message.chat.id)
    user = callback.from_user

    if game.phase != "choose":
        return await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –≤—ã–±–∏—Ä–∞—Ç—å.", show_alert=True)
    if user.id != game.current_host_id():
        return await callback.answer("–í—ã–±–∏—Ä–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π.", show_alert=True)

    try:
        idx = int(callback.data.split(":")[1])
        winner_answer = game.answers[idx]
        
        await callback.message.edit_text(
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞: **{winner_answer.user_name}** —Å –æ—Ç–≤–µ—Ç–æ–º ¬´**{winner_answer.text}**¬ª!\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É...",
            parse_mode="Markdown", reply_markup=None
        )
        
        out_path = BASE_DIR / "generated" / f"round_{game.round_no}.png"
        if await generate_image_file(game.current_situation or "", winner_answer.text, out_path):
            await bot.send_photo(game.chat_id, photo=FSInputFile(out_path))
        
        game.next_host()
        game.phase = "lobby"
        await bot.send_message(
            game.chat_id,
            f"–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–ù–æ–≤—ã–π –≤–µ–¥—É—â–∏–π: **{game.current_host_name()}**.\n–î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—Énda –∂–º–∏ /start_round",
            parse_mode="Markdown"
        )
        await callback.answer()
    except (ValueError, IndexError) as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


async def round_timeout_watchdog(bot: Bot, chat_id: int, round_no: int):
    await asyncio.sleep(ROUND_TIMEOUT)
    game = GAMES.get(chat_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—É–Ω–¥ –≤—Å–µ –µ—â–µ —Ç–æ—Ç –∂–µ –∏ —Ñ–∞–∑–∞ –Ω–µ —Å–º–µ–Ω–∏–ª–∞—Å—å
    if game and game.round_no == round_no and game.phase == "collect":
        await bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–∫–∞–∑—ã–≤–∞—é, —á—Ç–æ —É—Å–ø–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å‚Ä¶")
        await show_answers_for_all(bot, chat_id)
