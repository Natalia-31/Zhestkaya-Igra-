# handlers/game_handlers.py ‚Äî –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É—á—ë—Ç–æ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç

from typing import Dict, Any, List

from aiogram import Router, F, Bot

from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.filters import Command, CommandStart

from aiogram.exceptions import TelegramBadRequest

from game_utils import decks, gen, video_gen  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ video_gen

router = Router()

SESSIONS: Dict[int, Dict[str, Any]] = {}

def main_menu() -> InlineKeyboardMarkup:

    return InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="ui_new_game")],

        [InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="ui_join_game")],

        [InlineKeyboardButton(text="üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥", callback_data="ui_start_round")],

    ])

@router.message(CommandStart())

async def cmd_start(m: Message):

    await m.answer("–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu())

@router.message(Command("new_game"))

async def cmd_new_game(m: Message):

    await _create_game(m.chat.id, m.from_user.id, m.from_user.full_name)

    await m.answer("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())

@router.message(Command("join_game"))

async def cmd_join_game(m: Message, bot: Bot):

    await _join_flow(m.chat.id, m.from_user.id, m.from_user.full_name, bot, feedback=m)

@router.message(Command("start_round"))

async def cmd_start_round(m: Message):

    await _start_round(m.bot, m.chat.id)

@router.callback_query(F.data == "ui_new_game")

async def ui_new_game(cb: CallbackQuery):

    await _create_game(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name)

    await cb.answer()

    try:

        await cb.message.edit_text("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())

    except TelegramBadRequest:

        pass

@router.callback_query(F.data == "ui_join_game")

async def ui_join_game(cb: CallbackQuery, bot: Bot):

    await _join_flow(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name, bot, feedback=cb.message)

    await cb.answer()

@router.callback_query(F.data == "ui_start_round")

async def ui_start_round(cb: CallbackQuery):

    await cb.answer()

    await _start_round(cb.bot, cb.message.chat.id)

async def _create_game(chat_id: int, host_id: int, host_name: str):

    SESSIONS[chat_id] = {

        "players": [],            # [{user_id, username}]

        "hands": {},              # user_id -> List[str]

        "answers": {},            # user_id -> str

        "host_idx": -1,

        "current_situation": None,

        "main_deck": [],          # –æ—Ç–≤–µ—Ç—ã –∏–∑ answers.json

        "used_answers": []        # —É–∂–µ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

    }

async def _join_flow(chat_id: int, user_id: int, user_name: str, bot: Bot, feedback: Message):

    st = SESSIONS.get(chat_id)

    if not st:

        await feedback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª.", reply_markup=main_menu())

        return

    if user_id not in [p["user_id"] for p in st["players"]]:

        try:

            await bot.send_message(user_id, "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")

        except TelegramBadRequest as e:

            await feedback.answer(f"‚ö†Ô∏è {user_name}, –Ω–∞–∂–º–∏—Ç–µ Start —É –±–æ—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ. {e}")

            return

        st["players"].append({"user_id": user_id, "username": user_name})

    await feedback.answer(f"‚úÖ –ò–≥—Ä–æ–∫–æ–≤: {len(st['players'])}", reply_markup=main_menu())

async def _start_round(bot: Bot, chat_id: int):

    st = SESSIONS.get(chat_id)

    if not st or len(st["players"]) < 2:

        await bot.send_message(chat_id, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.", reply_markup=main_menu())

        return

    

    print(f"üé≤ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã: {len(st['used_answers'])}")

    

    st["answers"].clear()

    st["hands"].clear()

    st["host_idx"] = (st["host_idx"] + 1) % len(st["players"])

    host = st["players"][st["host_idx"]]

    host_id = host["user_id"]

    st["current_situation"] = decks.get_random_situation()

    await bot.send_message(chat_id, f"üé¨ –†–∞—É–Ω–¥! üëë –í–µ–¥—É—â–∏–π: {host['username']}\n\nüé≤ {st['current_situation']}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–ª–æ–¥—É –±–µ–∑ —É–∂–µ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

    full_deck = decks.get_new_shuffled_answers_deck()

    st["main_deck"] = [c for c in full_deck if c not in st["used_answers"]]

    if not st["main_deck"]:

        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ.")

        return

    # –†–∞–∑–¥–∞—ë–º –ø–æ 10 –∫–∞—Ä—Ç –∫–∞–∂–¥–æ–º—É, –∫—Ä–æ–º–µ –≤–µ–¥—É—â–µ–≥–æ

    for p in st["players"]:

        uid = p["user_id"]

        if uid == host_id:

            continue

        hand = []

        while len(hand) < 10 and st["main_deck"]:

            hand.append(st["main_deck"].pop())

        st["hands"][uid] = hand

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞–º

    for p in st["players"]:

        uid = p["user_id"]

        if uid == host_id:

            continue

        hand = st["hands"].get(uid, [])

        kb = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text=card, callback_data=f"ans:{chat_id}:{uid}:{i}")]

            for i, card in enumerate(hand)

        ])

        try:

            message_text = f"üé≤ –°–∏—Ç—É–∞—Ü–∏—è: {st['current_situation']}\n\nüé¥ –í–∞—à–∞ —Ä—É–∫–∞ ({len(hand)} –∫–∞—Ä—Ç). –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:"

            await bot.send_message(uid, message_text, reply_markup=kb)

        except TelegramBadRequest:

            await bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É {p['username']}.")

@router.callback_query(F.data.startswith("ans:"))

async def on_answer(cb: CallbackQuery):

    _, group_chat_id_str, uid_str, idx_str = cb.data.split(":")

    group_chat_id = int(group_chat_id_str)

    uid = int(uid_str)

    idx = int(idx_str)

    st = SESSIONS.get(group_chat_id)

    if not st:

        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

        return

    host_id = st["players"][st["host_idx"]]["user_id"]

    if cb.from_user.id != uid or uid == host_id:

        await cb.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)

        return

    hand = st["hands"].get(uid, [])

    if idx < 0 or idx >= len(hand):

        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)

        return

    card = hand.pop(idx)

    st["answers"][uid] = card

    st["used_answers"].append(card)  # –ø–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –∫–∞–∫ —Å—ã–≥—Ä–∞–Ω–Ω—É—é

    await cb.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {card}")

    # –ï—Å–ª–∏ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –æ—Ç–≤–µ—Ç—ã

    need = len(st["players"]) - 1

    if len(st["answers"]) >= need:

        ordered = [(uid, st["answers"][uid]) for uid in st["answers"]]

        lines, buttons = [], []

        for i, (uid2, ans) in enumerate(ordered, 1):

            name = next(p["username"] for p in st["players"] if p["user_id"] == uid2)

            lines.append(f"{i}. {name} ‚Äî {ans}")

            buttons.append([InlineKeyboardButton(text=str(i), callback_data=f"pick:{group_chat_id}:{i-1}")])

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await cb.bot.send_message(group_chat_id, "–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(lines), reply_markup=kb```
