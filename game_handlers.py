# handlers/game_handlers.py
import asyncio
import os
from typing import Dict, Any
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile, FSInputFile
from aiogram.filters import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest

from game_utils import decks, generate_card_content
from card_generator import create_situation_card

router = Router()
SESSIONS: Dict[int, Dict[str, Any]] = {}

def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="ui_new_game")],
        [InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="ui_join_game")],
        [InlineKeyboardButton(text="–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥", callback_data="ui_start_round")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="ui_stats")],
    ])

@router.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer("–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu())

@router.message(Command("new_game"))
async def cmd_new_game(m: Message):
    await _create_game(m.chat.id, m.from_user.id, m.from_user.full_name)
    await m.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())

@router.message(Command("join_game"))
async def cmd_join_game(m: Message, bot: Bot):
    await _join_flow(m.chat.id, m.from_user.id, m.from_user.full_name, bot, feedback=m)

@router.message(Command("start_round"))
async def cmd_start_round(m: Message):
    await _start_round(m.bot, m.chat.id)

@router.message(Command("stats"))
async def cmd_stats(m: Message):
    await _show_stats(m.chat.id, m)

@router.callback_query(F.data == "ui_new_game")
async def ui_new_game(cb: CallbackQuery):
    await _create_game(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name)
    await cb.answer()
    try:
        await cb.message.edit_text("–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())
    except TelegramBadRequest:
        pass

@router.callback_query(F.data == "ui_join_game")
async def ui_join_game(cb: CallbackQuery, bot: Bot):
    await _join_flow(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name, bot, feedback=cb.message)
    await cb.answer()

@router.callback_query(F.data == "ui_start_round")
async def ui_start_round(cb: CallbackQuery):
    await cb.answer()
    await _start_round(cb.bot, cb.message.chat.id)

@router.callback_query(F.data == "ui_stats")
async def ui_stats(cb: CallbackQuery):
    await cb.answer()
    await _show_stats(cb.message.chat.id, cb.message)

async def _create_game(chat_id: int, host_id: int, host_name: str):
    SESSIONS[chat_id] = {
        "players": [],
        "hands": {},
        "answers": {},
        "scores": {},
        "host_idx": -1,
        "current_situation": None,
        "main_deck": [],
        "used_answers": []
    }

async def _join_flow(chat_id: int, user_id: int, user_name: str, bot: Bot, feedback: Message):
    st = SESSIONS.get(chat_id)
    if not st:
        await feedback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª.", reply_markup=main_menu())
        return
    if user_id not in [p["user_id"] for p in st["players"]]:
        try:
            await bot.send_message(user_id, "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
        except TelegramBadRequest as e:
            await feedback.answer(f"{user_name}, –Ω–∞–∂–º–∏—Ç–µ Start —É –±–æ—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ. {e}")
            return
        st["players"].append({"user_id": user_id, "username": user_name})
        st["scores"][user_id] = 0
    await feedback.answer(f"–ò–≥—Ä–æ–∫–æ–≤: {len(st['players'])}", reply_markup=main_menu())

async def _show_stats(chat_id: int, feedback: Message):
    st = SESSIONS.get(chat_id)
    if not st or not st["players"]:
        await feedback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.", reply_markup=main_menu())
        return
    
    sorted_players = sorted(
        st["players"], 
        key=lambda p: st["scores"].get(p["user_id"], 0), 
        reverse=True
    )
    
    lines = ["üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:**\n"]
    for i, p in enumerate(sorted_players, 1):
        score = st["scores"].get(p["user_id"], 0)
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "‚ñ™Ô∏è"
        lines.append(f"{medal} {i}. {p['username']} ‚Äî {score} –æ—á–∫–æ–≤")
    
    await feedback.answer("\n".join(lines), reply_markup=main_menu())

async def _start_round(bot: Bot, chat_id: int):
    st = SESSIONS.get(chat_id)
    if not st or len(st["players"]) < 2:
        await bot.send_message(chat_id, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.", reply_markup=main_menu())
        return

    st["answers"].clear()
    st["host_idx"] = (st["host_idx"] + 1) % len(st["players"])
    host = st["players"][st["host_idx"]]
    host_id = host["user_id"]

    st["current_situation"] = decks.get_random_situation()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
    try:
        card_image = create_situation_card(st["current_situation"])
        photo = BufferedInputFile(card_image.read(), filename='situation.png')
        await bot.send_photo(
            chat_id,
            photo=photo,
            caption=f"üéÆ **–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥!**\n–í–µ–¥—É—â–∏–π: {host['username']}"
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        await bot.send_message(
            chat_id,
            f"üéÆ **–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥!**\n–í–µ–¥—É—â–∏–π: {host['username']}\n\nüìù –°–∏—Ç—É–∞—Ü–∏—è:\n{st['current_situation']}"
        )

    # –£–õ–£–ß–®–ï–ù–û: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    cards_in_use = set(st["used_answers"])  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    for uid, hand in st["hands"].items():
        cards_in_use.update(hand)  # –ö–∞—Ä—Ç—ã –≤ —Ä—É–∫–∞—Ö –∏–≥—Ä–æ–∫–æ–≤
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –±–µ–∑ –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –∏–≥—Ä–µ
    full_deck = decks.get_new_shuffled_answers_deck()
    st["main_deck"] = [c for c in full_deck if c not in cards_in_use]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –Ω—É–∂–Ω–æ
    non_host_players = [p for p in st["players"] if p["user_id"] != host_id]
    if non_host_players:
        min_hand_size = min(len(st["hands"].get(p["user_id"], [])) for p in non_host_players)
        cards_needed = len(non_host_players) * (10 - min_hand_size)
    else:
        cards_needed = 0
    
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç –º–∞–ª–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º used_answers
    if len(st["main_deck"]) < cards_needed:
        print(f"‚ö†Ô∏è –ö–∞—Ä—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –°–±—Ä–æ—Å used_answers. –ë—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(st['used_answers'])}")
        st["used_answers"].clear()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É, –∏—Å–∫–ª—é—á–∞—è —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–∞—Ö
        cards_in_hands = set()
        for uid, hand in st["hands"].items():
            cards_in_hands.update(hand)
        
        full_deck = decks.get_new_shuffled_answers_deck()
        st["main_deck"] = [c for c in full_deck if c not in cards_in_hands]

    # –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–æ 10 –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É (–∫—Ä–æ–º–µ –≤–µ–¥—É—â–µ–≥–æ)
    for p in st["players"]:
        uid = p["user_id"]
        if uid == host_id:
            continue
        
        # –ë–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é —Ä—É–∫—É –∏–≥—Ä–æ–∫–∞
        current_hand = st["hands"].get(uid, [])
        
        # –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–æ 10
        while len(current_hand) < 10 and st["main_deck"]:
            new_card = st["main_deck"].pop()
            # –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–∞—Ä—Ç—ã –Ω–µ—Ç –≤ —Ä—É–∫–µ
            if new_card not in current_hand:
                current_hand.append(new_card)
        
        st["hands"][uid] = current_hand
        print(f"‚úÖ –ò–≥—Ä–æ–∫ {p['username']}: {len(current_hand)} –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –∫–∞—Ä—Ç –≤ –ª–∏—á–∫—É –∏–≥—Ä–æ–∫–∞–º
    for p in st["players"]:
        uid = p["user_id"]
        if uid == host_id:
            continue
        hand = st["hands"].get(uid, [])
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=card, callback_data=f"ans:{chat_id}:{uid}:{i}")]
            for i, card in enumerate(hand)
        ])
        try:
            msg = f"üìù –°–∏—Ç—É–∞—Ü–∏—è:\n{st['current_situation']}\n\nüÉè –í–∞—à–∞ —Ä—É–∫–∞ ({len(hand)} –∫–∞—Ä—Ç).\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç:"
            await bot.send_message(uid, msg, reply_markup=kb)
        except TelegramBadRequest:
            await bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É {p['username']}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

@router.callback_query(F.data.startswith("ans:"))
async def on_answer(cb: CallbackQuery):
    _, group_chat_id_str, uid_str, idx_str = cb.data.split(":")
    group_chat_id, uid, idx = int(group_chat_id_str), int(uid_str), int(idx_str)
    st = SESSIONS.get(group_chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    host_id = st["players"][st["host_idx"]]["user_id"]
    if cb.from_user.id != uid or uid == host_id:
        await cb.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)
        return

    if uid in st["answers"]:
        await cb.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–≤–µ—Ç!", show_alert=True)
        return

    hand = st["hands"].get(uid, [])
    if idx < 0 or idx >= len(hand):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    card = hand[idx]
    st["answers"][uid] = {"card": card, "index": idx}
    await cb.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {card}")

    need = len(st["players"]) - 1
    if len(st["answers"]) >= need:
        ordered = [(u, st["answers"][u]["card"]) for u in st["answers"]]
        lines, buttons = [], []
        for i, (u2, ans) in enumerate(ordered, 1):
            name = next(p["username"] for p in st["players"] if p["user_id"] == u2)
            lines.append(f"{i}. **{name}** ‚Äî _{ans}_")
            buttons.append([InlineKeyboardButton(text=f"{i}. {name}", callback_data=f"pick:{group_chat_id}:{i-1}")])
        
        await cb.bot.send_message(
            group_chat_id, 
            "üìã **–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:**\n\n" + "\n".join(lines) + "\n\nüëÜ –í–µ–¥—É—â–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )

@router.callback_query(F.data.startswith("pick:"))
async def on_pick(cb: CallbackQuery):
    _, group_chat_id_str, idx_str = cb.data.split(":")
    group_chat_id, idx = int(group_chat_id_str), int(idx_str)
    st = SESSIONS.get(group_chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    host_id = st["players"][st["host_idx"]]["user_id"]
    if cb.from_user.id != host_id:
        await cb.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å.", show_alert=True)
        return

    ordered = [(u, st["answers"][u]["card"]) for u in st["answers"]]
    if idx < 0 or idx >= len(ordered):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å.", show_alert=True)
        return

    win_uid, win_ans = ordered[idx]
    win_name = next(p["username"] for p in st["players"] if p["user_id"] == win_uid)

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
    st["scores"][win_uid] = st["scores"].get(win_uid, 0) + 1

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ used_answers
    for uid, answer_data in st["answers"].items():
        hand = st["hands"].get(uid, [])
        card = answer_data["card"]
        
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏
        if card in hand:
            hand.remove(card)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
        st["used_answers"].append(card)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É–∫—É
        st["hands"][uid] = hand

    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        pass
    
    await cb.message.edit_text(
        f"üèÜ **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞:** {win_name}\nüí¨ **–û—Ç–≤–µ—Ç:** _{win_ans}_\n\n‚≠ê –û—á–∫–æ–≤: {st['scores'][win_uid]}"
    )

    # ====== –û–ë–ù–û–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—É—Ç–∫–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ======
    image_result, joke = await generate_card_content(st["current_situation"], win_ans)
    
    if image_result:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º - —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ URL
            if image_result.startswith('temp_image_') or os.path.isfile(image_result):
                # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –æ—Ç Gemini
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {image_result}")
                photo = FSInputFile(image_result)
                await cb.bot.send_photo(
                    group_chat_id, 
                    photo=photo,
                    caption=f"üòÑ {joke or ''}"
                )
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(image_result)
                    print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {image_result}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {e}")
            else:
                # URL –æ—Ç Pollinations
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º URL: {image_result}")
                await cb.bot.send_photo(group_chat_id, image_result, caption=f"üòÑ {joke or ''}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await cb.bot.send_message(group_chat_id, f"üòÑ **–®—É—Ç–∫–∞:** {joke or '‚Äî'}")
    else:
        # –¢–æ–ª—å–∫–æ —à—É—Ç–∫–∞ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        await cb.bot.send_message(group_chat_id, f"üòÑ **–®—É—Ç–∫–∞:** {joke or '‚Äî'}")

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    sorted_players = sorted(st["players"], key=lambda p: st["scores"].get(p["user_id"], 0), reverse=True)
    stats_lines = ["üìä **–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç:**"]
    for i, p in enumerate(sorted_players, 1):
        score = st["scores"].get(p["user_id"], 0)
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "‚ñ™Ô∏è"
        stats_lines.append(f"{medal} {p['username']}: {score}")
    
    await cb.bot.send_message(group_chat_id, "\n".join(stats_lines) + "\n\n‚úÖ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu())
