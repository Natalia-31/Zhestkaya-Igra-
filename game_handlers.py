# handlers/game_handlers.py

from typing import Dict, Any
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest

from config import OPENAI_SETTINGS
from game_utils import generate_image_bytes
from image_generator import create_card
from decks import get_new_shuffled_answers_deck

router = Router()
SESSIONS: Dict[int, Dict[str, Any]] = {}

def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="ui_new_game")],
        [InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="ui_join_game")],
        [InlineKeyboardButton(text="üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥", callback_data="ui_start_round")],
    ])

@router.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer("–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu())

@router.message(Command("new_game"))
async def cmd_new_game(m: Message):
    await _create_game(m.chat.id, m.from_user.id, m.from_user.full_name)
    await m.answer("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())

@router.message(Command("join_game"))
async def cmd_join_game(m: Message, bot: Bot):
    await _join_flow(m.chat.id, m.from_user.id, m.from_user.full_name, bot, feedback=m)

@router.message(Command("start_round"))
async def cmd_start_round(m: Message):
    await _start_round(m.bot, m.chat.id)

@router.callback_query(F.data == "ui_new_game")
async def ui_new_game(cb: CallbackQuery):
    await _create_game(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name)
    await cb.answer()
    try:
        await cb.message.edit_text("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())
    except TelegramBadRequest:
        pass

@router.callback_query(F.data == "ui_join_game")
async def ui_join_game(cb: CallbackQuery, bot: Bot):
    await _join_flow(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name, bot, feedback=cb.message)
    await cb.answer()

@router.callback_query(F.data == "ui_start_round")
async def ui_start_round(cb: CallbackQuery):
    await cb.answer()
    await _start_round(cb.bot, cb.message.chat.id)

async def _create_game(chat_id: int, host_id: int, host_name: str):
    SESSIONS[chat_id] = {
        "players": [{"user_id": host_id, "username": host_name}],
        "hands": {},
        "answers": {},
        "host_idx": 0,
        "current_situation": None,
        "main_deck": [],
        "used_answers": []
    }

async def _join_flow(chat_id: int, user_id: int, user_name: str, bot: Bot, feedback: Message):
    st = SESSIONS.get(chat_id)
    if not st:
        await feedback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª.", reply_markup=main_menu())
        return
    if user_id not in [p["user_id"] for p in st["players"]]:
        try:
            await bot.send_message(user_id, "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
        except TelegramBadRequest as e:
            await feedback.answer(f"‚ö†Ô∏è {user_name}, –Ω–∞–∂–º–∏—Ç–µ Start —É –±–æ—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ. {e}")
            return
        st["players"].append({"user_id": user_id, "username": user_name})
    await feedback.answer(f"‚úÖ –ò–≥—Ä–æ–∫–æ–≤: {len(st['players'])}", reply_markup=main_menu())

async def _start_round(bot: Bot, chat_id: int):
    st = SESSIONS.get(chat_id)
    if not st or len(st["players"]) < 2:
        await bot.send_message(chat_id, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.", reply_markup=main_menu())
        return

    st["answers"].clear()
    st["hands"].clear()
    st["host_idx"] = (st["host_idx"] + 1) % len(st["players"])
    host = st["players"][st["host_idx"]]
    host_id = host["user_id"]

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    situation = "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∑–∞–±–∞–≤–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã."
    st["current_situation"] = situation

    await bot.send_message(
        chat_id,
        f"üé¨ –†–∞—É–Ω–¥! üëë –í–µ–¥—É—â–∏–π: {host['username']}\n\nüé≤ {situation}"
    )

    full_deck = get_new_shuffled_answers_deck()
    st["main_deck"] = [c for c in full_deck if c not in st["used_answers"]]
    if not st["main_deck"]:
        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ.")
        return

    # –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
    hand_size = OPENAI_SETTINGS.get("HAND_SIZE", 10)
    for p in st["players"]:
        uid = p["user_id"]
        if uid == host_id:
            continue
        st["hands"][uid] = [st["main_deck"].pop() for _ in range(min(hand_size, len(st["main_deck"])))]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º
    for p in st["players"]:
        uid = p["user_id"]
        if uid == host_id:
            continue
        hand = st["hands"].get(uid, [])
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=card, callback_data=f"ans:{chat_id}:{uid}:{i}")]
            for i, card in enumerate(hand)
        ])
        try:
            await bot.send_message(
                uid,
                f"üé≤ –°–∏—Ç—É–∞—Ü–∏—è: {situation}\n\nüé¥ –í–∞—à–∞ —Ä—É–∫–∞ ({len(hand)}). –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
                reply_markup=kb
            )
        except TelegramBadRequest:
            await bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É {p['username']}.")

@router.callback_query(F.data.startswith("ans:"))
async def on_answer(cb: CallbackQuery):
    _, gcid, uid, idx = cb.data.split(":")
    group_chat_id, uid, idx = int(gcid), int(uid), int(idx)
    st = SESSIONS.get(group_chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    host_id = st["players"][st["host_idx"]]["user_id"]
    if cb.from_user.id != uid or uid == host_id:
        await cb.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)
        return

    hand = st["hands"].get(uid, [])
    if idx < 0 or idx >= len(hand):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    card = hand.pop(idx)
    st["answers"][uid] = card
    st["used_answers"].append(card)
    await cb.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {card}")

    if len(st["answers"]) >= len(st["players"]) - 1:
        ordered = list(st["answers"].items())
        lines, buttons = [], []
        for i, (u2, ans) in enumerate(ordered, 1):
            name = next(p["username"] for p in st["players"] if p["user_id"] == u2)
            lines.append(f"{i}. {name} ‚Äî {ans}")
            buttons.append([InlineKeyboardButton(text=str(i), callback_data=f"pick:{group_chat_id}:{i-1}")])
        await cb.bot.send_message(
            group_chat_id,
            "–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(lines),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )

@router.callback_query(F.data.startswith("pick:"))
async def on_pick(cb: CallbackQuery):
    _, gcid, idx = cb.data.split(":")
    group_chat_id, idx = int(gcid), int(idx)
    st = SESSIONS.get(group_chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    host_id = st["players"][st["host_idx"]]["user_id"]
    if cb.from_user.id != host_id:
        await cb.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å.", show_alert=True)
        return

    ordered = list(st["answers"].items())
    if idx < 0 or idx >= len(ordered):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å.", show_alert=True)
        return

    win_uid, win_ans = ordered[idx]
    win_name = next(p["username"] for p in st["players"] if p["user_id"] == win_uid)

    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        pass
    await cb.message.edit_text(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {win_name}\n–û—Ç–≤–µ—Ç: {win_ans}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
    try:
        img_bytes = generate_image_bytes(f"{st['current_situation']} –û—Ç–≤–µ—Ç: {win_ans}")
        if img_bytes:
            await cb.bot.send_photo(group_chat_id, img_bytes)
    except Exception as e:
        await cb.bot.send_message(group_chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

    # –î–æ–±–æ—Ä –∫–∞—Ä—Ç
    for p in st["players"]:
        uid2 = p["user_id"]
        if uid2 == host_id:
            continue
        if not st["main_deck"]:
            full = get_new_shuffled_answers_deck()
            used = set(st["used_answers"])
            in_hands = {c for hand in st["hands"].values() for c in hand}
            st["main_deck"] = [c for c in full if c not in used and c not in in_hands]
        if st["main_deck"]:
            new_card = st["main_deck"].pop()
            st["hands"].setdefault(uid2, []).append(new_card)
            try:
                await cb.bot.send_message(
                    uid2,
                    f"üé¥ –í—ã –¥–æ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: **{new_card}**\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {len(st['hands'][uid2])} –∫–∞—Ä—Ç.",
                    parse_mode="Markdown"
                )
            except TelegramBadRequest:
                pass

    await cb.bot.send_message(group_chat_id, "–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu())
