from __future__ import annotations

import asyncio
import json
import random
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Optional

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

# –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏+–æ—Ç–≤–µ—Ç—É
from PIL import Image, ImageDraw, ImageFont

# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã / –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
MIN_PLAYERS = 3
HAND_SIZE = 10
ROUND_TIMEOUT = 120  # —Å–µ–∫. –Ω–∞ —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
ASSETS_DIR = Path(".")
SITUATIONS_PATH = ASSETS_DIR / "situations.json"
CARDS_PATH = ASSETS_DIR / "cards.json"

# ---------- –†–æ—É—Ç–µ—Ä –º–æ–¥—É–ª—è ----------
router = Router()

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ----------

@dataclass
class Answer:
    user_id: int
    text: str

@dataclass
class GameState:
    chat_id: int
    players: List[int] = field(default_factory=list)
    host_index: int = 0
    phase: str = "lobby"  # lobby | collect | choose | result
    round_no: int = 0
    current_situation: Optional[str] = None
    answers: List[Answer] = field(default_factory=list)  # –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ (—Å–º–µ—à–∞–Ω–Ω—ã–µ)
    # "—Ä—É–∫–∞" –∏–≥—Ä–æ–∫–∞: user_id -> —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫-–æ—Ç–≤–µ—Ç–æ–≤
    hands: Dict[int, List[str]] = field(default_factory=dict)
    # –∫–æ–ª–æ–¥–∞ –¥–ª—è –¥–æ–±–æ—Ä–∞
    deck: List[str] = field(default_factory=list)

    def current_host(self) -> Optional[int]:
        if not self.players:
            return None
        return self.players[self.host_index % len(self.players)]

    def next_host(self):
        if self.players:
            self.host_index = (self.host_index + 1) % len(self.players)

# –í—Å–µ –∏–≥—Ä—ã –ø–æ —á–∞—Ç–∞–º
GAMES: Dict[int, GameState] = {}

# –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏/–∫–∞—Ä—Ç—ã (–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞)
ALL_SITUATIONS: List[str] = []
ALL_CARDS: List[str] = []


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–π/–∫–∞—Ä—Ç ----------

def load_situations_cards():
    global ALL_SITUATIONS, ALL_CARDS

    # –°–∏—Ç—É–∞—Ü–∏–∏
    if SITUATIONS_PATH.exists():
        try:
            data = json.loads(SITUATIONS_PATH.read_text(encoding="utf-8"))
            # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç {"situations": [...]}
            ALL_SITUATIONS = list(data.get("situations", []))
        except Exception:
            ALL_SITUATIONS = []
    if not ALL_SITUATIONS:
        # –§–æ–ª–±—ç–∫ ‚Äì –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        ALL_SITUATIONS = [
            "–£—Ç—Ä–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞. –¢—ã –∑–∞—Ö–æ–¥–∏—à—å –≤ –æ—Ñ–∏—Å –∏ –≤–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ...",
            "–í –ø—É—Å—Ç—ã–Ω–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–∞–±–ª–∏—á–∫–∞ —Å –Ω–∞–¥–ø–∏—Å—å—é...",
            "–¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –≤ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–º –º–µ—Å—Ç–µ, –Ω–æ —Ä—è–¥–æ–º –ª–µ–∂–∏—Ç...",
            "–í–µ–¥—É—â–∏–π –æ–±—ä—è–≤–ª—è–µ—Ç: ¬´–¢–µ–º–∞ –¥–Ω—è ‚Äî ...¬ª",
        ]

    # –ö–∞—Ä—Ç—ã-–æ—Ç–≤–µ—Ç—ã
    if CARDS_PATH.exists():
        try:
            data = json.loads(CARDS_PATH.read_text(encoding="utf-8"))
            # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç {"cards": [...]}
            ALL_CARDS = list(data.get("cards", []))
        except Exception:
            ALL_CARDS = []
    if not ALL_CARDS:
        ALL_CARDS = [
            "–∫–æ—Ñ–µ –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∞",
            "–∫–æ—Ç –≤ –∫–æ—Ä–æ–±–∫–µ",
            "–º–æ–ª—á–∞—â–∏–π —á–∞—Ç",
            "—Å–ª—É—á–∞–π–Ω—ã–π —É–≤–æ–ª–µ–Ω–Ω—ã–π",
            "—è—Ä–∫–æ–µ —Å–æ–ª–Ω—Ü–µ –≤ –≥–ª–∞–∑–∞",
            "—Å—Ç–∏–∫–µ—Ä—ã –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "—á—å—è-—Ç–æ –Ω–µ–ª–æ–≤–∫–∞—è —à—É—Ç–∫–∞",
            "–∏–¥–µ–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
            "–≤–µ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞",
            "–ø–∏—Ü—Ü–∞ –±–µ–∑ –∞–Ω–∞–Ω–∞—Å–æ–≤",
            "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –Ω–∞–¥–µ–∂–¥–∞",
            "–º–∞–≥–∏—è Ctrl+Z",
        ]


# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------

def ensure_game(chat_id: int) -> GameState:
    game = GAMES.get(chat_id)
    if not game:
        game = GameState(chat_id=chat_id)
        GAMES[chat_id] = game
    return game


def deal_to_full_hand(game: GameState, user_id: int):
    """–î–æ–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫—É –¥–æ HAND_SIZE –∏–∑ –∫–æ–ª–æ–¥—ã; –µ—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ ‚Äì –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∞—Ç—å –∏–∑ ALL_CARDS."""
    hand = game.hands.setdefault(user_id, [])
    while len(hand) < HAND_SIZE:
        if not game.deck:
            game.deck = ALL_CARDS.copy()
            random.shuffle(game.deck)
        hand.append(game.deck.pop())


def make_answers_keyboard(hand: List[str], user_id: int) -> InlineKeyboardMarkup:
    # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ (–æ–±—Ä–µ–∂–µ–º –¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
    rows = []
    for idx, card in enumerate(hand):
        title = card if len(card) <= 35 else card[:32] + "‚Ä¶"
        rows.append([InlineKeyboardButton(text=f"üëâ {title}", callback_data=f"ans:{idx}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def make_choices_keyboard(answers: List[Answer]) -> InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–µ–¥—É—â–∏–º ‚Äî –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ
    rows = []
    for idx, ans in enumerate(answers, 1):
        title = ans.text if len(ans.text) <= 40 else ans.text[:37] + "‚Ä¶"
        rows.append([InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å #{idx}", callback_data=f"pick:{idx-1}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def answers_summary(answers: List[Answer]) -> str:
    # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥—è—Ç –≤—Å–µ ‚Äì —Å–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if not answers:
        return "–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    lines = [f"#{i+1}: {a.text}" for i, a in enumerate(answers)]
    return "–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n\n" + "\n".join(lines)


async def generate_image_file(situation: str, answer: str, out_path: Path) -> Path:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é PNG-–∫–∞—Ä—Ç–∏–Ω–∫—É (1024x1024) —Å —Ç–µ–∫—Å—Ç–æ–º —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç–∞.
    –ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API ‚Äî —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–ª–æ.
    """
    out_path.parent.mkdir(parents=True, exist_ok=True)
    img = Image.new("RGB", (1024, 1024), color=(245, 246, 248))
    draw = ImageDraw.Draw(img)

    # –ü–æ–¥–≥—Ä—É–∑–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω; –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç
    try:
        font_title = ImageFont.truetype("arial.ttf", 42)
        font_body = ImageFont.truetype("arial.ttf", 36)
    except Exception:
        font_title = ImageFont.load_default()
        font_body = ImageFont.load_default()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((40, 40), "–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞", fill=(20, 20, 20), font=font_title)

    # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç: —Å–∏—Ç—É–∞—Ü–∏—è –∏ –æ—Ç–≤–µ—Ç
    def wrap(text: str, width: int = 28) -> List[str]:
        words = text.split()
        lines, buf = [], []
        for w in words:
            buf.append(w)
            if len(" ".join(buf)) > width:
                lines.append(" ".join(buf))
                buf = []
        if buf:
            lines.append(" ".join(buf))
        return lines

    y = 120
    draw.text((40, y), "–°–∏—Ç—É–∞—Ü–∏—è:", fill=(40, 40, 40), font=font_body)
    y += 40
    for line in wrap(situation, 30):
        draw.text((60, y), line, fill=(10, 10, 10), font=font_body)
        y += 36

    y += 20
    draw.text((40, y), "–û—Ç–≤–µ—Ç:", fill=(40, 40, 40), font=font_body)
    y += 40
    for line in wrap(answer, 30):
        draw.text((60, y), line, fill=(10, 10, 10), font=font_body)
        y += 36

    img.save(out_path)
    return out_path


# ---------- –ö–æ–º–∞–Ω–¥—ã /new_game /join /start_round ----------

@router.message(Command("new_game"))
async def cmd_new_game(message: Message):
    game = ensure_game(message.chat.id)
    # –°–±—Ä–æ—Å –≤ –ª–æ–±–±–∏
    game.players.clear()
    game.hands.clear()
    game.deck = ALL_CARDS.copy()
    random.shuffle(game.deck)
    game.phase = "lobby"
    game.round_no = 0
    game.host_index = 0
    game.current_situation = None
    game.answers.clear()

    await message.answer(
        "üÉè –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        "–ñ–º–∏—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: 3.\n"
        "–°–æ–∑–¥–∞—Ç–µ–ª—å (–∏–ª–∏ –ª—é–±–æ–π –∏–≥—Ä–æ–∫) –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥ –∫–æ–º–∞–Ω–¥–æ–π /start_round, "
        "–∫–æ–≥–¥–∞ –≤—Å–µ —Å–æ–±–µ—Ä—É—Ç—Å—è."
    )


@router.message(Command("join"))
async def cmd_join(message: Message):
    game = ensure_game(message.chat.id)

    if message.from_user is None:
        return

    uid = message.from_user.id
    if uid in game.players:
        await message.reply("–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ! ‚úã")
        return

    game.players.append(uid)
    deal_to_full_hand(game, uid)

    await message.answer(
        f"‚úÖ {message.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ.\n"
        f"–ò–≥—Ä–æ–∫–æ–≤ —Å–µ–π—á–∞—Å: {len(game.players)}"
    )


@router.message(Command("start_round"))
async def cmd_start_round(message: Message):
    game = ensure_game(message.chat.id)
    if len(game.players) < MIN_PLAYERS:
        await message.answer(f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_PLAYERS} –∏–≥—Ä–æ–∫–∞(–æ–≤), —Å–µ–π—á–∞—Å {len(game.players)}.")
        return

    # –°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    game.phase = "collect"
    game.round_no += 1
    game.answers.clear()

    # –í–µ–¥—É—â–∏–π ‚Äî –ø–æ –∫—Ä—É–≥—É
    host_id = game.current_host()
    # –°–ª—É—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    game.current_situation = random.choice(ALL_SITUATIONS)

    await message.answer(
        f"üé¨ –†–∞—É–Ω–¥ #{game.round_no}\n"
        f"–í–µ–¥—É—â–∏–π: <a href=\"tg://user?id={host_id}\">{host_id}</a>\n\n"
        f"–°–∏—Ç—É–∞—Ü–∏—è:\n<b>{game.current_situation}</b>\n\n"
        f"–ò–≥—Ä–æ–∫–∏, –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ /answer",
        parse_mode="HTML"
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —á–µ—Ä–µ–∑ ROUND_TIMEOUT –ø–æ–∫–∞–∂–µ—Ç –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ –≤—Å—ë –Ω–µ —Å–æ–±—Ä–∞–Ω–æ
    asyncio.create_task(round_timeout_watchdog(message.chat.id, ROUND_TIMEOUT))


@router.message(Command("answer"))
async def cmd_answer(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–∫—É –µ–≥–æ —Ä—É–∫—É –∏ –¥–∞—ë—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É-–æ—Ç–≤–µ—Ç."""
    game = ensure_game(message.chat.id)
    if message.from_user is None:
        return
    uid = message.from_user.id

    if game.phase != "collect":
        await message.reply("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—á–∞—Ç—å.")
        return
    if uid not in game.players:
        await message.reply("–¢—ã –µ—â—ë –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ñ–º–∏ /join")
        return

    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª ‚Äî –º–æ–∂–Ω–æ –ª–∏–±–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å, –ª–∏–±–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å.
    if any(a.user_id == uid for a in game.answers):
        await message.reply("–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.")
        return

    hand = game.hands.get(uid, [])
    if not hand:
        deal_to_full_hand(game, uid)
        hand = game.hands[uid]

    kb = make_answers_keyboard(hand, uid)
    await message.reply("–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫—É-–æ—Ç–≤–µ—Ç:", reply_markup=kb)


@router.callback_query(F.data.startswith("ans:"))
async def cb_pick_answer(callback: CallbackQuery):
    """–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É-–æ—Ç–≤–µ—Ç –∏–∑ —Å–≤–æ–µ–π —Ä—É–∫–∏."""
    if not callback.message:
        return
    game = ensure_game(callback.message.chat.id)
    if callback.from_user is None:
        return

    if game.phase != "collect":
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)
        return

    uid = callback.from_user.id
    # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –≤ –∏–≥—Ä–µ
    if uid not in game.players:
        await callback.answer("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ.", show_alert=True)
        return

    # —É–∂–µ –æ—Ç–≤–µ—á–∞–ª?
    if any(a.user_id == uid for a in game.answers):
        await callback.answer("–û—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", show_alert=True)
        return

    # –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã
    try:
        idx = int(callback.data.split(":")[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    hand = game.hands.get(uid, [])
    if idx < 0 or idx >= len(hand):
        await callback.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã.", show_alert=True)
        return

    card_text = hand.pop(idx)
    # –¥–æ–±–∞–≤–∏–º –æ—Ç–≤–µ—Ç –∏ –¥–æ–±–µ—Ä—ë–º –∫–∞—Ä—Ç—É –¥–æ –ø–æ–ª–Ω–æ–π —Ä—É–∫–∏
    game.answers.append(Answer(user_id=uid, text=card_text))
    deal_to_full_hand(game, uid)

    await callback.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ï—Å–ª–∏ –≤—Å–µ, –∫—Ä–æ–º–µ –≤–µ–¥—É—â–µ–≥–æ, –æ—Ç–≤–µ—Ç–∏–ª–∏ ‚Äî –ø–æ–∫–∞–∂–µ–º —Å–≤–æ–¥–∫—É
    host_id = game.current_host()
    expecting = len([p for p in game.players if p != host_id])
    if len(game.answers) >= expecting:
        await show_answers_for_all(callback.message)


async def round_timeout_watchdog(chat_id: int, delay: int):
    """–ï—Å–ª–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É –Ω–µ –≤—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ ‚Äì –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –µ—Å—Ç—å."""
    await asyncio.sleep(delay)
    # —á–∞—Ç –º–æ–≥ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –∏—Å—á–µ–∑–Ω—É—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    game = GAMES.get(chat_id)
    if not game or game.phase != "collect":
        return
    # –ù—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–º–µ—é—â–∏–µ—Å—è –æ—Ç–≤–µ—Ç—ã
    # –ù–∞–π–¥—ë–º –æ–±—ä–µ–∫—Ç Message –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º; –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º –≤ —á–∞—Ç
    # (–≤—ã–∑–æ–≤–µ–º show —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    # –≠—Ç–æ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
    # –í —Ç–≤–æ—ë–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ Router ‚Äî –Ω–µ –º–æ–∂–µ–º.
    # –ü–æ—ç—Ç–æ–º—É timeout –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–∏ –≤—Ä—É—á–Ω—É—é –¥–æ–±—å—é—Ç /answer
    # –∏–ª–∏ –≤–µ–¥—É—â–∏–π –∫–æ–º–∞–Ω–¥–æ–π /show_answers.
    # –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –¥–æ–±–∞–≤–∏–º —è–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É:
    pass


@router.message(Command("show_answers"))
async def cmd_show_answers(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ ‚Äî –≤—Ä—É—á–Ω—É—é —Ä–∞—Å–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ –≤—Å–µ –Ω–µ —É—Å–ø–µ–ª–∏."""
    game = ensure_game(message.chat.id)
    if game.phase != "collect":
        await message.reply("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã.")
        return
    await show_answers_for_all(message)


async def show_answers_for_all(message: Message):
    """–†–∞—Å–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã –≤—Å–µ–º –∏ –¥–∞—Ç—å –≤–µ–¥—É—â–µ–º—É –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π."""
    chat_id = message.chat.id
    game = ensure_game(chat_id)
    if not game.answers:
        await message.reply("–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –ü–µ—Ä–µ–º–µ—à–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã, —á—Ç–æ–±—ã –Ω–µ —É–≥–∞–¥—ã–≤–∞–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
    random.shuffle(game.answers)
    game.phase = "choose"

    text = (
        f"üßæ –°–∏—Ç—É–∞—Ü–∏—è:\n<b>{game.current_situation}</b>\n\n"
        + answers_summary(game.answers)
        + "\n\n–í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç."
    )
    kb = make_choices_keyboard(game.answers)
    await message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.startswith("pick:"))
async def cb_pick_winner(callback: CallbackQuery):
    """–í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç."""
    if not callback.message:
        return
    game = ensure_game(callback.message.chat.id)
    if not game or game.phase != "choose":
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å.", show_alert=True)
        return

    host_id = game.current_host()
    if callback.from_user is None or callback.from_user.id != host_id:
        await callback.answer("–í—ã–±–∏—Ä–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π.", show_alert=True)
        return

    try:
        idx = int(callback.data.split(":")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    if idx < 0 or idx >= len(game.answers):
        await callback.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.", show_alert=True)
        return

    winner_answer = game.answers[idx]
    winner_id = winner_answer.user_id

    # –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    out_dir = Path("generated")
    out_path = out_dir / f"round_{game.round_no}_{winner_id}.png"
    await generate_image_file(game.current_situation or "", winner_answer.text, out_path)

    game.phase = "result"
    await callback.message.answer(
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞: <a href=\"tg://user?id={winner_id}\">{winner_id}</a>\n"
        f"–ï–≥–æ –æ—Ç–≤–µ—Ç: <b>{winner_answer.text}</b>",
        parse_mode="HTML"
    )
    try:
        await callback.message.answer_photo(photo=out_path.open("rb"))
    except Exception:
        await callback.message.answer("(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –Ω–æ —Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.)")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
    game.next_host()
    game.current_situation = None
    game.answers.clear()
    game.phase = "lobby"

    await callback.message.answer(
        "–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–µ–¥—É—â–∏–π –ø–µ—Ä–µ–¥–∞–Ω –ø–æ –∫—Ä—É–≥—É.\n"
        "–ó–∞–ø—É—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥: /start_round"
    )
    await callback.answer()


# ---------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ ----------

def register_game_handlers(dp):
    """
    –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–≤–æ–∏–º main.py:
    dp: Dispatcher
    """
    load_situations_cards()  # –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    dp.include_router(router)
