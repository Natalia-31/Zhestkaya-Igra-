from __future__ import annotations
import asyncio
import random
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Optional

from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)

from PIL import Image, ImageDraw, ImageFont
import openai
import os

# =====================  –ù–ê–°–¢–†–û–ô–ö–ò  =====================
MIN_PLAYERS = 2
HAND_SIZE = 10
ROUND_TIMEOUT = 40

try:
    BASE_DIR = Path(__file__).parent
except NameError:
    BASE_DIR = Path(".").resolve()

FONT_PATH = BASE_DIR / "arial.ttf"

if not os.getenv("OPENAI_API_KEY"):
    raise RuntimeError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")

openai.api_key = os.getenv("OPENAI_API_KEY")

# =====================  –†–û–£–¢–ï–†  =====================
router = Router()

# =====================  –ú–û–î–ï–õ–ò  =====================
@dataclass
class Answer:
    user_id: int
    text: str
    user_name: str

@dataclass
class GameState:
    chat_id: int
    players: Dict[int, str] = field(default_factory=dict)
    host_index: int = 0
    phase: str = "lobby"
    round_no: int = 0
    current_situation: Optional[str] = None
    answers: List[Answer] = field(default_factory=list)
    hands: Dict[int, List[str]] = field(default_factory=dict)
    deck: List[str] = field(default_factory=list)

    @property
    def player_ids(self) -> List[int]:
        return list(self.players.keys())

    def current_host_id(self) -> Optional[int]:
        if not self.player_ids:
            return None
        return self.player_ids[self.host_index % len(self.player_ids)]

    def current_host_name(self) -> Optional[str]:
        host_id = self.current_host_id()
        if host_id:
            return self.players.get(host_id, f"ID: {host_id}")
        return None

    def next_host(self):
        if self.players:
            self.host_index = (self.host_index + 1) % len(self.players)

# =====================  –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï  =====================
GAMES: Dict[int, GameState] = {}

# =====================  OPENAI: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è =====================
def generate_situations_sync(count: int = 5) -> List[str]:
    prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–±–∞–≤–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã. "
        f"–ö–∞–∂–¥–∞—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ '____'. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        f"–°–∞–º–∞—è —Å—Ç—Ä–∞–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —è –æ–ø–æ–∑–¥–∞–ª: ____."
    )
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500,
            temperature=0.9,
        )
        text = response.choices[0].message.content.strip()
        situations = [line.strip("- ‚Ä¢\t ") for line in text.split("\n") if "____" in line]
        return situations[:count]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–π —á–µ—Ä–µ–∑ OpenAI: {e}")
        return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏."]

async def generate_situations_via_openai(count: int = 5) -> List[str]:
    return await asyncio.to_thread(generate_situations_sync, count)

def generate_cards_sync(count: int = 50) -> List[str]:
    prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–º–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã. "
        f"–ö–∞–∂–¥—ã–π –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ —Ç—Ä—ë—Ö —Å–ª–æ–≤. –ü—Ä–∏–º–µ—Ä—ã: ¬´–º–æ—è –º–∞–º–∞¬ª, ¬´—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–µ–∫—Å¬ª, ¬´–∫–æ—à–∞—á—å—è –º—è—Ç–∞¬ª."
    )
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500,
            temperature=0.9,
        )
        text = response.choices[0].message.content.strip()
        cards = [line.strip("- ‚Ä¢\t ") for line in text.split("\n") if line.strip()]
        return cards[:count]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ OpenAI: {e}")
        return [f"–û—Ç–≤–µ—Ç #{i+1}" for i in range(count)]

async def generate_cards_via_openai(count: int = 50) -> List[str]:
    return await asyncio.to_thread(generate_cards_sync, count)

# =====================  –£–¢–ò–õ–ò–¢–´  =====================
def ensure_game(chat_id: int) -> GameState:
    return GAMES.setdefault(chat_id, GameState(chat_id=chat_id))

def deal_to_full_hand(game: GameState, user_id: int):
    hand = game.hands.setdefault(user_id, [])
    while len(hand) < HAND_SIZE and game.deck:
        hand.append(game.deck.pop())

def make_answers_keyboard(hand: List[str]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üëâ {card[:35]}", callback_data=f"ans:{idx}")]
            for idx, card in enumerate(hand)
        ]
    )

def make_choices_keyboard(answers: List[Answer]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å #{i+1}", callback_data=f"pick:{i}")]
            for i, _ in enumerate(answers)
        ]
    )

def answers_summary(answers: List[Answer]) -> str:
    if not answers:
        return "–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    return "–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n\n" + "\n".join(
        f"#{i+1}: {a.text} (–æ—Ç: {a.user_name})" for i, a in enumerate(answers)
    )

# =====================  –•–ï–ù–î–õ–ï–†–´  =====================
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ ¬´–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞¬ª üéÆ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /new_game ‚Äî —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É\n"
        "‚Ä¢ /join ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
        "‚Ä¢ /start_round ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥"
    )

@router.message(Command("new_game"))
async def cmd_new_game(message: Message):
    GAMES[message.chat.id] = GameState(chat_id=message.chat.id)
    await message.answer("üÉè –ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ñ–º–∏—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")

@router.message(Command("join"))
async def cmd_join(message: Message):
    game = ensure_game(message.chat.id)
    user = message.from_user
    if not user:
        return
    if user.id in game.players:
        await message.reply("–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
        return
    game.players[user.id] = user.full_name
    deal_to_full_hand(game, user.id)
    await message.answer(f"‚úÖ {user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}")

# (–¥–∞–ª—å—à–µ –∏–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—É–Ω–¥–∞ –∏ callback ‚Äî –æ–Ω–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å, –º–µ–Ω—è—Ç—å —Ç–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–æ –∫—Ä–æ–º–µ –≤—ã–∑–æ–≤–∞ OpenAI –∫–∞–∫ —è —Å–¥–µ–ª–∞–ª –≤—ã—à–µ)
