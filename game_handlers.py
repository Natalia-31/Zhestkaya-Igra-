from __future__ import annotations
import asyncio
import random
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Optional, Set
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from PIL import Image, ImageDraw, ImageFont
import json
import os
import openai

# =====================  –ù–ê–°–¢–†–û–ô–ö–ò  =====================
MIN_PLAYERS = 2
HAND_SIZE = 10
ROUND_TIMEOUT = 60

try:
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    BASE_DIR = Path(__file__).parent.parent
except NameError:
    BASE_DIR = Path(".").resolve()

FONT_PATH = BASE_DIR / "arial.ttf"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —à—Ä–∏—Ñ—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    print("–í–ù–ò–ú–ê–ù–ò–ï: OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

router = Router()

# =====================  –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON =====================
def load_json_list(filepath: str) -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, list):
                print(f"–§–∞–π–ª {filepath} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, {len(data)} –∑–∞–ø–∏—Å–µ–π.")
                return data
            else:
                print(f"–û–®–ò–ë–ö–ê: {filepath} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ (array).")
                return []
    except FileNotFoundError:
        print(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        print(f"–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–∞–π–ª–µ {filepath}.")
        return []
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {filepath}: {e}")
        return []

all_situations = load_json_list("situations.json")
all_cards = load_json_list("cards.json")


# =====================  –ö–ª–∞—Å—Å—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã =====================
@dataclass
class Answer:
    user_id: int
    text: str
    user_name: str

@dataclass
class GameState:
    chat_id: int
    players: Dict[int, str] = field(default_factory=dict)
    host_index: int = 0
    phase: str = "lobby"  # lobby, collect, choose
    round_no: int = 0
    current_situation: Optional[str] = None
    answers: List[Answer] = field(default_factory=list)
    hands: Dict[int, List[str]] = field(default_factory=dict)
    deck: List[str] = field(default_factory=list)
    used_situations: Set[str] = field(default_factory=set)
    used_cards: Set[str] = field(default_factory=set)

    @property
    def player_ids(self) -> List[int]:
        return list(self.players.keys())

    def current_host_id(self) -> Optional[int]:
        if not self.player_ids:
            return None
        return self.player_ids[self.host_index % len(self.player_ids)]

    def current_host_name(self) -> Optional[str]:
        host_id = self.current_host_id()
        if host_id:
            return self.players.get(host_id, f"ID: {host_id}")
        return None

    def next_host(self):
        if self.players:
            self.host_index = (self.host_index + 1) % len(self.players)

GAMES: Dict[int, GameState] = {}


# =====================  –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã =====================
def get_random_unused_situation(game: GameState) -> str:
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    unused = [s for s in all_situations if s not in game.used_situations]
    
    # –ï—Å–ª–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –±–µ—Ä–µ–º –≤—Å–µ –∑–∞–Ω–æ–≤–æ
    if not unused and all_situations:
        game.used_situations.clear()
        unused = all_situations.copy()
        
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—É—Å—Ç (—Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è)
    if not unused:
        print("–í–ù–ò–ú–ê–ù–ò–ï: –°–ø–∏—Å–æ–∫ —Å–∏—Ç—É–∞—Ü–∏–π –ø—É—Å—Ç! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è.")
        return "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∂–µ—Å—Ç–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: ____." # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, —á—Ç–æ–±—ã –∏–≥—Ä–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
        
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    situation = random.choice(unused)
    game.used_situations.add(situation)
    return situation

def get_deck_without_used(game: GameState) -> List[str]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–ª–æ–¥—É –¥–ª—è —Ä–∞—É–Ω–¥–∞ –∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç."""
    available = [c for c in all_cards if c not in game.used_cards]
    if len(available) < (len(game.players) * HAND_SIZE):
        game.used_cards.clear()
        available = all_cards.copy()
    
    if not available:
        print("–í–ù–ò–ú–ê–ù–ò–ï: –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –ø—É—Å—Ç! –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã.")
        return [f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ #{i}" for i in range(50)]

    deck_size = min(len(available), 100) # –ë–µ—Ä–µ–º –¥–æ 100 –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥—É –Ω–∞ —Ä–∞—É–Ω–¥
    deck = random.sample(available, deck_size)
    for card in deck:
        game.used_cards.add(card)
    return deck

def ensure_game(chat_id: int) -> GameState:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —á–∞—Ç–∞."""
    return GAMES.setdefault(chat_id, GameState(chat_id=chat_id))

def find_game_by_user(user_id: int) -> Optional[GameState]:
    """–ù–∞—Ö–æ–¥–∏—Ç –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    for game in GAMES.values():
        if user_id in game.players:
            return game
    return None

def deal_to_full_hand(game: GameState, user_id: int):
    """–†–∞–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–∫—É –∫–∞—Ä—Ç—ã –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ä—É–∫–∏."""
    hand = game.hands.setdefault(user_id, [])
    while len(hand) < HAND_SIZE and game.deck:
        hand.append(game.deck.pop())


# =====================  –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä =====================
def make_answers_keyboard(hand: List[str]) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=f"üëâ {card}", callback_data=f"ans:{idx}")]
        for idx, card in enumerate(hand)
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def make_choices_keyboard(answers: List[Answer]) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=f"{idx+1}. {ans.text}", callback_data=f"pick:{idx}")]
        for idx, ans in enumerate(answers)
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# =====================  –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====================
def answers_summary(answers: List[Answer]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç–≤–µ—Ç–æ–≤."""
    return "\n".join(f"{i+1}. {a.text}" for i, a in enumerate(answers))

async def generate_image_file(situation: str, answer: str, out_path: Path) -> Optional[Path]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç–∞."""
    try:
        out_path.parent.mkdir(parents=True, exist_ok=True)
        img = Image.new("RGB", (800, 400), (25, 25, 25))
        draw = ImageDraw.Draw(img)
        font = ImageFont.truetype(str(FONT_PATH), 32) if FONT_PATH.exists() else ImageFont.load_default()
        
        # –û–±–µ—Ä—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        text = situation.replace("____", f'"{answer}"')
        lines = []
        max_width = 750
        words = text.split(' ')
        current_line = ""
        for word in words:
            if draw.textlength(current_line + word + ' ', font=font) <= max_width:
                current_line += word + ' '
            else:
                lines.append(current_line)
                current_line = word + ' '
        lines.append(current_line)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        total_height = len(lines) * font.getbbox("A")[3]
        y_start = (400 - total_height) / 2
        
        for i, line in enumerate(lines):
            y = y_start + i * (font.getbbox("A")[3] + 5)
            draw.text((40, y), line.strip(), fill="white", font=font)
            
        img.save(out_path)
        return out_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

# =====================  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤ =====================
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ ¬´–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞¬ª.\n"
        "/new_game ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/join ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
        "/start_round ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥"
    )

@router.message(Command("new_game"))
async def cmd_new_game(message: Message):
    GAMES[message.chat.id] = GameState(chat_id=message.chat.id)
    await message.answer("üÉè –ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ /join.")

@router.message(Command("join"))
async def cmd_join(message: Message):
    game = ensure_game(message.chat.id)
    user = message.from_user
    if not user: return
    if user.id in game.players:
        return await message.reply("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.")
    
    game.players[user.id] = user.full_name
    await message.answer(f"‚úÖ {user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}")

@router.message(Command("start_round"))
async def cmd_start_round(message: Message):
    game = ensure_game(message.chat.id)
    if len(game.players) < MIN_PLAYERS:
        return await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_PLAYERS}.")
    if game.phase != "lobby":
        return await message.answer("–†–∞—É–Ω–¥ —É–∂–µ –∏–¥–µ—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        
    game.phase = "collect"
    game.round_no += 1
    game.answers.clear()
    game.current_situation = get_random_unused_situation(game)
    game.deck = get_deck_without_used(game)

    host_name = game.current_host_name()

    await message.answer(
        f"üé¨ **–†–∞—É–Ω–¥ #{game.round_no}**\n"
        f"üëë –í–µ–¥—É—â–∏–π: **{host_name}**\n\n"
        f"üìú **–°–∏—Ç—É–∞—Ü–∏—è:**\n_{game.current_situation}_\n\n"
        f"–ò–≥—Ä–æ–∫–∏, –≤—ã–±–∏—Ä–∞–π—Ç–µ –ª—É—á—à–∏–µ –æ—Ç–≤–µ—Ç—ã! –£ –≤–∞—Å {ROUND_TIMEOUT} —Å–µ–∫—É–Ω–¥.",
        parse_mode="Markdown"
    )

    for uid in game.player_ids:
        if uid != game.current_host_id():
            deal_to_full_hand(game, uid)
            await send_hand_to_player(message.bot, game, uid)

    asyncio.create_task(round_timeout_watchdog(message.bot, message.chat.id, game.round_no))

async def send_hand_to_player(bot: Bot, game: GameState, user_id: int):
    hand = game.hands.get(user_id, [])
    if not hand:
        try:
            await bot.send_message(user_id, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–∞—Ä—Ç—ã!")
        except Exception: pass
        return

    try:
        await bot.send_message(user_id, "–í–∞—à–∞ —Ä—É–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=make_answers_keyboard(hand))
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É–∫—É –∏–≥—Ä–æ–∫—É {user_id}: {e}")

@router.callback_query(F.data.startswith("ans:"))
async def cb_pick_answer(callback: CallbackQuery):
    user = callback.from_user
    game = find_game_by_user(user.id)
    
    if not (game and user): return
    if game.phase != "collect":
        return await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)
    if user.id == game.current_host_id():
        return await callback.answer("–í–µ–¥—É—â–∏–π –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)
    if any(a.user_id == user.id for a in game.answers):
        return await callback.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π –≤—ã–±–æ—Ä.", show_alert=True)

    try:
        idx = int(callback.data.split(":")[1])
        hand = game.hands.get(user.id, [])
        card = hand.pop(idx)
        game.answers.append(Answer(user_id=user.id, text=card, user_name=user.full_name))
        
        await callback.answer("–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!", show_alert=False)
        await callback.message.delete()
        await callback.message.bot.send_message(game.chat_id, f"‚úÖ {user.full_name} —Å–¥–µ–ª–∞–ª(–∞) —Å–≤–æ–π –≤—ã–±–æ—Ä.")

        expecting_answers = len(game.player_ids) - 1
        if len(game.answers) >= expecting_answers:
            await show_answers_for_all(callback.message.bot, game.chat_id)
            
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã.", show_alert=True)

async def show_answers_for_all(bot: Bot, chat_id: int):
    game = ensure_game(chat_id)
    if game.phase != "collect": return
    game.phase = "choose"
    
    if not game.answers:
        await bot.send_message(chat_id, "–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏–Ω–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ /start_round")
        game.phase = "lobby"
        game.next_host()
        return

    random.shuffle(game.answers)
    text = (
        f"üìú **–°–∏—Ç—É–∞—Ü–∏—è:**\n_{game.current_situation}_\n\n"
        f"**–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:**\n{answers_summary(game.answers)}\n\n"
        f"üëë –í–µ–¥—É—â–∏–π ({game.current_host_name()}), –≤—ã–±–∏—Ä–∞–π –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç!"
    )
    await bot.send_message(chat_id, text, reply_markup=make_choices_keyboard(game.answers), parse_mode="Markdown")

@router.callback_query(F.data.startswith("pick:"))
async def cb_pick_winner(callback: CallbackQuery):
    user = callback.from_user
    game = ensure_game(callback.message.chat.id)
    if not user: return
    
    if game.phase != "choose":
        return await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –≤—ã–±–∏—Ä–∞—Ç—å.", show_alert=True)
    if user.id != game.current_host_id():
        return await callback.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.", show_alert=True)

    try:
        idx = int(callback.data.split(":")[1])
        winner = game.answers[idx]
        
        await callback.message.edit_text(
            f"üèÜ –í–µ–¥—É—â–∏–π ({game.current_host_name()}) –≤—ã–±—Ä–∞–ª!\n\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞: **{winner.user_name}**\n"
            f"–° –æ—Ç–≤–µ—Ç–æ–º: ¬´_{winner.text}_¬ª\n\n",
            parse_mode="Markdown",
            reply_markup=None
        )

        out_path = BASE_DIR / "generated" / f"round_{game.round_no}.png"
        img_path = await generate_image_file(game.current_situation, winner.text, out_path)
        if img_path:
            await callback.message.reply_photo(FSInputFile(img_path))

        game.next_host()
        game.phase = "lobby"
        await callback.message.bot.send_message(
            game.chat_id,
            f"–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–æ–≤—ã–π –≤–µ–¥—É—â–∏–π: **{game.current_host_name()}**.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_round",
            parse_mode="Markdown"
        )
        await callback.answer()
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.", show_alert=True)

async def round_timeout_watchdog(bot: Bot, chat_id: int, round_no: int):
    """–°–ª–µ–¥–∏—Ç –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞—É–Ω–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ."""
    await asyncio.sleep(ROUND_TIMEOUT)
    game = GAMES.get(chat_id)
    if game and game.round_no == round_no and game.phase == "collect":
        await bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–∫–∞–∑—ã–≤–∞—é –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å‚Ä¶")
        await show_answers_for_all(bot, chat_id)
