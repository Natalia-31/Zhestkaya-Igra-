from typing import Dict, Any, List

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest

from game_utils import decks, gen, video_gen  # –î–æ–±–∞–≤–ª–µ–Ω video_gen

router = Router()

SESSIONS: Dict[int, Dict[str, Any]] = {}


def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="ui_new_game")],
            [InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="ui_join")],
            [InlineKeyboardButton(text="üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥", callback_data="ui_start")]
        ]
    )


@router.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer("–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu())


@router.message(Command("new_game"))
async def cmd_new_game(m: Message):
    await _create_game(m.chat.id, m.from_user.id, m.from_user.full_name)
    await m.answer("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())


@router.message(Command("join_game"))
async def cmd_join_game(m: Message, bot: Bot):
    await _join_flow(m.chat.id, m.from_user.id, m.from_user.full_name, bot, feedback=m)


@router.message(Command("start_round"))
async def cmd_start_round(m: Message):
    await _start_round(m.bot, m.chat.id)


@router.callback_query(F.data == "ui_new_game")
async def ui_new_game(cb: CallbackQuery):
    await _create_game(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name)
    await cb.answer()
    try:
        await cb.message.edit_text("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())
    except TelegramBadRequest:
        pass


@router.callback_query(F.data == "ui_join")
async def ui_join(cb: CallbackQuery, bot: Bot):
    await _join_flow(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name, bot, feedback=cb.message)
    await cb.answer()


@router.callback_query(F.data == "ui_start")
async def ui_start(cb: CallbackQuery):
    await cb.answer()
    await _start_round(cb.bot, cb.message.chat.id)


async def _create_game(chat_id: int, host_id: int, host_name: str):
    SESSIONS[chat_id] = {
        "players": [],  # [{user_id, username}]
        "hands": {},  # user_id -> List[str]
        "answers": {},  # user_id -> str
        "host_idx": -1,
        "current_situation": None,
        "main_deck": [],  # –æ—Ç–≤–µ—Ç—ã –∏–∑ answers.json
        "used_answers": []  # —É–∂–µ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ
    }


async def _join_flow(chat_id: int, user_id: int, user_name: str, bot: Bot, feedback: Message):
    st = SESSIONS.get(chat_id)
    if not st:
        await feedback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª.", reply_markup=main_menu())
        return
    if user_id not in [p["user_id"] for p in st["players"]]:
        try:
            await bot.send_message(user_id, "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
        except TelegramBadRequest as e:
            await feedback.answer(f"‚ö†Ô∏è {user_name}, –Ω–∞–∂–º–∏—Ç–µ Start —É –±–æ—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ. {e}")
            return
        st["players"].append({"user_id": user_id, "username": user_name})
    await feedback.answer(f"‚úÖ –ò–≥—Ä–æ–∫–æ–≤: {len(st['players'])}", reply_markup=main_menu())


async def _start_round(bot: Bot, chat_id: int):
    st = SESSIONS.get(chat_id)
    if not st or len(st["players"]) < 2:
        await bot.send_message(chat_id, "–î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω—ã –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.", reply_markup=main_menu())
        return

    print(f"üé≤ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥, —É–∂–µ —Å—ã–≥—Ä–∞–Ω—ã {len(st['used_answers'])} –∫–∞—Ä—Ç")
    st["answers"] = {}
    st["hands"] = {}
    st["host_idx"] = (st["host_idx"] + 1) % len(st["players"])
    host = st["players"][st["host_idx"]]
    st["current_situation"] = decks.get_random_situation()

    await bot.send_message(chat_id, f"–†–∞—É–Ω–¥! –í–µ–¥—É—â–∏–π ‚Äî {host['username']}\n\n–°–∏—Ç—É–∞—Ü–∏—è: {st['current_situation']}")

    full_deck = decks.get_new_shuffled_deck()
    st["main_deck"] = [card for card in full_deck if card not in st["used_answers"]]

    if not st["main_deck"]:
        await bot.send_message(chat_id, "–ö–∞—Ä—Ç –¥–ª—è –¥–æ–±–æ—Ä–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å!")
        return

    for p in st["players"]:
        if p["user_id"] == host["user_id"]:
            continue
        hand = []
        while len(hand) < 10 and st["main_deck"]:
            hand.append(st["main_deck"].pop())
        st["hands"][p["user_id"]] = hand

    for p in st["players"]:
        if p["user_id"] == host["user_id"]:
            continue
        hand = st["hands"].get(p["user_id"], [])
        buttons = [
            [InlineKeyboardButton(text=card, callback_data=f"ans:{chat_id}:{p['user_id']}:{i}")]
            for i, card in enumerate(hand)
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        try:
            await bot.send_message(p["user_id"], f"–°–∏—Ç—É–∞—Ü–∏—è: {st['current_situation']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=keyboard)
        except TelegramBadRequest:
            await bot.send_message(chat_id,
                                   f"–ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É {p['username']} - –ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ—Ç—É –Ω–∞–ø—Ä—è–º—É—é.")


@router.callback_query(F.data.startswith("ans:"))
async def on_answer(cb: CallbackQuery):
    q = cb.data.split(":")
    chat_id = int(q[1])
    user_id = int(q[2])
    idx = int(q[3])

    st = SESSIONS.get(chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    if cb.from_user.id != user_id:
        await cb.answer("–í—ã —Å–µ–π—á–∞—Å –Ω–µ —É —Å–µ–±—è –≤ —Ä—É–∫–µ", show_alert=True)
        return

    hand = st["hands"].get(user_id, [])
    if idx < 0 or idx >= len(hand):
        await cb.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã", show_alert=True)
        return

    card = hand.pop(idx)
    st["answers"][user_id] = card
    st["used_answers"].append(card)

    await cb.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {card}")

    if len(st["answers"]) >= len(st["players"]) - 1:
        answers = list(st["answers"].items())
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=str(i + 1), callback_data=f"pick:{chat_id}:{i}") for i in range(len(answers))]
        ])
        text = "\n".join(
            f"{i + 1}. {next(p['username'] for p in st['players'] if p['user_id'] == uid)} ‚Äî {ans}"
            for i, (uid, ans) in enumerate(answers)
        )
        await cb.message.answer(f"–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n{text}", reply_markup=keyboard)


@router.callback_query(F.data.startswith("pick:"))
async def on_pick(cb: CallbackQuery):
    _, chat_id_str, idx_str = cb.data.split(":")
    chat_id = int(chat_id_str)
    idx = int(idx_str)

    st = SESSIONS.get(chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    if cb.from_user.id != st["players"][st["host_idx"]]["user_id"]:
        await cb.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å", show_alert=True)
        return

    answers = list(st["answers"].items())
    if idx < 0 or idx >= len(answers):
        await cb.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å", show_alert=True)
        return

    winner_uid, winner_answer = answers[idx]
    winner_name = next(p["username"] for p in st["players"] if p["user_id"] == winner_uid)

    try:
        await cb.message.edit_reply_markup()
    except TelegramBadRequest:
        pass

    await cb.message.answer(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n–û—Ç–≤–µ—Ç: {winner_answer}")

    await gen.send_illustration(cb.bot, chat_id, st["current_situation"], winner_answer)
    await video_gen.send_video_illustration(cb.bot, chat_id, st["current_situation"], winner_answer)

    # –î–æ–±–æ—Ä –∫–∞—Ä—Ç
    for p in st["players"]:
        if p["user_id"] == st["players"][st["host_idx"]]["user_id"]:
            continue
        if not st["main_deck"]:
            full_deck = decks.get_new_shuffled_deck()
            used = st["used_answers"]
            in_hands = [card for hand in st["hands"].values() for card in hand]
            st["main_deck"] = [card for card in full_deck if card not in used and card not in in_hands]
            if not st["main_deck"]:
                await cb.message.answer("–ö–∞—Ä—Ç –¥–ª—è –¥–æ–±–æ—Ä–∞ –Ω–µ—Ç.")
                return

        new_card = st["main_deck"].pop()
        st["hands"].setdefault(p["user_id"], []).append(new_card)
        try:
            await cb.bot.send_message(
                p["user_id"],
                f"–í—ã –¥–æ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: {new_card}\n–£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {len(st['hands'][p['user_id']])} –∫–∞—Ä—Ç.",
            )
        except TelegramBadRequest:
            pass

    await cb.message.answer("–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu())
