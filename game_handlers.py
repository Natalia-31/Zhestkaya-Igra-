from __future__ import annotations

import asyncio
import json
import random
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Optional

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è ¬´—Å–∏—Ç—É–∞—Ü–∏—è + –æ—Ç–≤–µ—Ç¬ª
from PIL import Image, ImageDraw, ImageFont


# =====================  –ù–ê–°–¢–†–û–ô–ö–ò  =====================

MIN_PLAYERS = 3
HAND_SIZE = 10
ROUND_TIMEOUT = 120  # —Å–µ–∫. –Ω–∞ —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤

ASSETS_DIR = Path(".")
SITUATIONS_PATH = ASSETS_DIR / "situations.json"   # {"situations":[...]}
CARDS_PATH = ASSETS_DIR / "cards.json"             # {"cards":[...]}


# =====================  –†–û–£–¢–ï–†  =====================

router = Router()


# =====================  –ú–û–î–ï–õ–ò  =====================

@dataclass
class Answer:
    user_id: int
    text: str


@dataclass
class GameState:
    chat_id: int
    players: List[int] = field(default_factory=list)
    host_index: int = 0
    phase: str = "lobby"  # lobby | collect | choose | result
    round_no: int = 0
    current_situation: Optional[str] = None
    answers: List[Answer] = field(default_factory=list)
    hands: Dict[int, List[str]] = field(default_factory=dict)  # user_id -> hand
    deck: List[str] = field(default_factory=list)

    def current_host(self) -> Optional[int]:
        if not self.players:
            return None
        return self.players[self.host_index % len(self.players)]

    def next_host(self):
        if self.players:
            self.host_index = (self.host_index + 1) % len(self.players)


# =====================  –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï  =====================

GAMES: Dict[int, GameState] = {}  # chat_id -> GameState
ALL_SITUATIONS: List[str] = []
ALL_CARDS: List[str] = []


# =====================  –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–¢–ï–ù–¢–ê  =====================

def load_situations_cards():
    """–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –∫–∞—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å; –∏–Ω–∞—á–µ ‚Äî –¥–µ—Ñ–æ–ª—Ç."""
    global ALL_SITUATIONS, ALL_CARDS

    # –°–∏—Ç—É–∞—Ü–∏–∏
    if SITUATIONS_PATH.exists():
        try:
            data = json.loads(SITUATIONS_PATH.read_text(encoding="utf-8"))
            ALL_SITUATIONS = list(data.get("situations", []))
        except Exception:
            ALL_SITUATIONS = []
    if not ALL_SITUATIONS:
        ALL_SITUATIONS = [
            "–£—Ç—Ä–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞. –¢—ã –∑–∞—Ö–æ–¥–∏—à—å –≤ –æ—Ñ–∏—Å –∏ –≤–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ...",
            "–í –ø—É—Å—Ç—ã–Ω–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–∞–±–ª–∏—á–∫–∞ —Å –Ω–∞–¥–ø–∏—Å—å—é...",
            "–¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –≤ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–º –º–µ—Å—Ç–µ, –Ω–æ —Ä—è–¥–æ–º –ª–µ–∂–∏—Ç...",
            "–í–µ–¥—É—â–∏–π –æ–±—ä—è–≤–ª—è–µ—Ç: ¬´–¢–µ–º–∞ –¥–Ω—è ‚Äî ...¬ª",
        ]

    # –ö–∞—Ä—Ç—ã-–æ—Ç–≤–µ—Ç—ã
    if CARDS_PATH.exists():
        try:
            data = json.loads(CARDS_PATH.read_text(encoding="utf-8"))
            ALL_CARDS = list(data.get("cards", []))
        except Exception:
            ALL_CARDS = []
    if not ALL_CARDS:
        ALL_CARDS = [
            "–∫–æ—Ñ–µ –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∞",
            "–∫–æ—Ç –≤ –∫–æ—Ä–æ–±–∫–µ",
            "–º–æ–ª—á–∞—â–∏–π —á–∞—Ç",
            "—Å–ª—É—á–∞–π–Ω—ã–π —É–≤–æ–ª–µ–Ω–Ω—ã–π",
            "—è—Ä–∫–æ–µ —Å–æ–ª–Ω—Ü–µ –≤ –≥–ª–∞–∑–∞",
            "—Å—Ç–∏–∫–µ—Ä—ã –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "—á—å—è-—Ç–æ –Ω–µ–ª–æ–≤–∫–∞—è —à—É—Ç–∫–∞",
            "–∏–¥–µ–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
            "–≤–µ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞",
            "–ø–∏—Ü—Ü–∞ –±–µ–∑ –∞–Ω–∞–Ω–∞—Å–æ–≤",
            "–º–∞–≥–∏—è Ctrl+Z",
        ]


# =====================  –£–¢–ò–õ–ò–¢–´  =====================

def ensure_game(chat_id: int) -> GameState:
    game = GAMES.get(chat_id)
    if not game:
        game = GameState(chat_id=chat_id)
        GAMES[chat_id] = game
    return game


def deal_to_full_hand(game: GameState, user_id: int):
    """–î–æ–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫—É –¥–æ HAND_SIZE –∏–∑ –∫–æ–ª–æ–¥—ã; –µ—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ ‚Äî –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∞—Ç—å."""
    hand = game.hands.setdefault(user_id, [])
    while len(hand) < HAND_SIZE:
        if not game.deck:
            game.deck = ALL_CARDS.copy()
            random.shuffle(game.deck)
        hand.append(game.deck.pop())


def make_answers_keyboard(hand: List[str]) -> InlineKeyboardMarkup:
    rows = []
    for idx, card in enumerate(hand):
        title = card if len(card) <= 35 else card[:32] + "‚Ä¶"
        rows.append([InlineKeyboardButton(text=f"üëâ {title}", callback_data=f"ans:{idx}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def make_choices_keyboard(answers: List[Answer]) -> InlineKeyboardMarkup:
    rows = []
    for idx, _ in enumerate(answers, 1):
        rows.append([InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å #{idx}", callback_data=f"pick:{idx-1}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def answers_summary(answers: List[Answer]) -> str:
    if not answers:
        return "–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    lines = [f"#{i+1}: {a.text}" for i, a in enumerate(answers)]
    return "–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n\n" + "\n".join(lines)


async def generate_image_file(situation: str, answer: str, out_path: Path) -> Path:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PNG-–∫–∞—Ä—Ç–∏–Ω–∫—É 1024x1024 —Å —Ç–µ–∫—Å—Ç–æ–º (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API)."""
    out_path.parent.mkdir(parents=True, exist_ok=True)
    img = Image.new("RGB", (1024, 1024), color=(245, 246, 248))
    draw = ImageDraw.Draw(img)

    try:
        font_title = ImageFont.truetype("arial.ttf", 42)
        font_body = ImageFont.truetype("arial.ttf", 36)
    except Exception:
        font_title = ImageFont.load_default()
        font_body = ImageFont.load_default()

    draw.text((40, 40), "–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞", fill=(20, 20, 20), font=font_title)

    def wrap(text: str, width: int = 28) -> List[str]:
        words = text.split()
        lines, buf = [], []
        for w in words:
            buf.append(w)
            if len(" ".join(buf)) > width:
                lines.append(" ".join(buf))
                buf = []
        if buf:
            lines.append(" ".join(buf))
        return lines

    y = 120
    draw.text((40, y), "–°–∏—Ç—É–∞—Ü–∏—è:", fill=(40, 40, 40), font=font_body)
    y += 40
    for line in wrap(situation, 30):
        draw.text((60, y), line, fill=(10, 10, 10), font=font_body)
        y += 36

    y += 20
    draw.text((40, y), "–û—Ç–≤–µ—Ç:", fill=(40, 40, 40), font=font_body)
    y += 40
    for line in wrap(answer, 30):
        draw.text((60, y), line, fill=(10, 10, 10), font=font_body)
        y += 36

    img.save(out_path)
    return out_path


async def show_answers_for_all_message(message: Message):
    chat_id = message.chat.id
    game = ensure_game(chat_id)
    if not game.answers:
        await message.answer("–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    random.shuffle(game.answers)
    game.phase = "choose"

    text = (
        f"üßæ –°–∏—Ç—É–∞—Ü–∏—è:\n<b>{game.current_situation}</b>\n\n"
        + answers_summary(game.answers)
        + "\n\n–í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç."
    )
    kb = make_choices_keyboard(game.answers)
    await message.answer(text, reply_markup=kb, parse_mode="HTML")


async def show_answers_for_all_by_chat(chat_id: int):
    game = ensure_game(chat_id)
    if not game.answers:
        await router.bot.send_message(chat_id, "–û—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.")
        return
    random.shuffle(game.answers)
    game.phase = "choose"

    text = (
        f"üßæ –°–∏—Ç—É–∞—Ü–∏—è:\n<b>{game.current_situation}</b>\n\n"
        + answers_summary(game.answers)
        + "\n\n–í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç."
    )
    kb = make_choices_keyboard(game.answers)
    await router.bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")


# =====================  –•–ï–ù–î–õ–ï–†–´  =====================

@router.message(CommandStart())
async def cmd_start(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÉè –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", callback_data="start_new")],
        [InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è (–≤ –≥—Ä—É–ø–ø–µ ‚Äî /join)", callback_data="noop")],
    ])
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ ¬´–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞¬ª ‚Äî –∞–Ω–∞–ª–æ–≥ 500 –ó–ª–æ–±–Ω—ã—Ö –∫–∞—Ä—Ç –≤ Telegram.\n\n"
        "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ:\n"
        "‚Ä¢ /new_game ‚Äî —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏\n"
        "‚Ä¢ /join ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
        "‚Ä¢ /start_round ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥\n"
        "‚Ä¢ /answer ‚Äî –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É-–æ—Ç–≤–µ—Ç\n"
        "‚Ä¢ –í–µ–¥—É—â–∏–π –≤–∏–¥–∏—Ç –æ—Ç–≤–µ—Ç—ã –≤—Å–µ—Ö –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π ‚Äî –±–æ—Ç —à–ª—ë—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É.\n",
        reply_markup=kb
    )


@router.callback_query(F.data == "start_new")
async def cb_start_new(call: CallbackQuery):
    await call.message.answer("–û–∫! –°–æ–∑–¥–∞—é –∏–≥—Ä—É‚Ä¶ –í –≥—Ä—É–ø–ø–µ –Ω–∞–∂–º–∏—Ç–µ /new_game –∏ –∑–æ–≤–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤.")
    await call.answer()


@router.callback_query(F.data == "noop")
async def cb_noop(call: CallbackQuery):
    await call.answer("–í –≥—Ä—É–ø–ø–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /join", show_alert=False)


@router.message(Command("new_game"))
async def cmd_new_game(message: Message):
    game = ensure_game(message.chat.id)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    game.players.clear()
    game.hands.clear()
    game.deck = ALL_CARDS.copy()
    random.shuffle(game.deck)
    game.phase = "lobby"
    game.round_no = 0
    game.host_index = 0
    game.current_situation = None
    game.answers.clear()

    await message.answer(
        "üÉè –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        "–ñ–º–∏—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: 3.\n"
        "–ö–æ–≥–¥–∞ –≤—Å–µ —Å–æ–±–µ—Ä—É—Ç—Å—è ‚Äî /start_round."
    )


@router.message(Command("join"))
async def cmd_join(message: Message):
    game = ensure_game(message.chat.id)
    if message.from_user is None:
        return

    uid = message.from_user.id
    if uid in game.players:
        await message.reply("–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ! ‚úã")
        return

    game.players.append(uid)
    deal_to_full_hand(game, uid)

    await message.answer(
        f"‚úÖ {message.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è.\n"
        f"–ò–≥—Ä–æ–∫–æ–≤ —Å–µ–π—á–∞—Å: {len(game.players)}"
    )


@router.message(Command("start_round"))
async def cmd_start_round(message: Message):
    game = ensure_game(message.chat.id)
    if len(game.players) < MIN_PLAYERS:
        await message.answer(f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_PLAYERS} –∏–≥—Ä–æ–∫–∞(–æ–≤), —Å–µ–π—á–∞—Å {len(game.players)}.")
        return

    # –°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    game.phase = "collect"
    game.round_no += 1
    game.answers.clear()
    host_id = game.current_host()
    game.current_situation = random.choice(ALL_SITUATIONS)

    await message.answer(
        f"üé¨ –†–∞—É–Ω–¥ #{game.round_no}\n"
        f"–í–µ–¥—É—â–∏–π: <a href=\"tg://user?id={host_id}\">{host_id}</a>\n\n"
        f"–°–∏—Ç—É–∞—Ü–∏—è:\n<b>{game.current_situation}</b>\n\n"
        f"–ò–≥—Ä–æ–∫–∏, –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ /answer",
        parse_mode="HTML"
    )

    # –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
    asyncio.create_task(round_timeout_watchdog(message.chat.id, ROUND_TIMEOUT))


@router.message(Command("answer"))
async def cmd_answer(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫—É –µ–≥–æ —Ä—É–∫—É –∏ –¥–∞—Ç—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É-–æ—Ç–≤–µ—Ç."""
    game = ensure_game(message.chat.id)
    if message.from_user is None:
        return
    uid = message.from_user.id

    if game.phase != "collect":
        await message.reply("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—á–∞—Ç—å.")
        return
    if uid not in game.players:
        await message.reply("–¢—ã –µ—â—ë –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ñ–º–∏ /join")
        return
    if any(a.user_id == uid for a in game.answers):
        await message.reply("–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.")
        return

    hand = game.hands.get(uid, [])
    if not hand:
        deal_to_full_hand(game, uid)
        hand = game.hands[uid]

    kb = make_answers_keyboard(hand)
    await message.reply("–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫—É-–æ—Ç–≤–µ—Ç:", reply_markup=kb)


@router.callback_query(F.data.startswith("ans:"))
async def cb_pick_answer(callback: CallbackQuery):
    """–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É-–æ—Ç–≤–µ—Ç –∏–∑ —Å–≤–æ–µ–π —Ä—É–∫–∏."""
    if not callback.message or callback.from_user is None:
        return
    game = ensure_game(callback.message.chat.id)

    if game.phase != "collect":
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)
        return

    uid = callback.from_user.id
    if uid not in game.players:
        await callback.answer("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ.", show_alert=True)
        return
    if any(a.user_id == uid for a in game.answers):
        await callback.answer("–û—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", show_alert=True)
        return

    try:
        idx = int(callback.data.split(":")[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    hand = game.hands.get(uid, [])
    if idx < 0 or idx >= len(hand):
        await callback.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã.", show_alert=True)
        return

    card_text = hand.pop(idx)
    game.answers.append(Answer(user_id=uid, text=card_text))
    deal_to_full_hand(game, uid)

    await callback.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ï—Å–ª–∏ –≤—Å–µ (–∫—Ä–æ–º–µ –≤–µ–¥—É—â–µ–≥–æ) –æ—Ç–≤–µ—Ç–∏–ª–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    host_id = game.current_host()
    expecting = len([p for p in game.players if p != host_id])
    if len(game.answers) >= expecting:
        await show_answers_for_all_message(callback.message)


@router.message(Command("show_answers"))
async def cmd_show_answers(message: Message):
    """–í–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—Ä—É—á–Ω—É—é —Ä–∞—Å–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ –Ω–µ –≤—Å–µ —É—Å–ø–µ–ª–∏."""
    game = ensure_game(message.chat.id)
    if game.phase != "collect":
        await message.reply("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã.")
        return
    await show_answers_for_all_message(message)


@router.callback_query(F.data.startswith("pick:"))
async def cb_pick_winner(callback: CallbackQuery):
    """–í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç."""
    if not callback.message:
        return
    game = ensure_game(callback.message.chat.id)
    if not game or game.phase != "choose":
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å.", show_alert=True)
        return

    host_id = game.current_host()
    if callback.from_user is None or callback.from_user.id != host_id:
        await callback.answer("–í—ã–±–∏—Ä–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π.", show_alert=True)
        return

    try:
        idx = int(callback.data.split(":")[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    if idx < 0 or idx >= len(game.answers):
        await callback.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.", show_alert=True)
        return

    winner_answer = game.answers[idx]
    winner_id = winner_answer.user_id

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    out_dir = Path("generated")
    out_path = out_dir / f"round_{game.round_no}_{winner_id}.png"
    await generate_image_file(game.current_situation or "", winner_answer.text, out_path)

    game.phase = "result"
    await callback.message.answer(
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞: <a href=\"tg://user?id={winner_id}\">{winner_id}</a>\n"
        f"–ï–≥–æ –æ—Ç–≤–µ—Ç: <b>{winner_answer.text}</b>",
        parse_mode="HTML"
    )
    try:
        await callback.message.answer_photo(photo=out_path.open("rb"))
    except Exception:
        await callback.message.answer("(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –Ω–æ —Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.)")

    # –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
    game.next_host()
    game.current_situation = None
    game.answers.clear()
    game.phase = "lobby"

    await callback.message.answer(
        "–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–µ–¥—É—â–∏–π –ø–µ—Ä–µ–¥–∞–Ω –ø–æ –∫—Ä—É–≥—É.\n"
        "–ó–∞–ø—É—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥: /start_round"
    )
    await callback.answer()


# =====================  –¢–ê–ô–ú–ê–£–¢ –°–ë–û–†–ê –û–¢–í–ï–¢–û–í  =====================

async def round_timeout_watchdog(chat_id: int, delay: int):
    await asyncio.sleep(delay)
    game = GAMES.get(chat_id)
    if not game or game.phase != "collect":
        return
    if not game.answers:
        await router.bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ, –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Ç. –ó–∞–ø—É—Å—Ç–∏ /start_round –µ—â—ë —Ä–∞–∑.")
        game.phase = "lobby"
        return
    await router.bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –ü–æ–∫–∞–∑—ã–≤–∞—é, —á—Ç–æ —É—Å–ø–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å‚Ä¶")
    await show_answers_for_all_by_chat(chat_id)


# =====================  –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø  =====================

def register_game_handlers(dp):
    load_situations_cards()
    dp.include_router(router)
