from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
import json
import random
from game_utils import generate_image_from_situation

router = Router()

HAND_SIZE = 10

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä: chat_id ‚Üí —Å–æ—Å—Ç–æ—è–Ω–∏–µ
GAMES = {}  # { chat_id: { players: [ids], host_index: int, situation: str, hands: {user_id: [cards]}, answers: [(user_id, card)] } }

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
with open("cards.json", "r", encoding="utf-8") as f:
    ALL_CARDS = json.load(f)


def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="new_game"),
        InlineKeyboardButton("‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_game"),
        InlineKeyboardButton("üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥", callback_data="start_round"),
    ]])


@router.message(Command("new_game"))
async def cmd_new_game(message: Message):
    GAMES[message.chat.id] = {
        "players": [],
        "host_index": 0,
        "situation": None,
        "hands": {},
        "answers": []
    }
    await message.answer(
        "‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ò–≥—Ä–æ–∫–∏, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å.",
        reply_markup=main_menu_kb()
    )

@router.callback_query(F.data == "new_game")
async def cb_new_game(callback: CallbackQuery):
    GAMES[callback.message.chat.id] = {
        "players": [],
        "host_index": 0,
        "situation": None,
        "hands": {},
        "answers": []
    }
    await callback.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", show_alert=False)


@router.message(Command("join_game"))
async def cmd_join_game(message: Message):
    game = GAMES.get(message.chat.id)
    if not game:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É: /new_game")
    uid = message.from_user.id
    if uid not in game["players"]:
        game["players"].append(uid)
    await message.answer(
        f"‚ûï {message.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!",
        reply_markup=main_menu_kb()
    )

@router.callback_query(F.data == "join_game")
async def cb_join_game(callback: CallbackQuery):
    game = GAMES.get(callback.message.chat.id)
    if not game:
        return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É.", show_alert=True)
    uid = callback.from_user.id
    if uid not in game["players"]:
        game["players"].append(uid)
    await callback.answer(f"{callback.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!", show_alert=False)


@router.message(Command("start_round"))
async def cmd_start_round(message: Message):
    await _start_round_logic(message.bot, message.chat.id, message.from_user.id)

@router.callback_query(F.data == "start_round")
async def cb_start_round(callback: CallbackQuery):
    await callback.answer()
    await _start_round_logic(callback.bot, callback.message.chat.id, callback.from_user.id)


async def _start_round_logic(bot: Bot, chat_id: int, starter_id: int):
    game = GAMES.get(chat_id)
    if not game or not game["players"]:
        return await bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ /new_game –∏ /join_game")
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–µ–¥—É—â–µ–≥–æ –ø–æ –∫—Ä—É–≥—É
    host_index = game["host_index"] % len(game["players"])
    host_id = game["players"][host_index]
    game["host_index"] = host_index + 1
    game["answers"].clear()
    game["hands"].clear()
    # –í—ã–±–∏—Ä–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏—é
    sit = get_random_situation()
    game["situation"] = sit
    # –û–±—ä—è–≤–ª—è–µ–º –≤ —á–∞—Ç
    host_name = (await bot.get_chat_member(chat_id, host_id)).user.full_name
    await bot.send_message(
        chat_id,
        f"üé¨ –†–∞—É–Ω–¥! üëë –í–µ–¥—É—â–∏–π: {host_name}\n\nüé≤ –°–∏—Ç—É–∞—Ü–∏—è: {sit}"
    )
    # –†–∞–∑–¥–∞—ë–º –∫–∞—Ä—Ç—ã
    deck = ALL_CARDS.copy()
    random.shuffle(deck)
    for uid in game["players"]:
        if uid == host_id:
            continue
        hand = [deck.pop() for _ in range(HAND_SIZE)]
        game["hands"][uid] = hand
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=card, callback_data=f"ans:{i}")] 
            for i, card in enumerate(hand)
        ])
        try:
            await bot.send_message(uid, "–í–∞—à–∞ —Ä—É–∫–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=kb)
        except:
            pass  # –∏–≥—Ä–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –≤ –ª–∏—á–∫–µ

@router.callback_query(F.data.startswith("ans:"))
async def cb_answer(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    uid = callback.from_user.id
    game = GAMES.get(chat_id)
    if not game or uid == game["players"][(game["host_index"]-1) % len(game["players"])]:
        return await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å.", True)
    idx = int(callback.data.split(":",1)[1])
    hand = game["hands"].get(uid, [])
    if idx<0 or idx>=len(hand):
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ.", True)
    card = hand.pop(idx)
    game["answers"].append((uid, card))
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {card}")
    # –ö–æ–≥–¥–∞ –≤—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    expected = len(game["players"]) -1
    if len(game["answers"])>=expected:
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç
        text = "–û—Ç–≤–µ—Ç—ã:\n" + "\n".join(f"{i+1}. {c}" for i,(__,c) in enumerate(game["answers"]))
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=str(i+1), callback_data=f"pick:{i}")] 
            for i in range(len(game["answers"]))
        ])
        await bot.send_message(chat_id, text, reply_markup=kb)

@router.callback_query(F.data.startswith("pick:"))
async def cb_pick(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    game = GAMES.get(chat_id)
    host_id = game["players"][(game["host_index"]-1) % len(game["players"])]
    if callback.from_user.id != host_id:
        return await callback.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π.", True)
    idx = int(callback.data.split(":",1)[1])
    uid, card = game["answers"][idx]
    winner_name = (await callback.bot.get_chat_member(chat_id, uid)).user.full_name
    await callback.message.edit_text(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n–û—Ç–≤–µ—Ç: {card}")
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Ç—É–∞—Ü–∏–∏+–æ—Ç–≤–µ—Ç
    image_path = await generate_image_from_situation(f"{game['situation']} ____ {card}", f"round_{chat_id}")
    if image_path:
        await callback.bot.send_photo(chat_id, photo=InlineKeyboardButton(""), # placeholder
                                      caption=f"–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ –æ—Ç–≤–µ—Ç—É '{card}'")
    # –û—á–∏—Å—Ç–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    game["situation"]=None
    game["hands"].clear()
    game["answers"].clear()
    await callback.bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ ¬´–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥¬ª –∏–ª–∏ /start_round", reply_markup=main_menu_kb())
