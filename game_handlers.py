# –í —Ñ–∞–π–ª–∞—Ö game_handlers.py –∏ admin_handlers.py
from game_utils import decks, gen

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from game_state import game_states
from game_utils import decks, gen # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–∞ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞

router = Router()

# --- –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ì–†–û–ô ---

@router.message(Command("newgame"), F.chat.type.in_({"group", "supergroup"}))
async def cmd_new_game(message: Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ —á–∞—Ç–µ."""
    chat_id = message.chat.id
    if chat_id in game_states and game_states[chat_id].get("is_active"):
        await message.answer("–ò–≥—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é: /endgame")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    game_states[chat_id] = {
        "is_active": True,
        "host_id": message.from_user.id,
        "host_name": message.from_user.first_name,
        "players": {},
        "main_deck": decks.get_new_shuffled_answers_deck(),
        "current_situation": None,
        "played_in_round": set(),
    }
    
    await message.answer(
        f"üéâ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–µ–¥—É—â–∏–π: {message.from_user.first_name}.\n"
        f"–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –∏–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å /join"
    )

@router.message(Command("join"), F.chat.type.in_({"group", "supergroup"}))
async def cmd_join_game(message: Message, bot: Bot):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É."""
    chat_id = message.chat.id
    user = message.from_user

    if chat_id not in game_states or not game_states[chat_id].get("is_active"):
        await message.answer("–ò–≥—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–µ–¥—É—â–µ–≥–æ –Ω–∞—á–∞—Ç—å –µ–µ: /newgame")
        return

    if user.id in game_states[chat_id]["players"]:
        await message.answer(f"{user.first_name}, –≤—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
        return
        
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    game_states[chat_id]["players"][user.id] = {
        "name": user.first_name,
        "hand": [],
        "score": 0,
    }

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É –≤ –ª–∏—á–∫—É
    try:
        await bot.send_message(user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
        await message.answer(f"–ò–≥—Ä–æ–∫ {user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")
    except TelegramBadRequest:
        await message.answer(
            f"‚ö†Ô∏è {user.first_name}, –Ω–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º –≤ –ª–∏—á–∫—É. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π (@{bot.id}) –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /join."
        )
        del game_states[chat_id]["players"][user.id] # –£–¥–∞–ª—è–µ–º, —Ç.–∫. –Ω–µ —Å–º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—ã

@router.message(Command("round"), F.chat.type.in_({"group", "supergroup"}))
async def cmd_new_round(message: Message, bot: Bot):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥."""
    chat_id = message.chat.id
    user_id = message.from_user.id

    if chat_id not in game_states or not game_states[chat_id].get("is_active"):
        return

    if user_id != game_states[chat_id]["host_id"]:
        await message.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥.")
        return

    state = game_states[chat_id]
    state["played_in_round"] = set() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—ã–≥—Ä–∞–≤—à–∏—Ö –≤ —Ä–∞—É–Ω–¥–µ
    
    # –†–∞–∑–¥–∞—á–∞/–¥–æ–±–æ—Ä –∫–∞—Ä—Ç
    for player_id, player_data in state["players"].items():
        while len(player_data["hand"]) < 10:
            if not state["main_deck"]:
                await message.answer("–í –∫–æ–ª–æ–¥–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–∞—Ä—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
                # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
                return
            card = state["main_deck"].pop()
            player_data["hand"].append(card)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –æ–±—â–∏–π —á–∞—Ç
    situation = decks.get_random_situation()
    state["current_situation"] = situation
    await message.answer(f"‚ÄºÔ∏è –í–ù–ò–ú–ê–ù–ò–ï, –°–ò–¢–£–ê–¶–ò–Ø:\n\n`{situation}`", parse_mode="Markdown")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç –≤ –ª–∏—á–∫—É
    for player_id, player_data in state["players"].items():
        buttons = [
            [InlineKeyboardButton(text=card, callback_data=f"play_answer_{chat_id}_{card}")]
            for card in player_data["hand"]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        try:
            await bot.send_message(
                player_id,
                "–í–∞—à–∏ –∫–∞—Ä—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é:",
                reply_markup=keyboard
            )
        except TelegramBadRequest:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            continue

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–ñ–ê–¢–ò–ô –ù–ê –ö–ù–û–ü–ö–ò ---

@router.callback_query(F.data.startswith("play_answer_"))
async def handle_play_answer(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–º –≤ –ª–∏—á–∫–µ."""
    _, chat_id_str, answer = callback.data.split("_", 2)
    chat_id = int(chat_id_str)
    user = callback.from_user

    state = game_states.get(chat_id)
    if not state or not state["is_active"] or user.id not in state["players"]:
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.", show_alert=True)
        return
        
    if user.id in state["played_in_round"]:
        await callback.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º –≤ –æ–±—â–∏–π —á–∞—Ç
    button = InlineKeyboardButton(text=answer, callback_data=f"select_winner_{chat_id}_{user.id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])
    await bot.send_message(chat_id, f"–û—Ç–≤–µ—Ç –æ—Ç –∏–≥—Ä–æ–∫–∞ {user.first_name}:", reply_markup=keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state["players"][user.id]["hand"].remove(answer)
    state["played_in_round"].add(user.id)
    
    await callback.message.edit_text("–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —á–∞—Ç!")
    await callback.answer()


@router.callback_query(F.data.startswith("select_winner_"))
async def handle_select_winner(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤–µ–¥—É—â–∏–º –≤ –æ–±—â–µ–º —á–∞—Ç–µ."""
    _, chat_id_str, winner_id_str = callback.data.split("_", 2)
    chat_id = int(chat_id_str)
    winner_id = int(winner_id_str)
    host = callback.from_user
    
    state = game_states.get(chat_id)
    if not state or not state["is_active"]:
        return await callback.answer()

    if host.id != state["host_id"]:
        return await callback.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!", show_alert=True)

    if not state.get("current_situation"):
        return await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è.", show_alert=True)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –µ–≥–æ –æ—Ç–≤–µ—Ç
    winning_answer = callback.message.reply_markup.inline_keyboard[0][0].text
    winner_name = state["players"][winner_id]["name"]
    state["players"][winner_id]["score"] += 1
    
    await callback.message.edit_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç {winner_name}!")
    
    await bot.send_message(chat_id, f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞ - {winner_name} —Å –æ—Ç–≤–µ—Ç–æ–º: \"{winning_answer}\"!")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await bot.send_message(chat_id, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–º...")
    await gen.generate_and_send_image(bot, chat_id, state["current_situation"], winning_answer)

    # –î–æ–±–æ—Ä –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º–∏
    for player_id in state["players"]:
        if state["main_deck"]:
            card = state["main_deck"].pop()
            state["players"][player_id]["hand"].append(card)
            try:
                await bot.send_message(player_id, f"–í—ã –¥–æ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: `{card}`", parse_mode="Markdown")
            except TelegramBadRequest:
                continue
    
    await bot.send_message(chat_id, "–†–∞—É–Ω–¥ –æ–∫–æ–Ω—á–µ–Ω! –í—Å–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–±—Ä–∞–ª–∏ –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ. –í–µ–¥—É—â–∏–π, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥: /round")
    state["current_situation"] = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏—é
