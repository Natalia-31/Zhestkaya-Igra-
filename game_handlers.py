async def _start_round_logic(bot: Bot, chat_id: int, starter_id: int):
    game = GAMES.get(chat_id)
    if not game or not game["players"]:
        return await bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ /new_game –∏ /join_game", reply_markup=main_menu_kb())

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    players = game["players"]
    mentions = []
    for uid in players:
        member = await bot.get_chat_member(chat_id, uid)
        mentions.append(f"‚Ä¢ {member.user.full_name}")
    await bot.send_message(
        chat_id,
        f"üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å ({len(players)}):\n" + "\n".join(mentions)
    )

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–µ–¥—É—â–µ–≥–æ
    idx = game["host_index"] % len(players)
    host_id = players[idx]
    game["host_index"] += 1
    game["answers"].clear()
    game["hands"].clear()

    # –í—ã–¥–∞—ë–º —Å–∏—Ç—É–∞—Ü–∏—é
    situation = get_random_situation()
    game["situation"] = situation
    host_name = (await bot.get_chat_member(chat_id, host_id)).user.full_name
    await bot.send_message(chat_id, f"üé¨ –†–∞—É–Ω–¥! üëë –í–µ–¥—É—â–∏–π: {host_name}\n\nüé≤ {situation}")

    # –†–∞–∑–¥–∞—ë–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    deck = ALL_CARDS.copy(); random.shuffle(deck)
    for uid in players:
        if uid == host_id:
            continue
        hand = [deck.pop() for _ in range(HAND_SIZE)]
        game["hands"][uid] = hand
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=card, callback_data=f"ans:{i}")]
            for i, card in enumerate(hand)
        ])
        try:
            await bot.send_message(uid, f"üé¥ –í–∞—à–∞ —Ä—É–∫–∞ ({HAND_SIZE} –∫–∞—Ä—Ç) ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É-–æ—Ç–≤–µ—Ç:", reply_markup=kb)
        except:
            pass
