from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message
from game_utils import send_random_situation_with_image, get_random_situation

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞."""
    await message.answer(
        "üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ñ–µ—Å—Ç–∫—É—é –ò–≥—Ä—É!**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ `/start_round` - –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥ —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º\n"
        "‚Ä¢ `/situation` - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é\n"
        "‚Ä¢ `/test_image` - —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        parse_mode="Markdown"
    )

@router.message(Command("start_round"))
async def start_game_round(message: Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        await message.answer(
            "üéÆ **–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –ñ–µ—Å—Ç–∫–æ–π –ò–≥—Ä—ã!**\n\n"
            "–°–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É –≤–∞–º —Å–∏—Ç—É–∞—Ü–∏—é –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫ –Ω–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...",
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Ç—É–∞—Ü–∏—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        success = await send_random_situation_with_image(
            message.bot, 
            message.chat.id
        )
        
        if success:
            await message.answer(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é!",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–∞—É–Ω–¥–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—É–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

@router.message(Command("situation"))
async def get_situation_only(message: Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–∏—Ç—É–∞—Ü–∏–∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    situation = get_random_situation()
    await message.answer(
        f"üé≤ **–°–ª—É—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:**\n\n_{situation}_",
        parse_mode="Markdown"
    )

@router.message(Command("test_image"))
async def test_image_generation(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    await message.answer("üé® –¢–µ—Å—Ç–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    success = await send_random_situation_with_image(
        message.bot,
        message.chat.id
    )
    
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API.")
