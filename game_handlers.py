from typing import Dict, Any
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest

from game_utils import decks, generate_card_content

router = Router()
SESSIONS: Dict[int, Dict[str, Any]] = {}

def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="ui_new_game")],
        [InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="ui_join_game")],
        [InlineKeyboardButton(text="üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥", callback_data="ui_start_round")],
    ])

@router.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer("–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu())

@router.message(Command("new_game"))
async def cmd_new_game(m: Message):
    await _create_game(m.chat.id, m.from_user.id, m.from_user.full_name)
    await m.answer("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())

@router.message(Command("join_game"))
async def cmd_join_game(m: Message, bot: Bot):
    await _join_flow(m.chat.id, m.from_user.id, m.from_user.full_name, bot, feedback=m)

@router.message(Command("start_round"))
async def cmd_start_round(m: Message):
    await _start_round(m.bot, m.chat.id)

@router.callback_query(F.data == "ui_new_game")
async def ui_new_game(cb: CallbackQuery):
    await _create_game(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name)
    await cb.answer()
    try:
        await cb.message.edit_text("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())
    except TelegramBadRequest:
        pass

@router.callback_query(F.data == "ui_join_game")
async def ui_join_game(cb: CallbackQuery, bot: Bot):
    await _join_flow(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name, bot, feedback=cb.message)
    await cb.answer()

@router.callback_query(F.data == "ui_start_round")
async def ui_start_round(cb: CallbackQuery):
    await cb.answer()
    await _start_round(cb.bot, cb.message.chat.id)

async def _create_game(chat_id: int, host_id: int, host_name: str):
    SESSIONS[chat_id] = {
        "players": [],
        "hands": {},
        "answers": {},
        "host_idx": -1,
        "current_situation": None,
        "main_deck": [],
        "used_answers": []
    }

async def _join_flow(chat_id: int, user_id: int, user_name: str, bot: Bot, feedback: Message):
    st = SESSIONS.get(chat_id)
    if not st:
        await feedback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª.", reply_markup=main_menu())
        return
    if user_id not in [p["user_id"] for p in st["players"]]:
        try:
            await bot.send_message(user_id, "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
        except TelegramBadRequest as e:
            await feedback.answer(f"‚ö†Ô∏è {user_name}, –Ω–∞–∂–º–∏—Ç–µ Start —É –±–æ—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ. {e}")
            return
        st["players"].append({"user_id": user_id, "username": user_name})
    await feedback.answer(f"‚úÖ –ò–≥—Ä–æ–∫–æ–≤: {len(st['players'])}", reply_markup=main_menu())

async def _start_round(bot: Bot, chat_id: int):
    st = SESSIONS.get(chat_id)
    if not st or len(st["players"]) < 2:
        await bot.send_message(chat_id, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.", reply_markup=main_menu())
        return

    st["answers"].clear()
    st["host_idx"] = (st["host_idx"] + 1) % len(st["players"])
    host = st["players"][st["host_idx"]]
    host_id = host["user_id"]

    st["current_situation"] = decks.get_random_situation()
    await bot.send_message(
        chat_id,
        f"üé¨ –†–∞—É–Ω–¥! üëë –í–µ–¥—É—â–∏–π: {host['username']}\n\nüé≤ {st['current_situation']}"
    )

    # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: —Ä–∞–∑–¥–∞—ë–º –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ—Ç —Ä—É–∫ (–ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥)
    if not st["hands"]:
        full_deck = decks.get_new_shuffled_answers_deck()
        st["main_deck"] = [c for c in full_deck if c not in st["used_answers"]]
        if not st["main_deck"]:
            await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ.")
            return

        for p in st["players"]:
            uid = p["user_id"]
            if uid == host_id:
                continue
            hand = []
            while len(hand) < 10 and st["main_deck"]:
                hand.append(st["main_deck"].pop())
            st["hands"][uid] = hand

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞–º
    for p in st["players"]:
        uid = p["user_id"]
        if uid == host_id:
            continue
        hand = st["hands"].get(uid, [])
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=card, callback_data=f"ans:{chat_id}:{uid}:{i}")]
            for i, card in enumerate(hand)
        ])
        try:
            msg = f"üé≤ –°–∏—Ç—É–∞—Ü–∏—è: {st['current_situation']}\n\nüé¥ –í–∞—à–∞ —Ä—É–∫–∞ ({len(hand)}). –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:"
            await bot.send_message(uid, msg, reply_markup=kb)
        except TelegramBadRequest:
            await bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É {p['username']}.")

@router.callback_query(F.data.startswith("ans:"))
async def on_answer(cb: CallbackQuery):
    _, group_chat_id_str, uid_str, idx_str = cb.data.split(":")
    group_chat_id, uid, idx = int(group_chat_id_str), int(uid_str), int(idx_str)
    st = SESSIONS.get(group_chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    host_id = st["players"][st["host_idx"]]["user_id"]
    if cb.from_user.id != uid or uid == host_id:
        await cb.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)
        return

    hand = st["hands"].get(uid, [])
    if idx < 0 or idx >= len(hand):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–ï —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏, —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä
    chosen_card = hand[idx]
    st["answers"][uid] = chosen_card
    await cb.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {chosen_card}")

    need = len(st["players"]) - 1
    if len(st["answers"]) >= need:
        ordered = [(u, st["answers"][u]) for u in st["answers"]]
        lines, buttons = [], []
        for i, (u2, ans) in enumerate(ordered, 1):
            name = next(p["username"] for p in st["players"] if p["user_id"] == u2)
            lines.append(f"{i}. {name} ‚Äî {ans}")
            buttons.append([InlineKeyboardButton(text=str(i), callback_data=f"pick:{group_chat_id}:{i-1}")])
        await cb.bot.send_message(group_chat_id, "–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(lines),
                                  reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(F.data.startswith("pick:"))
async def on_pick(cb: CallbackQuery):
    _, group_chat_id_str, idx_str = cb.data.split(":")
    group_chat_id, idx = int(group_chat_id_str), int(idx_str)
    st = SESSIONS.get(group_chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    host_id = st["players"][st["host_idx"]]["user_id"]
    if cb.from_user.id != host_id:
        await cb.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å.", show_alert=True)
        return

    ordered = [(u, st["answers"][u]) for u in st["answers"]]
    if idx < 0 or idx >= len(ordered):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å.", show_alert=True)
        return

    win_uid, win_ans = ordered[idx]
    win_name = next(p["username"] for p in st["players"] if p["user_id"] == win_uid)

    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        pass

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    try:
        image_url, joke_text = await generate_card_content(st["current_situation"], win_ans)
        
        result_text = (
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {win_name}\n\n"
            f"üìù –°–∏—Ç—É–∞—Ü–∏—è: {st['current_situation']}\n"
            f"üí¨ –û—Ç–≤–µ—Ç: {win_ans}\n\n"
            f"üòÇ {joke_text}"
        )
        
        if image_url:
            await cb.bot.send_photo(group_chat_id, image_url, caption=result_text)
        else:
            await cb.message.edit_text(result_text)
            
    except Exception as e:
        await cb.message.edit_text(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {win_name}\n–û—Ç–≤–µ—Ç: {win_ans}\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: {e}")

    # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–∏–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã –∏ –¥–æ–±–∏—Ä–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –Ω–æ–≤–æ–π
    for user_id, discarded_card in st["answers"].items():
        # –£–¥–∞–ª—è–µ–º —Å–∫–∏–Ω—É—Ç—É—é –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
        if user_id in st["hands"] and discarded_card in st["hands"][user_id]:
            st["hands"][user_id].remove(discarded_card)
            st["used_answers"].append(discarded_card)
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–æ–ª–æ–¥—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not st["main_deck"]:
            full = decks.get_new_shuffled_answers_deck()
            used = st["used_answers"]
            in_hands = [c for hand in st["hands"].values() for c in hand]
            st["main_deck"] = [c for c in full if c not in used and c not in in_hands]
        
        # –î–æ–±–∏—Ä–∞–µ–º –æ–¥–Ω—É –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
        if st["main_deck"]:
            new_card = st["main_deck"].pop()
            st["hands"][user_id].append(new_card)
            
            try:
                await cb.bot.send_message(
                    user_id,
                    f"üé¥ –ó–∞–º–µ–Ω–∏–ª–∏ –∫–∞—Ä—Ç—É: **{new_card}**\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {len(st['hands'][user_id])} –∫–∞—Ä—Ç.",
                    parse_mode="Markdown"
                )
            except TelegramBadRequest:
                pass

    await cb.bot.send_message(group_chat_id, "–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu())
