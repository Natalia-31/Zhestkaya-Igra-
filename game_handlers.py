# handlers/game_handlers.py ‚Äî –∏–≥—Ä–æ–≤–æ–π —Ä–æ—É—Ç–µ—Ä –∏ –∫–Ω–æ–ø–∫–∏

from typing import Dict, Any
from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

# –í–ê–ñ–ù–û: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ game_utils, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞—Ç—å —Ü–∏–∫–ª
from game_utils import decks, gen  # –∫–æ–ª–æ–¥—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä –ø–æ —á–∞—Ç—É
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ /newgame
game_states: Dict[int, Dict[str, Any]] = {}

router = Router()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò ==========

def main_menu_kb(is_host: bool) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üÜï –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="ui_newgame")],
        [InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="ui_join")],
    ]
    if is_host:
        buttons.append([InlineKeyboardButton(text="üé¨ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥", callback_data="ui_round")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ========== –ö–û–ú–ê–ù–î–´ ==========

@router.message(Command("start"))
async def cmd_start(message: Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏; –≤–µ–¥—É—â–∏–º —Å—Ç–∞–Ω–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–æ—Ç–æ–º –Ω–∞–∂–º–µ—Ç "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
    is_host = False
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ñ–µ—Å—Ç–∫—É—é –ò–≥—Ä—É!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb(is_host)
    )

@router.message(Command("newgame"))
async def cmd_newgame(message: Message):
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
    await _create_new_game(message, host_id=message.from_user.id, host_name=message.from_user.first_name)

@router.message(Command("join"))
async def cmd_join(message: Message, bot: Bot):
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
    await _join_flow(message.chat.id, message.from_user.id, message.from_user.first_name, bot, feedback_message=message)

@router.message(Command("round"))
async def cmd_round(message: Message, bot: Bot):
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ä–∞—É–Ω–¥–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
    await _start_round_flow(message.chat.id, message.from_user.id, bot, message)

# ========== –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ò –ò –ú–ï–ù–Æ ==========

@router.callback_query(F.data == "ui_newgame")
async def ui_newgame(cb: CallbackQuery):
    await _create_new_game(cb.message, host_id=cb.from_user.id, host_name=cb.from_user.first_name)
    await cb.answer()

@router.callback_query(F.data == "ui_join")
async def ui_join(cb: CallbackQuery, bot: Bot):
    await _join_flow(cb.message.chat.id, cb.from_user.id, cb.from_user.first_name, bot, feedback_message=cb.message)
    await cb.answer()

@router.callback_query(F.data == "ui_round")
async def ui_round(cb: CallbackQuery, bot: Bot):
    await _start_round_flow(cb.message.chat.id, cb.from_user.id, bot, cb.message)
    await cb.answer()

# ========== –õ–û–ì–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø/–ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø/–†–ê–£–ù–î–ê ==========

async def _create_new_game(anchor_message: Message, host_id: int, host_name: str):
    chat_id = anchor_message.chat.id
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    game_states[chat_id] = {
        "is_active": True,
        "host_id": host_id,
        "host_name": host_name,
        "players": {},           # {user_id: {"name": str, "hand": list[str], "score": int}}
        "main_deck": decks.get_new_shuffled_answers_deck(),
        "current_situation": None,
        "played_in_round": set(),  # user_id, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–≤–µ—Ç
    }
    await anchor_message.answer(
        f"üéâ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –í–µ–¥—É—â–∏–π: {host_name}\n–ù–∞–∂–º–∏—Ç–µ ‚Äú–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è‚Äù, –∑–∞—Ç–µ–º –≤–µ–¥—É—â–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—É–Ω–¥.",
        reply_markup=main_menu_kb(is_host=True)
    )

async def _join_flow(chat_id: int, user_id: int, user_name: str, bot: Bot, feedback_message: Message):
    state = game_states.get(chat_id)
    if not state or not state.get("is_active"):
        await feedback_message.answer("–ò–≥—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ‚Äú–ù–∞—á–∞—Ç—å –∏–≥—Ä—É‚Äù.")
        return

    if user_id in state["players"]:
        await feedback_message.answer(f"{user_name}, –≤—ã —É–∂–µ –≤ –∏–≥—Ä–µ.")
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–∞–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç—ã
    try:
        await bot.send_message(user_id, "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
    except TelegramBadRequest:
        await feedback_message.answer(
            f"‚ö†Ô∏è {user_name}, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –±–æ—Ç—É –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É (–Ω–∞–∂–º–∏—Ç–µ Start —É –±–æ—Ç–∞), –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è‚Äù."
        )
        return

    state["players"][user_id] = {"name": user_name, "hand": [], "score": 0}
    await feedback_message.answer(f"‚úÖ {user_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")

async def _start_round_flow(chat_id: int, actor_id: int, bot: Bot, feedback_message: Message):
    state = game_states.get(chat_id)
    if not state or not state.get("is_active"):
        await feedback_message.answer("–ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ‚Äú–ù–∞—á–∞—Ç—å –∏–≥—Ä—É‚Äù.")
        return

    if actor_id != state["host_id"]:
        await feedback_message.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥.")
        return

    # –†–∞–∑–¥–∞—á–∞/–¥–æ–±–æ—Ä –¥–æ 10 –∫–∞—Ä—Ç –∫–∞–∂–¥–æ–º—É
    state["played_in_round"] = set()
    for pid, pdata in state["players"].items():
        while len(pdata["hand"]) < 10:
            if not state["main_deck"]:
                state["main_deck"] = decks.get_new_shuffled_answers_deck()
            pdata["hand"].append(state["main_deck"].pop())

    # –ü—É–±–ª–∏–∫—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é
    situation = decks.get_random_situation()
    state["current_situation"] = situation
    await feedback_message.answer(f"‚ÄºÔ∏è –°–∏—Ç—É–∞—Ü–∏—è:\n\n`{situation}`", parse_mode="Markdown")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –≤ –ª–∏—á–∫—É –µ–≥–æ 10 –∫–∞—Ä—Ç –∫–Ω–æ–ø–∫–∞–º–∏
    for pid, pdata in state["players"].items():
        # –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–≤ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∑–∞–ª–æ –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã)
        buttons = [
            [InlineKeyboardButton(text=card, callback_data=f"play_answer|{chat_id}|{card[:60]}")]
            for card in pdata["hand"]
        ]
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        try:
            await bot.send_message(pid, "–í–∞—à–∏ –∫–∞—Ä—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é:", reply_markup=kb)
        except TelegramBadRequest:
            # –ï—Å–ª–∏ –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É –Ω–µ–ª—å–∑—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–∫–∞
            continue

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –•–û–î–ê –ò–ì–†–û–ö–ê (–õ–ò–ß–ö–ê) ==========

@router.callback_query(F.data.startswith("play_answer|"))
async def handle_play_answer(cb: CallbackQuery, bot: Bot):
    # –§–æ—Ä–º–∞—Ç: play_answer|<chat_id>|<answer_prefix>
    try:
        _, chat_id_str, answer_prefix = cb.data.split("|", 2)
        chat_id = int(chat_id_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    state = game_states.get(chat_id)
    if not state or not state.get("is_active"):
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
        return

    user_id = cb.from_user.id
    if user_id not in state["players"]:
        await cb.answer("–í—ã –Ω–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.", show_alert=True)
        return

    if user_id in state["played_in_round"]:
        await cb.answer("–•–æ–¥ —É–∂–µ —Å–¥–µ–ª–∞–Ω –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", show_alert=True)
        return

    # –ù–∞–π–¥–µ–º —Ç–æ—á–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É (–≤–¥—Ä—É–≥ –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã)
    hand = state["players"][user_id]["hand"]
    # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–æ–∫–∏
    answer_full = next((c for c in hand if c.startswith(answer_prefix)), None)
    if not answer_full:
        # –ù–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –±–µ—Ä–µ–º —Ç–æ—á–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∫–∞–∫ –æ—Ç–≤–µ—Ç
        answer_full = answer_prefix

    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç –∫–∞—Ä—Ç–æ—á–∫—É-–æ—Ç–≤–µ—Ç –∫–∞–∫ –∫–Ω–æ–ø–∫—É, –ñ–ú–ï–¢ –¢–û–õ–¨–ö–û –í–ï–î–£–©–ò–ô
    btn = InlineKeyboardButton(
        text=answer_full,
        callback_data=f"select_winner|{chat_id}|{user_id}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[[btn]])
    await bot.send_message(chat_id, f"–û—Ç–≤–µ—Ç –æ—Ç –∏–≥—Ä–æ–∫–∞ {cb.from_user.first_name}:", reply_markup=kb)

    # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –∏ –æ—Ç–º–µ—á–∞–µ–º —Ö–æ–¥
    if answer_full in hand:
        hand.remove(answer_full)
    state["played_in_round"].add(user_id)

    # –§–∏–∫—Å–∏—Ä—É–µ–º –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫—É
    try:
        await cb.message.edit_text("–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —á–∞—Ç!")
    except TelegramBadRequest:
        pass
    await cb.answer()

# ========== –í–´–ë–û–† –ü–û–ë–ï–î–ò–¢–ï–õ–Ø –í–ï–î–£–©–ò–ú ==========

@router.callback_query(F.data.startswith("select_winner|"))
async def handle_select_winner(cb: CallbackQuery, bot: Bot):
    # –§–æ—Ä–º–∞—Ç: select_winner|<chat_id>|<winner_user_id>
    try:
        _, chat_id_str, winner_id_str = cb.data.split("|", 2)
        chat_id = int(chat_id_str)
        winner_id = int(winner_id_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    state = game_states.get(chat_id)
    if not state or not state.get("is_active"):
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
        return

    if cb.from_user.id != state["host_id"]:
        await cb.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!", show_alert=True)
        return

    situation = state.get("current_situation")
    if not situation:
        await cb.answer("–°–∏—Ç—É–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞.", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä—è–º–æ —Å –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ–µ —Ç–µ–∫—Å—Ç = –æ—Ç–≤–µ—Ç)
    try:
        winning_answer = cb.message.reply_markup.inline_keyboard.text
    except Exception:
        winning_answer = "–û—Ç–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    winner_name = state["players"].get(winner_id, {}).get("name", "–ò–≥—Ä–æ–∫")
    state["players"].setdefault(winner_id, {"name": winner_name, "hand": [], "score": 0})
    state["players"][winner_id]["score"] += 1

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –Ω–∞–∂–∞—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        pass

    await cb.answer(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}")
    await bot.send_message(chat_id, f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞ ‚Äî {winner_name}!\n–ï–≥–æ –æ—Ç–≤–µ—Ç: ‚Äú{winning_answer}‚Äù")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—É
    await bot.send_message(chat_id, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø–æ–±–µ–¥–∏–≤—à–µ–º—É –æ—Ç–≤–µ—Ç—É‚Ä¶")
    await gen.send_illustration(bot, chat_id, situation, winning_answer)

    # –î–æ–±–æ—Ä –ø–æ 1 –∫–∞—Ä—Ç–µ –≤ –ª–∏—á–∫—É
    for pid, pdata in state["players"].items():
        if "hand" not in pdata:
            pdata["hand"] = []
        if not state["main_deck"]:
            state["main_deck"] = decks.get_new_shuffled_answers_deck()
        new_card = state["main_deck"].pop()
        pdata["hand"].append(new_card)
        try:
            await bot.send_message(pid, f"–í—ã –¥–æ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: `{new_card}`", parse_mode="Markdown")
        except TelegramBadRequest:
            continue

    # –ì–æ—Ç–æ–≤–æ, —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω
    state["current_situation"] = None
    await bot.send_message(chat_id, "–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–µ–¥—É—â–∏–π, –Ω–∞—á–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∫–Ω–æ–ø–∫–æ–π ‚Äú–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥‚Äù.")
