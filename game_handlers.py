from __future__ import annotations

import asyncio
import json
import random
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Optional

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ ¬´—Å–∏—Ç—É–∞—Ü–∏—è + –æ—Ç–≤–µ—Ç¬ª
from PIL import Image, ImageDraw, ImageFont


# =====================  –ù–ê–°–¢–†–û–ô–ö–ò  =====================

MIN_PLAYERS = 3
HAND_SIZE = 10
ROUND_TIMEOUT = 120  # —Å–µ–∫. –Ω–∞ —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤

ASSETS_DIR = Path(".")
SITUATIONS_PATH = ASSETS_DIR / "situations.json"   # {"situations":[...]}
CARDS_PATH = ASSETS_DIR / "cards.json"             # {"cards":[...]}


# =====================  –†–û–£–¢–ï–†  =====================

router = Router()


# =====================  –ú–û–î–ï–õ–ò  =====================

@dataclass
class Answer:
    user_id: int
    text: str


@dataclass
class GameState:
    chat_id: int
    players: List[int] = field(default_factory=list)
    host_index: int = 0
    phase: str = "lobby"  # lobby | collect | choose | result
    round_no: int = 0
    current_situation: Optional[str] = None
    answers: List[Answer] = field(default_factory=list)
    hands: Dict[int, List[str]] = field(default_factory=dict)  # user_id -> hand
    deck: List[str] = field(default_factory=list)

    def current_host(self) -> Optional[int]:
        if not self.players:
            return None
        return self.players[self.host_index % len(self.players)]

    def next_host(self):
        if self.players:
            self.host_index = (self.host_index + 1) % len(self.players)


# =====================  –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï  =====================

GAMES: Dict[int, GameState] = {}  # chat_id -> GameState
ALL_SITUATIONS: List[str] = []
ALL_CARDS: List[str] = []


# =====================  –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–¢–ï–ù–¢–ê  =====================

def load_situations_cards():
    """–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –∫–∞—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å; –∏–Ω–∞—á–µ ‚Äî –ø—Ä–∏–º–µ—Ä—ã."""
    global ALL_SITUATIONS, ALL_CARDS

    # –°–∏—Ç—É–∞—Ü–∏–∏
    if SITUATIONS_PATH.exists():
        try:
            data = json.loads(SITUATIONS_PATH.read_text(encoding="utf-8"))
            ALL_SITUATIONS = list(data.get("situations", []))
        except Exception:
            ALL_SITUATIONS = []
    if not ALL_SITUATIONS:
        ALL_SITUATIONS = [
            "–£—Ç—Ä–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞. –¢—ã –∑–∞—Ö–æ–¥–∏—à—å –≤ –æ—Ñ–∏—Å –∏ –≤–∏–¥–∏—à—å —Ç–æ–ª—å–∫–æ...",
            "–í –ø—É—Å—Ç—ã–Ω–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–∞–±–ª–∏—á–∫–∞ —Å –Ω–∞–¥–ø–∏—Å—å—é...",
            "–¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –≤ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–º –º–µ—Å—Ç–µ, –Ω–æ —Ä—è–¥–æ–º –ª–µ–∂–∏—Ç...",
            "–í–µ–¥—É—â–∏–π –æ–±—ä—è–≤–ª—è–µ—Ç: ¬´–¢–µ–º–∞ –¥–Ω—è ‚Äî ...¬ª",
        ]

    # –ö–∞—Ä—Ç—ã-–æ—Ç–≤–µ—Ç—ã
    if CARDS_PATH.exists():
        try:
            data = json.loads(CARDS_PATH.read_text(encoding="utf-8"))
            ALL_CARDS = list(data.get("cards", []))
        except Exception:
            ALL_CARDS = []
    if not ALL_CARDS:
        ALL_CARDS = [
            "–∫–æ—Ñ–µ –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∞",
            "–∫–æ—Ç –≤ –∫–æ—Ä–æ–±–∫–µ",
            "–º–æ–ª—á–∞—â–∏–π —á–∞—Ç",
            "—Å–ª—É—á–∞–π–Ω—ã–π —É–≤–æ–ª–µ–Ω–Ω—ã–π",
            "—è—Ä–∫–æ–µ —Å–æ–ª–Ω—Ü–µ –≤ –≥–ª–∞–∑–∞",
            "—Å—Ç–∏–∫–µ—Ä—ã –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "—á—å—è-—Ç–æ –Ω–µ–ª–æ–≤–∫–∞—è —à—É—Ç–∫–∞",
            "–∏–¥–µ–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
            "–≤–µ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞",
            "–ø–∏—Ü—Ü–∞ –±–µ–∑ –∞–Ω–∞–Ω–∞—Å–æ–≤",
            "–º–∞–≥–∏—è Ctrl+Z",
        ]


# =====================  –£–¢–ò–õ–ò–¢–´  =====================

def ensure_game(chat_id: int) -> GameState:
    game = GAMES.get(chat_id)
    if not game:
        game = GameState(chat_id=chat_id)
        GAMES[chat_id] = game
    return game


def deal_to_full_hand(game: GameState, user_id: int):
    """–î–æ–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫—É –¥–æ HAND_SIZE –∏–∑ –∫–æ–ª–æ–¥—ã; –µ—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ ‚Äî –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∞—Ç—å."""
    hand = game.hands.setdefault(user_id, [])
    while len(hand) < HAND_SIZE:
        if not game.deck:
            game.deck = ALL_CARDS.copy()
            random.shuffle(game.deck)
        hand.append(game.deck.pop())


def make_answers_keyboard(hand: List[str]) -> InlineKeyboardMarkup:
    rows = []
    for idx, card in enumerate(hand):
        title = card if len(card) <= 35 else card[:32] + "‚Ä¶"
        rows.append([InlineKeyboardButton(text=f"üëâ {title}", callback_data=f"ans:{idx}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def make_choices_keyboard(answers: List[Answer]) -> InlineKeyboardMarkup:
    rows = []
    for idx, _ in enumerate(answers, 1):
        rows.append([InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å #{idx}", callback_data=f"pick:{idx-1}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def answers_summary(answers: List[Answer]) -> str:
