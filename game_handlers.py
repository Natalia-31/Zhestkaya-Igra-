from typing import Dict, Any, List

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest

from game_utils import decks, gen, video_gen  # –î–æ–±–∞–≤–ª–µ–Ω video_gen –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ

router = Router()

SESSIONS: Dict[int, Dict[str, Any]] = {}


def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="ui_new_game")],
            [InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="ui_new_game")],
            [InlineKeyboardButton(text="üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥", callback_data="ui_new_game")],
        ]
    )


@router.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer("–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu())


@router.message(Command("new_game"))
async def cmd_new_game(m: Message):
    await _create_game(m.chat.id, m.from_user.id, m.from_user.full_name)
    await m.answer("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())


@router.message(Command("join_game"))
async def cmd_join_game(m: Message, bot: Bot):
    await _join_flow(m.chat.id, m.from_user.id, m.from_user.full_name, bot, feedback=m)


@router.message(Command("start_round"))
async def cmd_start_round(m: Message):
    await _start_round(m.bot, m.chat.id)


@router.callback_query(F.data == "ui_new_game")
async def ui_new_game(cb: CallbackQuery):
    await _create_game(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name)
    await cb.answer()
    try:
        await cb.message.edit_text("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!", reply_markup=main_menu())
    except TelegramBadRequest:
        pass


@router.callback_query(F.data == "ui_new_game")
async def ui_join_game(cb: CallbackQuery, bot: Bot):
    await _join_flow(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name, bot, feedback=cb.message)
    await cb.answer()


@router.callback_query(F.data == "ui_new_game")
async def ui_start_game(cb: CallbackQuery):
    await cb.answer()
    await _start_round(cb.bot, cb.message.chat.id)


async def _create_game(chat_id: int, host_id: int, host_name: str):
    SESSIONS[chat_id] = {
        "players": [],  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        "hands": {},  # –ö–∞—Ä—Ç—ã —É –∏–≥—Ä–æ–∫–æ–≤
        "answers": {},  # –û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–∞—É–Ω–¥–µ
        "host_idx": -1,  # –ò–Ω–¥–µ–∫—Å –≤–µ–¥—É—â–µ–≥–æ
        "current_situation": None,  # –°–∏—Ç—É–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        "main_deck": [],  # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç
        "used_answers": [],  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    }


async def _join_flow(chat_id: int, user_id: int, user_name: str, bot: Bot, feedback: Message):
    st = SESSIONS.get(chat_id)
    if not st:
        await feedback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª.", reply_markup=main_menu())
        return

    if user_id not in [p["user_id"] for p in st["players"]]:
        try:
            await bot.send_message(user_id, "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å! –ñ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
        except TelegramBadRequest as e:
            await feedback.answer(f"‚ö†Ô∏è {user_name}, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ /start. –û—à–∏–±–∫–∞: {e}")
            return
        st["players"].append({"user_id": user_id, "username": user_name})

    await feedback.answer(f"–í –∏–≥—Ä–µ –∏–≥—Ä–æ–∫–æ–≤: {len(st['players'])}", reply_markup=main_menu())


async def _start_round(bot: Bot, chat_id: int):
    st = SESSIONS.get(chat_id)
    if not st or len(st["players"]) < 2:
        await bot.send_message(chat_id, "–î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.", reply_markup=main_menu())
        return

    st["answers"].clear()
    st["hands"].clear()
    st["host_idx"] = (st["host_idx"] + 1) % len(st["players"])
    st["current_situation"] = decks.get_random_situation()

    host = st["players"][st["host_idx"]]
    await bot.send_message(chat_id, f"–†–∞—É–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í–µ–¥—É—â–∏–π: {host['username']}\n–°–∏—Ç—É–∞—Ü–∏—è:\n{st['current_situation']}")

    full_deck = decks.get_new_shuffled_deck()
    st["main_deck"] = [card for card in full_deck if card not in st["used_answers"]]

    if not st["main_deck"]:
        await bot.send_message(chat_id, "–ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç.", reply_markup=main_menu())
        return

    for player in st["players"]:
        if player["user_id"] == host["user_id"]:
            continue
        hand = []
        while len(hand) < 10 and st["main_deck"]:
            hand.append(st["main_deck"].pop())
        st["hands"][player["user_id"]] = hand

    for player in st["players"]:
        if player["user_id"] == host["user_id"]:
            continue

        hand = st["hands"].get(player["user_id"], [])
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=card, callback_data=f"ans:{chat_id}:{player['user_id']}:{idx}") for idx, card in enumerate(hand)]]
        )
        try:
            await bot.send_message(
                player["user_id"],
                f"–†–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è. –°–∏—Ç—É–∞—Ü–∏—è:\n{st['current_situation']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏:",
                reply_markup=keyboard,
            )
        except TelegramBadRequest:
            await bot.send_message(chat_id, f"–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player['username']}.")


@router.callback_query(F.data.startswith("ans:"))
async def on_answer(cb: CallbackQuery):
    data = cb.data.split(":")
    chat_id, user_id, card_idx = int(data[1]), int(data[2]), int(data[3])

    st = SESSIONS.get(chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    if cb.from_user.id != user_id:
        await cb.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å.", show_alert=True)
        return

    hand = st["hands"].get(user_id, [])
    if card_idx < 0 or card_idx >= len(hand):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã.", show_alert=True)
        return

    card = hand.pop(card_idx)
    st["answers"][user_id] = card
    st["used_answers"].append(card)

    await cb.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: {card}")

    if len(st["answers"]) >= len(st["players"]) - 1:
        answers_list = list(st["answers"].items())
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=str(i + 1), callback_data=f"pick:{chat_id}:{i}") for i in range(len(answers_list))]
            ]
        )
        text = "\n".join(
            f"{idx + 1}. {next(player['username'] for player in st['players'] if player['user_id'] == uid)} ‚Äî {ans}"
            for idx, (uid, ans) in enumerate(answers_list)
        )
        await cb.message.answer(f"–í—Å–µ –æ—Ç–≤–µ—Ç—ã:\n{text}", reply_markup=keyboard)


@router.callback_query(F.data.startswith("pick:"))
async def on_pick(cb: CallbackQuery):
    data = cb.data.split(":")
    chat_id, idx = int(data[1]), int(data[2])

    st = SESSIONS.get(chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    if cb.from_user.id != st["players"][st["host_idx"]]["user_id"]:
        await cb.answer("–≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π.", show_alert=True)
        return

    answers_list = list(st["answers"].items())
    if idx < 0 or idx >= len(answers_list):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    winner_id, winner_answer = answers_list[idx]
    winner_name = next(player['username'] for player in st["players"] if player['user_id'] == winner_id)

    try:
        await cb.message.edit_reply_markup()
    except TelegramBadRequest:
        pass

    await cb.message.answer(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n–û—Ç–≤–µ—Ç: {winner_answer}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤–∏–¥–µ–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    await gen.send_illustration(cb.bot, chat_id, st["current_situation"], winner_answer)
    await video_gen.send_video_illustration(cb.bot, chat_id, st["current_situation"], winner_answer)

    # –†–∞–∑–¥–∞—á–∞ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç
    for player in st["players"]:
        if player["user_id"] == st["players"][st["host_idx"]]["user_id"]:
            continue

        if not st["main_deck"]:
            full_deck = decks.get_new_shuffled_deck()
            used = st["used_answers"]
            in_hands = [card for hand in st["hands"].values() for card in hand]
            st["main_deck"] = [card for card in full_deck if card not in used and card not in in_hands]

            if not st["main_deck"]:
                await cb.message.answer("–ö–∞—Ä—Ç –¥–ª—è –¥–æ–±–æ—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
                return

        new_card = st["main_deck"].pop()
        st["hands"].setdefault(player["user_id"], []).append(new_card)

        try:
            await cb.bot.send_message(
                player["user_id"],
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É: {new_card}\n–í—Å–µ–≥–æ –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ: {len(st['hands'][player['user_id']])}",
            )
        except TelegramBadRequest:
            pass

    await cb.message.answer("–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu())
