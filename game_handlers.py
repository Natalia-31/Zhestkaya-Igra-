# handlers/game_handlers.py ‚Äî –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã callback —Å group_chat_id –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏

from typing import Dict, Any
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest

from game_utils import decks, gen

router = Router()

# –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Å—Å–∏—è –ø–æ —á–∞—Ç—É
SESSIONS: Dict[int, Dict[str, Any]] = {}

def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="ui_new_game")],
        [InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="ui_join_game")],
        [InlineKeyboardButton(text="üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥", callback_data="ui_start_round")],
    ])

@router.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer("–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu())

@router.message(Command("new_game"))
async def cmd_new_game(m: Message):
    await _create_game(m.chat.id, m.from_user.id, m.from_user.full_name)
    await m.answer("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª, –∑–∞—Ç–µ–º ¬´–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥¬ª.", reply_markup=main_menu())

@router.message(Command("join_game"))
async def cmd_join_game(m: Message, bot: Bot):
    await _join_flow(m.chat.id, m.from_user.id, m.from_user.full_name, bot, feedback=m)

@router.message(Command("start_round"))
async def cmd_start_round(m: Message):
    await _start_round(m.bot, m.chat.id)

@router.callback_query(F.data == "ui_new_game")
async def ui_new_game(cb: CallbackQuery):
    await _create_game(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name)
    await cb.answer()
    try:
        await cb.message.edit_text("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª, –∑–∞—Ç–µ–º ¬´–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥¬ª.", reply_markup=main_menu())
    except TelegramBadRequest:
        pass

@router.callback_query(F.data == "ui_join_game")
async def ui_join_game(cb: CallbackQuery, bot: Bot):
    await _join_flow(cb.message.chat.id, cb.from_user.id, cb.from_user.full_name, bot, feedback=cb.message)
    await cb.answer()

@router.callback_query(F.data == "ui_start_round")
async def ui_start_round(cb: CallbackQuery):
    await cb.answer()
    await _start_round(cb.bot, cb.message.chat.id)

async def _create_game(chat_id: int, host_id: int, host_name: str):
    SESSIONS[chat_id] = {
        "players": [],          # [{user_id, username}]
        "hands": {},            # user_id -> List[str]
        "answers": {},          # user_id -> str
        "host_idx": -1,
        "current_situation": None,
        "main_deck": [],        # –æ—Ç–≤–µ—Ç—ã –∏–∑ answers.json
    }

async def _join_flow(chat_id: int, user_id: int, user_name: str, bot: Bot, feedback: Message):
    st = SESSIONS.get(chat_id)
    if not st:
        await feedback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª.", reply_markup=main_menu())
        return
    if user_id not in [p["user_id"] for p in st["players"]]:
        try:
            await bot.send_message(user_id, "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
        except TelegramBadRequest as e:
            await feedback.answer(f"‚ö†Ô∏è {user_name}, –Ω–∞–∂–º–∏—Ç–µ Start —É –±–æ—Ç–∞ –≤ –õ–° –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ. {e}")
            return
        st["players"].append({"user_id": user_id, "username": user_name})
    await feedback.answer(f"‚úÖ –ò–≥—Ä–æ–∫–æ–≤: {len(st['players'])}", reply_markup=main_menu())

async def _start_round(bot: Bot, chat_id: int):
    st = SESSIONS.get(chat_id)
    if not st or len(st["players"]) < 2:
        await bot.send_message(chat_id, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞: –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª.", reply_markup=main_menu())
        return

    # –°–±—Ä–æ—Å —Ä–∞—É–Ω–¥–∞
    st["answers"].clear()
    st["hands"].clear()

    # –í–µ–¥—É—â–∏–π –ø–æ –∫—Ä—É–≥—É
    st["host_idx"] = (st["host_idx"] + 1) % len(st["players"])
    host = st["players"][st["host_idx"]]

    # –°–∏—Ç—É–∞—Ü–∏—è –∏–∑ situations.json —á–µ—Ä–µ–∑ DeckManager
    st["current_situation"] = decks.get_random_situation()
    await bot.send_message(chat_id, f"üé¨ –†–∞—É–Ω–¥! üëë –í–µ–¥—É—â–∏–π: {host['username']}\n\nüé≤ {st['current_situation']}")

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–æ–¥–∞ –∏–∑ answers.json + —Ä–∞–∑–¥–∞—á–∞ –ø–æ 10 –∫–∞—Ä—Ç
    st["main_deck"] = decks.get_new_shuffled_answers_deck()
    if not st["main_deck"]:
        await bot.send_message(chat_id, "‚ö†Ô∏è answers.json –ø—É—Å—Ç ‚Äî —Ä–∞–∑–¥–∞–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.")
        return

    for p in st["players"]:
        uid = p["user_id"]
        hand = []
        while len(hand) < 10 and st["main_deck"]:
            hand.append(st["main_deck"].pop())
        st["hands"][uid] = hand

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä—É–∫–∏ –≤ –õ–° –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ —Å group_chat_id
    for p in st["players"]:
        uid = p["user_id"]
        hand = st["hands"].get(uid, [])
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–µ—Ä–µ–¥–∞–µ–º group_chat_id –≤ callback_data
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=card, callback_data=f"ans:{chat_id}:{uid}:{i}")]
            for i, card in enumerate(hand)
        ])
        try:
            await bot.send_message(uid, f"üé¥ –í–∞—à–∞ —Ä—É–∫–∞ ({len(hand)} –∫–∞—Ä—Ç). –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=kb)
        except TelegramBadRequest as e:
            await bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å {p['username']} ({uid}) –≤ –õ–°. –ù–∞–∂–º–∏—Ç–µ Start —É –±–æ—Ç–∞. {e}")

@router.callback_query(F.data.startswith("ans:"))
async def on_answer(cb: CallbackQuery):
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ñ–æ—Ä–º–∞—Ç ans:<group_chat_id>:<uid>:<idx>
    try:
        _, group_chat_id_str, uid_str, idx_str = cb.data.split(":")
        group_chat_id = int(group_chat_id_str)
        uid_from_btn = int(uid_str)
        idx = int(idx_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ group_chat_id
    st = SESSIONS.get(group_chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # –ñ–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Ä—É–∫–∏
    if cb.from_user.id != uid_from_btn:
        await cb.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Ä—É–∫–∞.", show_alert=True)
        return

    hand = st["hands"].get(uid_from_btn, [])
    if idx < 0 or idx >= len(hand):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return

    card = hand.pop(idx)
    st["answers"][uid_from_btn] = card
    await cb.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {card}")

    # –ï—Å–ª–∏ –≤—Å–µ, –∫—Ä–æ–º–µ –≤–µ–¥—É—â–µ–≥–æ, –æ—Ç–≤–µ—Ç–∏–ª–∏ ‚Äî –ø—É–±–ª–∏–∫—É–µ–º —Å–ø–∏—Å–æ–∫
    players_ids = [p["user_id"] for p in st["players"]]
    host_id = players_ids[st["host_idx"]]
    need_count = len(players_ids) - 1
    if len(st["answers"]) >= need_count:
        ordered = [(uid, st["answers"][uid]) for uid in st["answers"]]
        lines = []
        rows = []
        for i, (uid, ans) in enumerate(ordered, start=1):
            uname = next(p["username"] for p in st["players"] if p["user_id"] == uid)
            lines.append(f"{i}. {uname} ‚Äî {ans}")
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–µ—Ä–µ–¥–∞–µ–º group_chat_id –≤ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            rows.append([InlineKeyboardButton(text=str(i), callback_data=f"pick:{group_chat_id}:{i-1}")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await cb.bot.send_message(group_chat_id, "–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(lines), reply_markup=kb)

@router.callback_query(F.data.startswith("pick:"))
async def on_pick(cb: CallbackQuery):
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ñ–æ—Ä–º–∞—Ç pick:<group_chat_id>:<idx>
    try:
        _, group_chat_id_str, idx_str = cb.data.split(":")
        group_chat_id = int(group_chat_id_str)
        idx = int(idx_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    st = SESSIONS.get(group_chat_id)
    if not st:
        await cb.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    players_ids = [p["user_id"] for p in st["players"]]
    host_id = players_ids[st["host_idx"]]
    if cb.from_user.id != host_id:
        await cb.answer("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å.", show_alert=True)
        return

    ordered = [(uid, st["answers"][uid]) for uid in st["answers"]]
    if idx < 0 or idx >= len(ordered):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å.", show_alert=True)
        return

    win_uid, win_answer = ordered[idx]
    win_name = next(p["username"] for p in st["players"] if p["user_id"] == win_uid)

    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        pass
    await cb.message.edit_text(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {win_name}\n–û—Ç–≤–µ—Ç: {win_answer}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –ø–æ–±–µ–¥–∏–≤—à–µ–º—É –æ—Ç–≤–µ—Ç—É
    await gen.send_illustration(cb.bot, group_chat_id, st["current_situation"], win_answer)

    # –î–æ–±–æ—Ä –ø–æ 1 –∫–∞—Ä—Ç–µ –∫–∞–∂–¥–æ–º—É
    for p in st["players"]:
        uid = p["user_id"]
        # –µ—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞ ‚Äî –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        if not st["main_deck"]:
            st["main_deck"] = decks.get_new_shuffled_answers_deck()
            if not st["main_deck"]:
                continue
        new_card = st["main_deck"].pop()
        st["hands"].setdefault(uid, []).append(new_card)
        try:
            await cb.bot.send_message(uid, f"–í—ã –¥–æ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: `{new_card}`", parse_mode="Markdown")
        except TelegramBadRequest:
            pass

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ —Å emoji
    await cb.bot.send_message(group_chat_id, "–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=main_menu())
