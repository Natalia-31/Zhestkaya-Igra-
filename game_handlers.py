from typing import Dict, Any
import asyncio
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.iterators import ChatMemberIterator
from PIL import Image, ImageDraw, ImageFont
from gen import format_error, format_info, log_event
from game_utils import decks, video_gen

logging.basicConfig(
    filename="game_events.log",
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

router = Router()
SESSIONS: Dict[int, Dict[str, Any]] = {}

def format_header(text: str, style: str = "main") -> str:
    styles = {
        "main": f"üî• ‚ïê‚ïê‚ïê {text.upper()} ‚ïê‚ïê‚ïê üî•",
        "round": f"‚ö° ‚îÉ {text} ‚îÉ ‚ö°",
        "result": f"üèÜ ‚ñ∏ {text} ‚óÇ üèÜ",
        "warning": f"‚ö†Ô∏è {text} ‚ö†Ô∏è"
    }
    return styles.get(style, text)

def format_situation_card(situation: str, round_num: int) -> str:
    return (
        f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        f"‚îÉ üé≠ –°–ò–¢–£–ê–¶–ò–Ø #{round_num:<2}     ‚îÉ\n"
        f"‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n"
        f"‚îÉ {situation[:40]:<38} ‚îÉ\n"
        f"‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
    )

def format_countdown_timer(seconds: int) -> str:
    if seconds > 10:
        return f"‚è±Ô∏è {seconds} —Å–µ–∫"
    elif seconds > 5:
        return f"‚ö†Ô∏è {seconds} —Å–µ–∫"
    else:
        return f"üî• {seconds} —Å–µ–∫!"

def render_scores_ascii(st: Dict[str, Any]) -> str:
    scores = st.setdefault("scores", {p["username"]: 0 for p in st["players"]})
    max_score = max(scores.values(), default=1)
    lines = ["üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—É–Ω–¥–∞:"]
    for name, score in scores.items():
        bar = "‚ñà" * int((score / max_score) * 10)
        lines.append(f"{name:<10} |{bar:<10}| {score}")
    return "\n".join(lines)

async def send_gray_card(chat_id: int, text: str, bot: Bot, filename: str = "card.png"):
    img = Image.new("RGB", (600, 300), (230, 230, 230))
    draw = ImageDraw.Draw(img)
    font = ImageFont.truetype("arial.ttf", 20)
    draw.multiline_text((20, 20), text, fill=(50, 50, 50), font=font, spacing=4)
    img.save(filename)
    await bot.send_photo(chat_id, photo=InputFile(filename))

def menu_initial() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="ui_new_game")]
    ])

def menu_joinable() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="ui_join_game")]
    ])

def menu_for_host() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥", callback_data="ui_start_round")]
    ])

@router.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer(format_info(format_header("–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞")), reply_markup=menu_initial())

@router.callback_query(F.data == "ui_new_game")
async def ui_new_game(cb: CallbackQuery):
    chat_id = cb.message.chat.id
    host_id = cb.from_user.id
    host_name = cb.from_user.full_name
    await _create_game(chat_id, host_id, host_name)
    await cb.answer()
    await cb.message.edit_reply_markup(reply_markup=None)
    await cb.message.answer(format_info("–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!"))
    async for member in ChatMemberIterator(cb.bot, chat_id):
        user = member.user
        if user.is_bot:
            continue
        try:
            await cb.bot.send_message(
                user.id,
                format_info("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ:"),
                reply_markup=menu_joinable()
            )
        except TelegramBadRequest:
            pass

@router.callback_query(F.data == "ui_join_game")
async def ui_join_game(cb: CallbackQuery):
    chat_id = cb.message.chat.id
    user_id = cb.from_user.id
    user_name = cb.from_user.full_name
    await _join_flow(chat_id, user_id, user_name, cb.bot, feedback=cb.message)
    await cb.answer()
    await cb.message.edit_reply_markup(reply_markup=None)

@router.callback_query(F.data == "ui_start_round")
async def ui_start_round(cb: CallbackQuery):
    chat_id = cb.message.chat.id
    st = SESSIONS.get(chat_id)
    host_id = st["players"][st["host_idx"]]["user_id"] if st else None
    await cb.answer()
    if cb.from_user.id != host_id:
        return await cb.message.answer(format_error("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥"))
    await cb.message.edit_reply_markup(reply_markup=None)
    await cb.bot.send_message(host_id, format_info("–†–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è!"))
    await _start_round(cb.bot, chat_id)

async def _create_game(chat_id: int, host_id: int, host_name: str):
    SESSIONS[chat_id] = {
        "players": [], "hands": {}, "answers": {},
        "host_idx": -1, "current_situation": None,
        "main_deck": [], "used_answers": [], "scores": {}
    }
    log_event("GAME_CREATE", f"ChatID={chat_id}, Host={host_name}")

async def _join_flow(chat_id: int, user_id: int, user_name: str, bot: Bot, feedback: Message):
    st = SESSIONS.get(chat_id)
    if not st:
        await feedback.answer(format_error("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É"), reply_markup=None)
        return
    if user_id not in [p["user_id"] for p in st["players"]]:
        try:
            await bot.send_message(
                user_id,
                format_info("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å! –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–∞."),
                reply_markup=None
            )
        except TelegramBadRequest:
            await feedback.answer(format_error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°"), reply_markup=None)
            return
        st["players"].append({"user_id": user_id, "username": user_name})
    await feedback.answer(format_info(f"–ò–≥—Ä–æ–∫–æ–≤: {len(st['players'])}"))

async def _start_round(bot: Bot, chat_id: int):
    st = SESSIONS.get(chat_id)
    if not st or len(st["players"]) < 2:
        return await bot.send_message(chat_id, format_error("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞"))
    st["answers"].clear()
    st["hands"].clear()
    st["host_idx"] = (st["host_idx"] + 1) % len(st["players"])
    host = st["players"][st["host_idx"]]
    st["current_situation"] = decks.get_random_situation()
    log_event("ROUND_START", f"ChatID={chat_id}, Round={st['host_idx']+1}")

    title = format_header(f"–†–∞—É–Ω–¥ {st['host_idx']+1}", "round")
    card = format_situation_card(st["current_situation"], st["host_idx"]+1)
    await send_gray_card(chat_id, f"{title}\n\n{card}", bot)

    full_deck = decks.get_new_shuffled_answers_deck()
    st["main_deck"] = [c for c in full_deck if c not in st["used_answers"]]

    for p in st["players"]:
        uid = p["user_id"]
        if uid == host["user_id"]:
            continue
        hand = []
        while len(hand) < 10 and st["main_deck"]:
            hand.append(st["main_deck"].pop())
        st["hands"][uid] = hand

    for p in st["players"]:
        uid = p["user_id"]
        if uid == host["user_id"]:
            continue
        hand = st["hands"][uid]
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=str(i+1), callback_data=f"ans:{chat_id}:{uid}:{i}")]
            for i in range(len(hand))
        ])
        text = f"{format_header('–í–∞—à–∞ —Ä—É–∫–∞','main')}\n\nüé≤ {st['current_situation']}\n\nüé¥ –£ –≤–∞—Å {len(hand)} –∫–∞—Ä—Ç."
        try:
            msg = await bot.send_message(uid, text, reply_markup=kb)
            for sec in range(30, 0, -1):
                await asyncio.sleep(1)
                try:
                    await msg.edit_text(f"{text}\n\n{format_countdown_timer(sec)}", reply_markup=kb)
                except TelegramBadRequest:
                    break
        except TelegramBadRequest:
            await bot.send_message(chat_id, format_error(f"–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {p['username']}"))

@router.callback_query(F.data.startswith("ans:"))
async def on_answer(cb: CallbackQuery):
    _, chat_id_str, uid_str, idx_str = cb.data.split(":")
    chat_id, uid, idx = map(int, (chat_id_str, uid_str, idx_str))
    st = SESSIONS.get(chat_id)
    if not st:
        return await cb.answer(format_error("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"), show_alert=True)
    host_id = st["players"][st["host_idx"]]["user_id"]
    if cb.from_user.id != uid or uid == host_id:
        return await cb.answer(format_error("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å"), show_alert=True)
    hand = st["hands"][uid]
    if idx < 0 or idx >= len(hand):
        return await cb.answer(format_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"), show_alert=True)

    card = hand.pop(idx)
    st["answers"][uid] = card
    st["used_answers"].append(card)
    await cb.answer(format_info(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {card}"))

    if len(st["answers"]) >= len(st["players"]) - 1:
        header = format_header("–û—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤","main")
        lines, buttons = [], []
        for i,(uid2,ans) in enumerate(st["answers"].items(),1):
            name = next(p["username"] for p in st["players"] if p["user_id"]==uid2)
            if uid2==host_id: name=f"<b>{name}</b>"
            lines.append(f"{i}. {name} ‚Äî {ans}")
            buttons.append([InlineKeyboardButton(text=str(i), callback_data=f"pick:{chat_id}:{i-1}")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await send_gray_card(chat_id, f"{header}\n\n"+"\n".join(lines), cb.bot)
        await cb.bot.send_message(chat_id, format_info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:"), reply_markup=kb)

@router.callback_query(F.data.startswith("pick:"))
async def on_pick(cb: CallbackQuery):
    _, chat_id_str, idx_str = cb.data.split(":")
    chat_id, idx = map(int, (chat_id_str, idx_str))
    st = SESSIONS.get(chat_id)
    if not st:
        return await cb.answer(format_error("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"), show_alert=True)
    host_id = st["players"][st["host_idx"]]["user_id"]
    if cb.from_user.id != host_id:
        return await cb.answer(format_error("–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å"), show_alert=True)

    uid_win, win_ans = list(st["answers"].items())[idx]
    win_name = next(p["username"] for p in st["players"] if p["user_id"]==uid_win)
    st["scores"][win_name] += 1
    log_event("WINNER_PICK", f"ChatID={chat_id}, Winner={win_name}")

    result_header = format_header("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞","result")
    result_text = f"{result_header}\n\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {win_name}\n–û—Ç–≤–µ—Ç: {win_ans}"
    await send_gray_card(chat_id, result_text, cb.bot)
    await cb.bot.send_message(chat_id, render_scores_ascii(st))
    await cb.bot.send_message(host_id, format_info("–ì–æ—Ç–æ–≤–æ –∫ –Ω–æ–≤–æ–º—É —Ä–∞—É–Ω–¥—É"), reply_markup=menu_for_host())
