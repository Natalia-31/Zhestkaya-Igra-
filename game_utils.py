# game_utils/decks.py
import os
import json
import random
from pathlib import Path
from typing import List, Optional, Tuple
import asyncio
import aiohttp
from dotenv import load_dotenv
import google.generativeai as genai

# ====== –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π ======
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

# –ú–æ–¥–µ–ª–∏ Gemini
gemini_text_model = genai.GenerativeModel("gemini-2.5-flash-lite-preview-09-2025")  # –î–ª—è —Ç–µ–∫—Å—Ç–∞
gemini_image_model = genai.GenerativeModel("gemini-2.5-flash-image")  # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (500 –±–µ—Å–ø–ª–∞—Ç–Ω–æ/–¥–µ–Ω—å)

# –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–æ–¥
class DeckManager:
    def __init__(self, situations_file: str = "situations.json", answers_file: str = "answers.json", base: Path | None = None):
        self.base_dir = base or Path(__file__).resolve().parent
        self.sit_path = (self.base_dir / situations_file).resolve()
        self.ans_path = (self.base_dir / answers_file).resolve()
        self.situations: List[str] = self._load_list(self.sit_path, "situations")
        self.answers: List[str]    = self._load_list(self.ans_path, "answers")

    def _load_list(self, file_path: Path, label: str) -> List[str]:
        for enc in ("utf-8-sig", "utf-8"):
            try:
                data = json.loads(file_path.read_text(encoding=enc))
                if isinstance(data, list):
                    seen, out = set(), []
                    for x in data:
                        if isinstance(x, str):
                            x = x.strip()
                            if x and x not in seen:
                                seen.add(x)
                                out.append(x)
                    return out
                return []
            except (FileNotFoundError, json.JSONDecodeError, UnicodeDecodeError):
                continue
        return []

    def get_random_situation(self) -> str:
        return random.choice(self.situations) if self.situations else "–¢–µ—Å—Ç–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"

    def get_new_shuffled_answers_deck(self) -> List[str]:
        deck = list(self.answers)
        random.shuffle(deck)
        return deck

# ====== –ù–û–í–û–ï: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini 2.5 Flash Image ======
async def generate_gemini_image(situation: str, answer: str) -> Optional[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Gemini 2.5 Flash Image (500 –±–µ—Å–ø–ª–∞—Ç–Ω–æ/–¥–µ–Ω—å)
    
    Returns:
        URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    try:
        if not GEMINI_API_KEY:
            print("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return None
        
        print(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Gemini 2.5 Flash Image...")
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –º–µ–º–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        prompt = (
            f"–°–æ–∑–¥–∞–π –∑–∞–±–∞–≤–Ω—É—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é-–º–µ–º –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã. "
            f"–°–∏—Ç—É–∞—Ü–∏—è: '{situation}'. –û—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞: '{answer}'. "
            f"–°—Ç–∏–ª—å: —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –º–∏–Ω–∏–º–∞–ª–∏–∑–º, —é–º–æ—Ä, –∫–∞—Ä–∏–∫–∞—Ç—É—Ä–∞, –º–µ–º–Ω—ã–π —Å—Ç–∏–ª—å. "
            f"–ë–ï–ó —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏!"
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        response = await asyncio.to_thread(
            gemini_image_model.generate_content,
            prompt
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        if hasattr(response, 'candidates') and response.candidates:
            for candidate in response.candidates:
                if hasattr(candidate.content, 'parts'):
                    for part in candidate.content.parts:
                        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        if hasattr(part, 'inline_data') and part.inline_data:
                            import base64
                            import hashlib
                            
                            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
                            image_data = part.inline_data.data
                            image_bytes = base64.b64decode(image_data)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
                            file_hash = hashlib.md5((situation + answer).encode()).hexdigest()[:10]
                            temp_path = f"temp_image_{file_hash}.png"
                            
                            with open(temp_path, 'wb') as f:
                                f.write(image_bytes)
                            
                            print(f"‚úÖ Gemini Image —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {temp_path}")
                            return temp_path
        
        print("‚ö†Ô∏è Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Gemini Image: {e}")
        return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Pollinations (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
async def generate_pollinations_image(situation: str, answer: str) -> Optional[str]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations.ai (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
    """
    prompt = (
        f"Cartoon style card for a Russian Telegram game '–ñ–µ—Å—Ç–∫–∞—è –∏–≥—Ä–∞': Situation: {situation}, "
        f"Player's answer: {answer}. Minimalism, humor, bold lines, no text overlay on the image itself."
    )
    url = "https://api.pollinations.ai/prompt"
    params = {"prompt": prompt}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=20) as resp:
                if resp.status == 200:
                    print(f"‚úÖ Pollinations –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    return str(resp.url)
    except Exception as e:
        print(f"‚ö†Ô∏è Pollinations error: {e}")
    return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—É—Ç–∫–∏ —á–µ—Ä–µ–∑ Gemini API
async def generate_card_joke(situation: str, answer: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫—É—é —à—É—Ç–∫—É —á–µ—Ä–µ–∑ Gemini
    """
    if not gemini_text_model:
        return f"–°–∏—Ç—É–∞—Ü–∏—è: {situation} | –û—Ç–≤–µ—Ç: {answer}"
    
    prompt = (
        f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Å–º–µ—à–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã.\n"
        f"–°–∏—Ç—É–∞—Ü–∏—è: {situation}\n"
        f"–û—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞: {answer}\n"
        "–§–æ—Ä–º–∞—Ç: —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ–º, –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏, –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    )
    try:
        response = await asyncio.to_thread(gemini_text_model.generate_content, prompt)
        return response.text.strip()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—É—Ç–∫–∏: {e}")
        return "üòÖ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à—É—Ç–∫—É."

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def generate_card_content(situation: str, answer: str) -> Tuple[Optional[str], str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —à—É—Ç–∫—É –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
    1. Gemini 2.5 Flash Image (500 –±–µ—Å–ø–ª–∞—Ç–Ω–æ/–¥–µ–Ω—å) ‚úÖ
    2. Pollinations.ai (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
    
    Returns:
        (image_url_or_path, joke_text)
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—É—Ç–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    joke_task = asyncio.create_task(generate_card_joke(situation, answer))
    
    # 1. –ü—Ä–æ–±—É–µ–º Gemini Image (–ü–†–ò–û–†–ò–¢–ï–¢ - –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, 500/–¥–µ–Ω—å)
    image_result = await generate_gemini_image(situation, answer)
    
    if not image_result:
        # 2. –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - Pollinations
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Pollinations...")
        image_result = await generate_pollinations_image(situation, answer)
    
    # –ñ–¥–µ–º —à—É—Ç–∫—É
    joke_text = await joke_task
    
    return image_result, joke_text

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–ª–æ–¥
decks = DeckManager(base=Path(__file__).resolve().parent)
