# game_utils.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø AI HORDE

import json
import random
from typing import Optional
from io import BytesIO
import asyncio
import aiohttp
import base64

from aiogram import Bot
from aiogram.types import BufferedInputFile


class GameImageGenerator:
    def __init__(self, situations_file: str = "situations.json"):
        self.situations_file = situations_file
        self.situations = self._load_situations()
        # AI Horde API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.api_key = "0000000000"  # –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∫–ª—é—á
        self.base_url = "https://aihorde.net/api/v2"

    def _load_situations(self) -> list:
        try:
            with open(self.situations_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            if isinstance(data, list) and data:
                return data
        except Exception:
            pass
        return [
            "–ù–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ —è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ ____.",
            "–°–∞–º–∞—è —Å—Ç—Ä–∞–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ–ø–æ–∑–¥–∞—Ç—å: ____.",
            "–ú–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–ª–∞–Ω—Ç ‚Äî ____.",
            "–í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ —è —Å–ª—É—á–∞–π–Ω–æ ____.",
            "–ù–∞ —Ä–∞–±–æ—Ç–µ –º–µ–Ω—è –∑–∞—Å—Ç–∞–ª–∏ –∑–∞ ____.",
            "–î–æ–º–∞ —è –æ–±–Ω–∞—Ä—É–∂–∏–ª, —á—Ç–æ –º–æ–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ ____."
        ]

    def get_random_situation(self) -> str:
        return random.choice(self.situations)

    def create_optimized_prompt(self, situation: str, answer: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI Horde
        """
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—á–µ—Ä–∫–∏ –∏ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        combined_text = situation.replace("____", answer).strip()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        translations = {
            # –ú–µ—Å—Ç–∞
            "–ù–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ": "At a party",
            "–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ": "in a restaurant", 
            "–¥–æ–º–∞": "at home",
            "–Ω–∞ —Ä–∞–±–æ—Ç–µ": "at work",
            "–≤ –º–∞–≥–∞–∑–∏–Ω–µ": "in a store",
            "–Ω–∞ —É–ª–∏—Ü–µ": "on the street",
            "–≤ —à–∫–æ–ª–µ": "at school",
            "–≤ –∫–∏–Ω–æ": "at the cinema",
            
            # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            "–ú–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–ª–∞–Ω—Ç ‚Äî ": "My secret talent is ",
            "–°–∞–º–∞—è —Å—Ç—Ä–∞–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞": "The strangest reason",
            "–°–∞–º–∞—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞": "The most common reason",
            
            # –î–µ–π—Å—Ç–≤–∏—è –∏ –≥–ª–∞–≥–æ–ª—ã
            "—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ": "I unexpectedly",
            "—è —Å–ª—É—á–∞–π–Ω–æ": "I accidentally", 
            "–º–µ–Ω—è –∑–∞—Å—Ç–∞–ª–∏ –∑–∞": "I was caught",
            "—è –æ–±–Ω–∞—Ä—É–∂–∏–ª": "I discovered",
            "–æ–ø–æ–∑–¥–∞—Ç—å": "being late",
            "–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è": "waking up",
            "—É–ø–∞–ª –≤": "fell into",
            "—É–ø–∞–ª": "fell down",
            "—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å": "dancing",
            "–ø–µ—Ç—å": "singing",
            "–∫—Ä–∏—á–∞—Ç—å": "shouting",
            "–ø–ª–∞–∫–∞—Ç—å": "crying",
            "—Å–º–µ—è—Ç—å—Å—è": "laughing",
            "–±–µ–∂–∞—Ç—å": "running",
            "–ø—Ä—ã–≥–∞—Ç—å": "jumping",
            
            # –ü—Ä–µ–¥–º–µ—Ç—ã
            "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫": "refrigerator",
            "—Ç–æ—Ä—Ç": "cake",
            "–∫–æ—Ç –≤ —Å–∞–ø–æ–≥–∞—Ö": "Puss in Boots",
            "—Å–æ–±–∞–∫–∞": "dog",
            "–∫–æ—Ç": "cat",
            "–ø—Ç–∏—Ü–∞": "bird",
            "—Å—Ç–æ–ª": "table",
            "—Å—Ç—É–ª": "chair"
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –ø–æ—Ä—è–¥–∫—É (—Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –ø–æ—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ)
        english_text = combined_text
        for ru_phrase in sorted(translations.keys(), key=len, reverse=True):
            english_text = english_text.replace(ru_phrase, translations[ru_phrase])
        
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥
        if any(ord(char) > 127 for char in english_text):
            try:
                from googletrans import Translator
                translator = Translator()
                translation = translator.translate(combined_text, dest='en')
                english_text = translation.text
                print(f"üîÑ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {combined_text} -> {english_text}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–æ–±–µ–ª—ã
        english_text = english_text.replace(".", "").replace(",", "").strip()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ë–ï–ó –ª–∏—à–Ω–∏—Ö –∑–∞–ø—è—Ç—ã—Ö
        prompt = f"{english_text} masterpiece best quality highly detailed photorealistic cinematic lighting"
        
        return prompt.strip()

    async def generate_image_with_horde(self, prompt: str) -> Optional[BytesIO]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI Horde API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        """
        print(f"ü§ñ AI Horde: –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–æ–º–ø—Ç–æ–º: {prompt}")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è AI Horde
        payload = {
            "prompt": prompt,
            "params": {
                "sampler_name": "k_euler",
                "cfg_scale": 7.0,
                "height": 512,
                "width": 512,
                "steps": 20,
                "n": 1
            },
            "nsfw": False,
            "trustedworkers": True,
            "models": ["AlbedoBase XL (SDXL)"],  # –°—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
            "r2": True,
            "shared": False,
            "replacement_filter": True,
            "dry_run": False
        }
        
        headers = {
            "Content-Type": "application/json",
            "apikey": self.api_key,
            "User-Agent": "TelegramBot/1.0"
        }

        try:
            async with aiohttp.ClientSession() as session:
                # –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                async with session.post(f"{self.base_url}/generate/async", 
                                      json=payload, headers=headers) as response:
                    
                    response_text = await response.text()
                    print(f"üîç AI Horde –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status}, —Ç–µ–∫—Å—Ç: {response_text}")
                    
                    if response.status != 202:
                        print(f"‚ùå AI Horde: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
                        print(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {response_text}")
                        return None
                    
                    try:
                        result = await response.json()
                    except:
                        print(f"‚ùå AI Horde: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç")
                        return None
                    
                    job_id = result.get("id")
                    
                    if not job_id:
                        print("‚ùå AI Horde: –ù–µ –ø–æ–ª—É—á–µ–Ω ID –∑–∞–¥–∞–Ω–∏—è")
                        return None
                    
                    print(f"üîÑ AI Horde: –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {job_id}")

                # –®–∞–≥ 2: –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                max_attempts = 40  # –ú–∞–∫—Å–∏–º—É–º 3.5 –º–∏–Ω—É—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
                for attempt in range(max_attempts):
                    await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    
                    async with session.get(f"{self.base_url}/generate/check/{job_id}") as check_response:
                        if check_response.status != 200:
                            continue
                            
                        check_result = await check_response.json()
                        
                        if check_result.get("done", False):
                            generations = check_result.get("generations", [])
                            if generations and generations[0].get("img"):
                                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                img_base64 = generations[0]["img"]
                                img_bytes = base64.b64decode(img_base64)
                                print("‚úÖ AI Horde: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                                return BytesIO(img_bytes)
                            else:
                                print("‚ùå AI Horde: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
                                return None
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        queue_position = check_result.get("queue_position", "?")
                        wait_time = check_result.get("wait_time", "?")
                        print(f"‚è≥ AI Horde: –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_position}, –æ–∂–∏–¥–∞–Ω–∏–µ: {wait_time}—Å")

                print("‚ùå AI Horde: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                return None

        except Exception as e:
            print(f"‚ùå AI Horde: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None

    async def generate_and_send_image(self, bot: Bot, chat_id: int, situation: str, answer: Optional[str] = None) -> bool:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        """
        if answer:
            prompt = self.create_optimized_prompt(situation, answer)
        else:
            # –ü—Ä–æ—Å—Ç–æ–π fallback –ø—Ä–æ–º–ø—Ç
            prompt = f"A photorealistic image masterpiece best quality"

        print(f"üìù –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {prompt}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Horde
        image_bytes_io = await self.generate_image_with_horde(prompt)

        if image_bytes_io:
            try:
                await bot.send_photo(
                    chat_id,
                    photo=BufferedInputFile(file=image_bytes_io.read(), filename="generated_image.jpeg"),
                    caption=f"üé® –ü—Ä–æ–º–ø—Ç: {prompt}"
                )
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram: {e}")
                return False

        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI Horde. –°–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
gen = GameImageGenerator()

def get_random_situation() -> str:
    return gen.get_random_situation()
