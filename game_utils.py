# game_utils.py ‚Äî —Å–∏—Ç—É–∞—Ü–∏–∏/–æ—Ç–≤–µ—Ç—ã –∏–∑ JSON + –≤–∞—à —Ä–∞–±–æ—á–∏–π –±–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

import os
import json
import random
from pathlib import Path
from typing import List, Optional
from io import BytesIO
import asyncio
import aiohttp
import base64
from urllib.parse import quote

from dotenv import load_dotenv
from aiogram import Bot
from aiogram.types import BufferedInputFile

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
NANO_API_KEY = os.getenv("NANO_API_KEY")
HORDE_API_KEY = os.getenv("HORDE_API_KEY")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

def create_prompt(situation: str, answer: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
    combined = situation.replace("____", answer).strip().replace(".", "").replace(",", "")
    
    # –ö—Ä–∞—Ç–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    quick_translations = {
        "–ù–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ": "at a party",
        "–æ–ø–æ–∑–¥–∞—Ç—å": "being late",
        "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫": "refrigerator",
        "–∫–æ—Ç –≤ —Å–∞–ø–æ–≥–∞—Ö": "Puss in Boots",
        "—Ä–∞–±–æ—Ç–∞": "work",
        "—à–∫–æ–ª–∞": "school",
        "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è": "birthday",
        "—Ç–∞–ª–∞–Ω—Ç": "talent",
        "—Ä–µ–∑—é–º–µ": "resume",
    }
    
    text = combined
    for ru, en in quick_translations.items():
        text = text.replace(ru, en)
        
    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞, –ø–µ—Ä–µ–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ Google Translate
    if any(ord(c) > 127 for c in text):
        try:
            from googletrans import Translator
            translator = Translator()
            text = translator.translate(combined, dest='en').text
            print(f"üîÑ [–ü–µ—Ä–µ–≤–æ–¥] {combined} -> {text}")
        except Exception as e:
            print(f"‚ö†Ô∏è [–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞] {e}")
            
    # –î–æ–±–∞–≤–ª—è–µ–º "–º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞" –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
    modifiers = "photorealistic, cinematic lighting, ultra detailed, 8k, trending on Artstation"
    final_prompt = f"{text}, {modifiers}"
    print(f"üìù [–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç] {final_prompt}")
    return final_prompt


class DeckManager:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç situations.json –∏ answers.json (UTF-8 –∏ UTF-8-SIG),
    –æ—Ç–¥–∞—ë—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—É—é –∫–æ–ª–æ–¥—É –æ—Ç–≤–µ—Ç–æ–≤.
    """
    def __init__(self, situations_file: str = "situations.json", answers_file: str = "answers.json"):
        self.base_dir = Path(__file__).resolve().parent
        self.sit_path = (self.base_dir / situations_file).resolve()
        self.ans_path = (self.base_dir / answers_file).resolve()

        self.situations: List[str] = self._load_list(self.sit_path, "situations")
        self.answers: List[str] = self._load_list(self.ans_path, "answers")

    def _load_list(self, file_path: Path, label: str) -> List[str]:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–µ—Å—Ç—å –∫–∞–∫ UTF-8, –∑–∞—Ç–µ–º –∫–∞–∫ UTF-8-SIG (BOM)
        for enc in ("utf-8", "utf-8-sig"):
            try:
                with open(file_path, "r", encoding=enc) as f:
                    data = json.load(f)
                if isinstance(data, list):
                    print(f"‚úÖ –ö–æ–ª–æ–¥–∞ '{label}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({enc}): {len(data)} –∏–∑ {file_path}")
                    return data
                else:
                    print(f"‚ö†Ô∏è {file_path} ({label}) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON-—Å–ø–∏—Å–æ–∫")
                    return []
            except FileNotFoundError:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path} ({label})")
                return []
            except UnicodeDecodeError as e:
                print(f"‚ö†Ô∏è –ö–æ–¥–∏—Ä–æ–≤–∫–∞ {enc} –Ω–µ –ø–æ–¥–æ—à–ª–∞: {e} ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é‚Ä¶")
                continue
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ JSON –≤ {file_path} ({label}): {e}")
                return []
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path} ({label}): {e}")
                return []
        return []

    def get_random_situation(self) -> str:
        return random.choice(self.situations) if self.situations else "–ù–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ —è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ ____."

    def get_new_shuffled_answers_deck(self) -> List[str]:
        deck = self.answers.copy()
        random.shuffle(deck)
        return deck


class GameImageGenerator:
    """
    –í–ê–® –†–ê–ë–û–ß–ò–ô –ë–õ–û–ö –ì–ï–ù–ï–†–ê–¶–ò–ò ‚Äî –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤
    """
    def __init__(self):
        # –ö–ª—é—á–∏ –∏ URL –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.nb_key = NANO_API_KEY
        self.nb_url = "https://api.nanobanana.ai/v1/generate"
        
        self.horde_key = HORDE_API_KEY
        self.horde_url = "https://aihorde.net/api/v2"
        
        self.replicate_token = REPLICATE_API_TOKEN
        self.replicate_url = "https://api.replicate.com/v1/predictions"

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–≤–∞—à–∏ —Ä–∞–±–æ—á–∏–µ) ---
    async def _try_pollinations(self, prompt: str) -> Optional[BytesIO]:
        """–°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π, –±–µ–∑ –∫–ª—é—á–∞."""
        print("üü° –ó–∞–ø—É—Å–∫–∞—é Pollinations...")
        url = f"https://image.pollinations.ai/prompt/{quote(prompt)}?width=512&height=512"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=15) as resp:
                    if resp.status == 200:
                        print("‚úÖ Pollinations –æ—Ç–≤–µ—Ç–∏–ª –ø–µ—Ä–≤—ã–º!")
                        return BytesIO(await resp.read())
        except Exception as e:
            print(f"‚ö†Ô∏è Pollinations: {e}")
        return None

    async def _try_nanobanana(self, prompt: str) -> Optional[BytesIO]:
        """–¢—Ä–µ–±—É–µ—Ç –∫–ª—é—á, —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å."""
        if not self.nb_key: return None
        print("üîµ –ó–∞–ø—É—Å–∫–∞—é Nano Banana...")
        payload = {"prompt": prompt, "model": "sdxl", "width": 512, "height": 512, "steps": 20, "cfg_scale": 7.0}
        headers = {"Authorization": f"Bearer {self.nb_key}", "Content-Type": "application/json"}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.nb_url, json=payload, headers=headers, timeout=40) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        img_url = data.get("image_url")
                        if img_url:
                            async with session.get(img_url, timeout=20) as img_resp:
                                if img_resp.status == 200:
                                    print("‚úÖ Nano Banana –æ—Ç–≤–µ—Ç–∏–ª!")
                                    return BytesIO(await img_resp.read())
        except Exception as e:
            print(f"‚ö†Ô∏è Nano Banana: {e}")
        return None

    async def _try_horde(self, prompt: str) -> Optional[BytesIO]:
        """–¢—Ä–µ–±—É–µ—Ç –∫–ª—é—á, –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏."""
        if not self.horde_key: return None
        print("üü£ –ó–∞–ø—É—Å–∫–∞—é AI Horde...")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é AI Horde –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        return None

    async def _try_replicate(self, prompt: str) -> Optional[BytesIO]:
        """–¢—Ä–µ–±—É–µ—Ç –∫–ª—é—á, –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º."""
        if not self.replicate_token: return None
        print("‚ö™Ô∏è –ó–∞–ø—É—Å–∫–∞—é Replicate...")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é Replicate –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        return None

    # --- –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤–∞—à —Ä–∞–±–æ—á–∏–π) ---
    async def send_illustration(self, bot: Bot, chat_id: int, situation: str, answer: Optional[str] = None) -> bool:
        """
        –°–æ–≤–º–µ—Å—Ç–∏–º—ã–π API –¥–ª—è handlers: send_illustration –≤–º–µ—Å—Ç–æ generate_and_send_image
        """
        prompt = create_prompt(situation, answer) if answer else "A photorealistic image, masterpiece, best quality"
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = [
            self._try_pollinations(prompt),
            self._try_nanobanana(prompt),
            # self._try_horde(prompt),       # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á
            # self._try_replicate(prompt),  # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –∂–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        for future in asyncio.as_completed(tasks):
            try:
                result_image = await future
                if result_image:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    await bot.send_photo(
                        chat_id,
                        photo=BufferedInputFile(file=result_image.read(), filename="generated_image.jpeg"),
                        caption=f"–ü—Ä–æ–º–ø—Ç: {prompt}"
                    )
                    return True # –£—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–π –∏–∑ –∑–∞–¥–∞—á: {e}")
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return False


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
decks = DeckManager()
gen = GameImageGenerator()

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
def get_random_situation() -> str:
    return decks.get_random_situation()
