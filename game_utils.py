# game_utils.py ‚Äî –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏

import os
import json
import random
from pathlib import Path
from typing import List, Optional
from io import BytesIO
import asyncio
import aiohttp
from urllib.parse import quote

from dotenv import load_dotenv
from aiogram import Bot
from aiogram.types import BufferedInputFile

# ========== –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π ==========
load_dotenv()
NANO_API_KEY = os.getenv("NANO_API_KEY")
HORDE_API_KEY = os.getenv("HORDE_API_KEY")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")
HAILUO_API_KEY = os.getenv("HAILUO_API_KEY")  # –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª

# ========== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ ==========
def create_prompt(situation: str, answer: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –º—É–ª—å—Ç—è—à–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""
    
    def translate_to_english(text: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É."""
        if any(ord(c) > 127 for c in text):
            try:
                from googletrans import Translator
                translator = Translator()
                result = translator.translate(text, dest='en').text
                return result
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                return text
        return text
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º
    situation_clean = situation.replace("_____", "").replace("____", "").strip()
    situation_en = translate_to_english(situation_clean)
    answer_en = translate_to_english(answer.strip())
    
    # –ö–æ—Ä–æ—Ç–∫–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: —Å–∏—Ç—É–∞—Ü–∏—è + –æ—Ç–≤–µ—Ç
    context_description = f"{situation_en} - {answer_en}"
    
    # –°—Ç–∏–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    styles = ["cartoon", "caricature", "comic panel", "flat colors"]
    chosen_style = random.choice(styles)
    
    # –†–∞–∫—É—Ä—Å—ã/–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
    perspectives = ["wide shot", "close-up", "medium shot", "bird's eye view", "low angle"]
    chosen_perspective = random.choice(perspectives)
    
    # –≠–º–æ—Ü–∏–∏
    emotions = ["amused expression", "surprised look", "confused face", "happy smile", "shocked expression", "thoughtful pose"]
    chosen_emotion = random.choice(emotions)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    final_prompt = f"{context_description}, {chosen_style}, {chosen_perspective}, {chosen_emotion}, colorful, simple shapes, expressive"
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"üìù [–°–∏—Ç—É–∞—Ü–∏—è] {situation}")
    print(f"üìù [–û—Ç–≤–µ—Ç] {answer}")
    print(f"üìù [–ö–æ–Ω—Ç–µ–∫—Å—Ç] {context_description}")
    print(f"üìù [–°—Ç–∏–ª—å] {chosen_style}")
    print(f"üìù [–†–∞–∫—É—Ä—Å] {chosen_perspective}")
    print(f"üìù [–≠–º–æ—Ü–∏—è] {chosen_emotion}")
    print(f"üìù [–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç] {final_prompt}")
    
    return final_prompt

def create_video_prompt(situation: str, answer: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    
    def translate_to_english(text: str) -> str:
        if any(ord(c) > 127 for c in text):
            try:
                from googletrans import Translator
                return Translator().translate(text, dest='en').text
            except:
                return text
        return text
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º
    situation_clean = situation.replace("_____", "").replace("____", "").strip()
    situation_en = translate_to_english(situation_clean)
    answer_en = translate_to_english(answer.strip())
    
    # –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ
    motion_scenarios = [
        f"Person interacting with {answer_en} while thinking about: {situation_en}",
        f"Dynamic scene showing {answer_en} in action, representing: {situation_en}",
        f"Animated sequence of {answer_en} responding to: {situation_en}",
        f"Character discovering {answer_en} in context of: {situation_en}",
        f"Humorous scene with {answer_en} solving problem: {situation_en}"
    ]
    
    chosen_scenario = random.choice(motion_scenarios)
    
    # –°—Ç–∏–ª–∏ –¥–≤–∏–∂–µ–Ω–∏—è
    motion_styles = ["smooth animation", "bouncy movement", "dramatic zoom", "gentle pan", "dynamic rotation"]
    chosen_motion = random.choice(motion_styles)
    
    # –°–æ–∑–¥–∞—ë–º –≤–∏–¥–µ–æ-–ø—Ä–æ–º–ø—Ç
    video_prompt = f"6-second cartoon video: {chosen_scenario}, {chosen_motion}, colorful, expressive characters, simple animation style"
    
    print(f"üé¨ [–í–∏–¥–µ–æ –ø—Ä–æ–º–ø—Ç] {video_prompt}")
    return video_prompt

# ========== –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–æ–¥ ==========
class DeckManager:
    def __init__(self, situations_file: str = "situations.json", answers_file: str = "answers.json"):
        self.base_dir = Path(__file__).resolve().parent
        self.sit_path = (self.base_dir / situations_file).resolve()
        self.ans_path = (self.base_dir / answers_file).resolve()
        self.situations: List[str] = self._load_list(self.sit_path, "situations")
        self.answers: List[str] = self._load_list(self.ans_path, "answers")

    def _load_list(self, file_path: Path, label: str) -> List[str]:
        # –í—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –≥–¥–µ –æ–Ω
        print(f"üîç Loading '{label}' from {file_path} (exists={file_path.exists()})")
        for enc in ("utf-8-sig", "utf-8"):
            try:
                with open(file_path, "r", encoding=enc) as f:
                    data = json.load(f)
                if isinstance(data, list):
                    print(f"‚úÖ –ö–æ–ª–æ–¥–∞ '{label}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({enc}): {len(data)} items")
                    return data
                else:
                    print(f"‚ö†Ô∏è {file_path} ({label}) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON-—Å–ø–∏—Å–æ–∫")
                    return []
            except FileNotFoundError:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return []
            except UnicodeDecodeError as e:
                print(f"‚ö†Ô∏è –ö–æ–¥–∏—Ä–æ–≤–∫–∞ {enc} –Ω–µ –ø–æ–¥–æ—à–ª–∞: {e}")
            except json.JSONDecodeError as e:
                print(f"‚ùå JSON –æ—à–∏–±–∫–∞ ({enc}) –≤ {file_path}: {e}")
                return []
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ({enc}) –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å '{label}' –∏–∑ {file_path} –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
        return []

    def get_random_situation(self) -> str:
        return random.choice(self.situations) if self.situations else "–ï—Å–ª–∏ –±—ã –Ω–µ ____, —è –±—ã –±—Ä–æ—Å–∏–ª –ø–∏—Ç—å."

    def get_new_shuffled_answers_deck(self) -> List[str]:
        deck = self.answers.copy()
        random.shuffle(deck)
        return deck

decks = DeckManager()

# ========== –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ==========
class GameImageGenerator:
    def __init__(self):
        self.nb_key = NANO_API_KEY
        self.nb_url = "https://api.nanobanana.ai/v1/generate"
        self.horde_key = HORDE_API_KEY
        self.horde_url = "https://aihorde.net/api/v2"

    async def _try_pollinations(self, prompt: str) -> Optional[BytesIO]:
        url = f"https://image.pollinations.ai/prompt/{quote(prompt)}?width=512&height=512"
        try:
            async with aiohttp.ClientSession() as s:
                async with s.get(url, timeout=15) as r:
                    if r.status == 200:
                        return BytesIO(await r.read())
        except:
            pass
        return None

    async def _try_nanobanana(self, prompt: str) -> Optional[BytesIO]:
        if not self.nb_key:
            return None
        payload = {
            "prompt": prompt,
            "model": "sdxl",
            "width": 512,
            "height": 512,
            "steps": 20,
            "cfg_scale": 7.0
        }
        headers = {"Authorization": f"Bearer {self.nb_key}", "Content-Type": "application/json"}
        try:
            async with aiohttp.ClientSession() as s:
                async with s.post(self.nb_url, json=payload, headers=headers, timeout=40) as r:
                    if r.status == 200:
                        data = await r.json()
                        img_url = data.get("image_url")
                        if img_url:
                            async with s.get(img_url, timeout=20) as ir:
                                if ir.status == 200:
                                    return BytesIO(await ir.read())
        except:
            pass
        return None

    async def send_illustration(self, bot: Bot, chat_id: int, situation: str, answer: Optional[str] = None) -> bool:
        if not answer:
            await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return False

        prompt = create_prompt(situation, answer)
        tasks = [
            self._try_pollinations(prompt),
            self._try_nanobanana(prompt),
        ]
        for future in asyncio.as_completed(tasks):
            try:
                img_buf = await future
                if img_buf:
                    await bot.send_photo(
                        chat_id,
                        photo=BufferedInputFile(file=img_buf.read(), filename="game_scene.jpg")
                    )
                    return True
            except:
                continue

        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.")
        return False

# ========== –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ ==========
class GameImageGenerator:
    """
    –†–∞–Ω–µ–µ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å:
    - –ø—ã—Ç–∞–µ—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –ø–æ create_video_prompt —á–µ—Ä–µ–∑ Hailuo (—á–µ—Ä–µ–∑ video_gen),
    - –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî –ø–∞–¥–∞–µ—Ç –Ω–∞–∑–∞–¥ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞—Ç–∏—á–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
      (pollinations -> nanobanana), –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë —Å –æ—Ç–º–µ—Ç–∫–æ–π, —á—Ç–æ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.
    """
    def __init__(self):
        self.nb_key = NANO_API_KEY
        self.nb_url = "https://api.nanobanana.ai/v1/generate"
        self.horde_key = HORDE_API_KEY
        self.horde_url = "https://aihorde.net/api/v2"

    async def _try_pollinations(self, prompt: str) -> Optional[BytesIO]:
        url = f"https://image.pollinations.ai/prompt/{quote(prompt)}?width=512&height=512"
        try:
            async with aiohttp.ClientSession() as s:
                async with s.get(url, timeout=15) as r:
                    if r.status == 200:
                        return BytesIO(await r.read())
        except Exception as e:
            print(f"‚ö†Ô∏è pollinations error: {e}")
        return None

    async def _try_nanobanana(self, prompt: str) -> Optional[BytesIO]:
        if not self.nb_key:
            return None
        payload = {
            "prompt": prompt,
            "model": "sdxl",
            "width": 512,
            "height": 512,
            "steps": 20,
            "cfg_scale": 7.0
        }
        headers = {"Authorization": f"Bearer {self.nb_key}", "Content-Type": "application/json"}
        try:
            async with aiohttp.ClientSession() as s:
                async with s.post(self.nb_url, json=payload, headers=headers, timeout=40) as r:
                    if r.status == 200:
                        data = await r.json()
                        img_url = data.get("image_url")
                        if img_url:
                            async with s.get(img_url, timeout=20) as ir:
                                if ir.status == 200:
                                    return BytesIO(await ir.read())
        except Exception as e:
            print(f"‚ö†Ô∏è nanobanana error: {e}")
        return None

    async def send_illustration(self, bot: Bot, chat_id: int, situation: str, answer: Optional[str] = None) -> bool:
        """
        –¢–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å:
        1) –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (—á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π video_gen).
        2) –ï—Å–ª–∏ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.
        3) –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø–æ–ø—ã—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å –ø–æ–º–µ—Ç–∫–æ–π.
        """
        if not answer:
            await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞.")
            return False

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ (—Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ –≤ GameVideoGenerator)
        video_prompt = create_video_prompt(situation, answer)

        # –ü–æ–ø—ã—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ video_gen (–≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä video_gen)
        try:
            # video_gen –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤–Ω–∏–∑—É –º–æ–¥—É–ª—è: video_gen = GameVideoGenerator()
            video_url = None
            if 'video_gen' in globals():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ ‚Äî —Å–¥–µ–ª–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–¥–µ—Å—å)
                video_url = await video_gen._try_hailuo_video(video_prompt)
            else:
                print("‚ö†Ô∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π video_gen –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–∏–¥–µ–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            video_url = None

        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ‚Äî —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if video_url:
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(video_url, timeout=60) as response:
                        if response.status == 200:
                            video_bytes = await response.read()
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ video
                            await bot.send_video(
                                chat_id,
                                video=BufferedInputFile(file=BytesIO(video_bytes), filename="game_video.mp4"),
                                caption=f"üé¨ {answer}",
                                duration=6,
                                width=720,
                                height=720
                            )
                            print(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                            return True
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: HTTP {response.status}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")

        # --- –§–æ–ª–±—ç–∫: –¥–µ–ª–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏–≥—Ä–∞ –Ω–µ –ª–æ–º–∞–ª–∞—Å—å ---
        print("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—á–Ω—É—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é (fallback).")
        prompt = create_prompt(situation, answer)
        tasks = [
            self._try_pollinations(prompt),
            self._try_nanobanana(prompt),
        ]
        for future in asyncio.as_completed(tasks):
            try:
                img_buf = await future
                if img_buf:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–µ—Ç–∫–æ–π, —á—Ç–æ –≤–∏–¥–µ–æ–≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                    try:
                        await bot.send_photo(
                            chat_id,
                            photo=BufferedInputFile(file=BytesIO(img_buf.read()), filename="game_scene.jpg"),
                            caption="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é."
                        )
                    except Exception:
                        # –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ aiogram –ø—Ä–∏–Ω–∏–º–∞—é—Ç –ø—Ä–æ—Å—Ç–æ bytes/BytesIO
                        await bot.send_photo(chat_id, photo=img_buf)
                    return True
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è fallback-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                continue

        # –ï—Å–ª–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –≤–∏–¥–µ–æ, –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.")
        return False
# ========== –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã ==========
gen = GameImageGenerator()
video_gen = GameVideoGenerator()
