# game_utils.py ‚Äî –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å create_prompt, _load_list –∏ send_illustration –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
import os
import json
import random
from pathlib import Path
from typing import List, Optional
from io import BytesIO
import asyncio
import aiohttp
from urllib.parse import quote
from dotenv import load_dotenv
from aiogram import Bot
from aiogram.types import BufferedInputFile
# ========== –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π ==========
load_dotenv()
NANO_API_KEY = os.getenv("NANO_API_KEY")
HORDE_API_KEY = os.getenv("HORDE_API_KEY")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")
# ========== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ ==========
def create_prompt(situation: str, answer: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–æ–º."""
    
    def translate_to_english(text: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É."""
        if any(ord(c) > 127 for c in text):  # –µ—Å—Ç—å —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            try:
                from googletrans import Translator
                translator = Translator()
                result = translator.translate(text, dest='en').text
                return result
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                return text  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
        return text
    
    # –û—á–∏—â–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –æ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤
    situation_clean = situation.replace("_____", "").replace("____", "").strip()
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    situation_en = translate_to_english(situation_clean)
    answer_en = translate_to_english(answer.strip())
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è —Å—Ü–µ–Ω—ã
    situation_lower = situation.lower()
    if "—É—Ç—Ä" in situation_lower or "morning" in situation_en.lower():
        scene_setting = "morning scene with natural sunlight"
    elif "–≤–µ—á–µ—Ä" in situation_lower or "evening" in situation_en.lower():
        scene_setting = "evening indoor scene with warm lighting"
    elif "—Ä–∞–±–æ—Ç" in situation_lower or "–æ—Ñ–∏—Å" in situation_lower or "work" in situation_en.lower():
        scene_setting = "office environment"
    elif "–¥–æ–º" in situation_lower or "home" in situation_en.lower():
        scene_setting = "cozy home interior"
    elif "–∫—É—Ö–Ω" in situation_lower or "kitchen" in situation_en.lower():
        scene_setting = "modern kitchen setting"
    else:
        scene_setting = "realistic everyday scene"
    
    # –°–æ–∑–¥–∞—ë–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    scene_description = f"Professional photograph of {answer_en} in {scene_setting}, related to: {situation_en}"
    
    # –°—Ç–∏–ª–µ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º–∞
    style_modifiers = [
        "photorealistic",
        "high quality photography", 
        "professional lighting",
        "sharp focus",
        "natural colors",
        "realistic details",
        "documentary style",
        "authentic moment",
        "clear composition",
        "lifelike textures"
    ]
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    final_prompt = f"{scene_description}, {', '.join(style_modifiers)}"
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"üìù [–°–∏—Ç—É–∞—Ü–∏—è] {situation}")
    print(f"üìù [–û—Ç–≤–µ—Ç] {answer}")
    print(f"üìù [–ü–µ—Ä–µ–≤–æ–¥ —Å–∏—Ç—É–∞—Ü–∏–∏] {situation_en}")
    print(f"üìù [–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞] {answer_en}")
    print(f"üìù [–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç] {final_prompt}")
    
    return final_prompt
# ========== –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–æ–¥ ==========
class DeckManager:
    def __init__(self, situations_file: str = "situations.json", answers_file: str = "answers.json"):
        self.base_dir = Path(__file__).resolve().parent
        self.sit_path = (self.base_dir / situations_file).resolve()
        self.ans_path = (self.base_dir / answers_file).resolve()
        self.situations: List[str] = self._load_list(self.sit_path, "situations")
        self.answers: List[str] = self._load_list(self.ans_path, "answers")
    def _load_list(self, file_path: Path, label: str) -> List[str]:
        # –í—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –≥–¥–µ –æ–Ω
        print(f"üîç Loading '{label}' from {file_path} (exists={file_path.exists()})")
        for enc in ("utf-8-sig", "utf-8"):
            try:
                with open(file_path, "r", encoding=enc) as f:
                    data = json.load(f)
                if isinstance(data, list):
                    print(f"‚úÖ –ö–æ–ª–æ–¥–∞ '{label}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({enc}): {len(data)} items")
                    return data
                else:
                    print(f"‚ö†Ô∏è {file_path} ({label}) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON-—Å–ø–∏—Å–æ–∫")
                    return []
            except FileNotFoundError:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return []
            except UnicodeDecodeError as e:
                print(f"‚ö†Ô∏è –ö–æ–¥–∏—Ä–æ–≤–∫–∞ {enc} –Ω–µ –ø–æ–¥–æ—à–ª–∞: {e}")
            except json.JSONDecodeError as e:
                print(f"‚ùå JSON –æ—à–∏–±–∫–∞ ({enc}) –≤ {file_path}: {e}")
                return []
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ({enc}) –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å '{label}' –∏–∑ {file_path} –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
        return []
    def get_random_situation(self) -> str:
        return random.choice(self.situations) if self.situations else "–ï—Å–ª–∏ –±—ã –Ω–µ ____, —è –±—ã –±—Ä–æ—Å–∏–ª –ø–∏—Ç—å."
    def get_new_shuffled_answers_deck(self) -> List[str]:
        deck = self.answers.copy()
        random.shuffle(deck)
        return deck
decks = DeckManager()
# ========== –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ==========
class GameImageGenerator:
    def __init__(self):
        self.nb_key = NANO_API_KEY
        self.nb_url = "https://api.nanobanana.ai/v1/generate"
        self.horde_key = HORDE_API_KEY
        self.horde_url = "https://aihorde.net/api/v2"
    async def _try_pollinations(self, prompt: str) -> Optional[BytesIO]:
        url = f"https://image.pollinations.ai/prompt/{quote(prompt)}?width=512&height=512"
        try:
            async with aiohttp.ClientSession() as s:
                async with s.get(url, timeout=15) as r:
                    if r.status == 200:
                        return BytesIO(await r.read())
        except:
            pass
        return None
    async def _try_nanobanana(self, prompt: str) -> Optional[BytesIO]:
        if not self.nb_key:
            return None
        payload = {
            "prompt": prompt,
            "model": "sdxl",
            "width": 512,
            "height": 512,
            "steps": 20,
            "cfg_scale": 7.0
        }
        headers = {"Authorization": f"Bearer {self.nb_key}", "Content-Type": "application/json"}
        try:
            async with aiohttp.ClientSession() as s:
                async with s.post(self.nb_url, json=payload, headers=headers, timeout=40) as r:
                    if r.status == 200:
                        data = await r.json()
                        img_url = data.get("image_url")
                        if img_url:
                            async with s.get(img_url, timeout=20) as ir:
                                if ir.status == 200:
                                    return BytesIO(await ir.read())
        except:
            pass
        return None
    async def send_illustration(self, bot: Bot, chat_id: int, situation: str, answer: Optional[str] = None) -> bool:
        if not answer:
            await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return False
        prompt = create_prompt(situation, answer)
        tasks = [
            self._try_pollinations(prompt),
            self._try_nanobanana(prompt),
        ]
        for future in asyncio.as_completed(tasks):
            try:
                img_buf = await future
                if img_buf:
                    await bot.send_photo(
                        chat_id,
                        photo=BufferedInputFile(file=img_buf.read(), filename="game_scene.jpg")
                    )
                    return True
            except:
                continue
        await bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.")
        return False
gen = GameImageGenerator()
