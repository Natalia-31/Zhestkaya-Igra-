# game_utils.py
import os
import json
import random
from pathlib import Path
from typing import List, Optional, Tuple
import asyncio
import aiohttp
from dotenv import load_dotenv
import google.generativeai as genai
from gigachat_utils import gigachat_generator  # –ò–º–ø–æ—Ä—Ç GigaChat

# ====== –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π ======
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

# –ú–æ–¥–µ–ª—å Gemini –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (—à—É—Ç–∫–∏)
gemini_text_model = genai.GenerativeModel("gemini-2.5-flash-lite-preview-09-2025")

# ====== –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–ª–æ–¥ ======
class DeckManager:
    def __init__(self, situations_file: str = "situations.json", answers_file: str = "answers.json", base: Path | None = None):
        self.base_dir = base or Path(__file__).resolve().parent
        self.sit_path = (self.base_dir / situations_file).resolve()
        self.ans_path = (self.base_dir / answers_file).resolve()
        self.situations: List[str] = self._load_list(self.sit_path, "situations")
        self.answers: List[str]    = self._load_list(self.ans_path, "answers")

    def _load_list(self, file_path: Path, label: str) -> List[str]:
        for enc in ("utf-8-sig", "utf-8"):
            try:
                data = json.loads(file_path.read_text(encoding=enc))
                if isinstance(data, list):
                    seen, out = set(), []
                    for x in data:
                        if isinstance(x, str):
                            x = x.strip()
                            if x and x not in seen:
                                seen.add(x)
                                out.append(x)
                    return out
                return []
            except (FileNotFoundError, json.JSONDecodeError, UnicodeDecodeError):
                continue
        return []

    def get_random_situation(self) -> str:
        return random.choice(self.situations) if self.situations else "–¢–µ—Å—Ç–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"

    def get_new_shuffled_answers_deck(self) -> List[str]:
        deck = list(self.answers)
        random.shuffle(deck)
        return deck
    
    # ====== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–π ======
    def get_all_situations(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
        """
        return list(self.situations)
    
    def get_random_from_list(self, situations_list: List[str]) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        """
        return random.choice(situations_list) if situations_list else "–¢–µ—Å—Ç–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"
    # ====== –ö–û–ù–ï–¶ –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ======

# ====== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ======

async def generate_gigachat_image(situation: str, answer: str) -> Optional[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GigaChat + Kandinsky 3.1
    """
    try:
        print(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ GigaChat + Kandinsky 3.1...")
        
        # –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ üëá
        prompt = (
            f"–°–æ–∑–¥–∞–π —è—Ä–∫—É—é –∫–æ–º–∏—á–Ω—É—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã '–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞'. "
            f"–ò–≥—Ä–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: '{situation}'. "
            f"–û—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞: '{answer}'. "
            f"–í–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–º-–∞—Ä—Ç, —Å–æ—á–Ω—ã–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞, "
            f"–∑–∞–±–∞–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏, –∞–±—Å—É—Ä–¥–Ω—ã–π —é–º–æ—Ä. "
            f"–ö–æ–º–ø–æ–∑–∏—Ü–∏—è: –¥–∏–Ω–∞–º–∏—á–Ω–∞—è, —Å —á–µ—Ç–∫–∏–º —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏. "
            f"–ö–†–ò–¢–ò–ß–ù–û: –ë–ï–ó —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏!"
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º GigaChat
        image_path = await asyncio.to_thread(
            gigachat_generator.generate_image,
            prompt
        )
        
        if image_path:
            print(f"‚úÖ GigaChat —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return image_path
        else:
            print("‚ö†Ô∏è GigaChat –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat: {e}")
        return None

async def generate_pollinations_image(situation: str, answer: str) -> Optional[str]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pollinations.ai (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
    """
    prompt = (
        f"Cartoon style card for a Russian Telegram game '–ñ–µ—Å—Ç–∫–∞—è –∏–≥—Ä–∞': Situation: {situation}, "
        f"Player's answer: {answer}. Minimalism, humor, bold lines, no text overlay."
    )
    url = "https://api.pollinations.ai/prompt"
    params = {"prompt": prompt}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=20) as resp:
                if resp.status == 200:
                    print(f"‚úÖ Pollinations –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    return str(resp.url)
    except Exception as e:
        print(f"‚ö†Ô∏è Pollinations error: {e}")
    return None

async def generate_card_joke(situation: str, answer: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à—É—Ç–∫—É —á–µ—Ä–µ–∑ Gemini
    """
    if not gemini_text_model:
        return f"–°–∏—Ç—É–∞—Ü–∏—è: {situation} | –û—Ç–≤–µ—Ç: {answer}"
    
    prompt = (
        f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Å–º–µ—à–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã.\n"
        f"–°–∏—Ç—É–∞—Ü–∏—è: {situation}\n"
        f"–û—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞: {answer}\n"
        "–§–æ—Ä–º–∞—Ç: —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ–º, –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏, –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    )
    try:
        response = await asyncio.to_thread(gemini_text_model.generate_content, prompt)
        return response.text.strip()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—É—Ç–∫–∏: {e}")
        return "üòÖ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à—É—Ç–∫—É."

async def generate_card_content(situation: str, answer: str) -> Tuple[Optional[str], str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —à—É—Ç–∫—É
    
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
    1. GigaChat + Kandinsky 3.1 ‚úÖ
    2. Pollinations.ai (–∑–∞–ø–∞—Å–Ω–æ–π)
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—É—Ç–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    joke_task = asyncio.create_task(generate_card_joke(situation, answer))
    
    # 1. –ü—Ä–æ–±—É–µ–º GigaChat
    image_result = await generate_gigachat_image(situation, answer)
    
    if not image_result:
        # 2. –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Pollinations...")
        image_result = await generate_pollinations_image(situation, answer)
    
    joke_text = await joke_task
    
    return image_result, joke_text

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–ª–æ–¥
decks = DeckManager(base=Path(__file__).resolve().parent)
