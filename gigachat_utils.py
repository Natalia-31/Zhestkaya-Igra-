# gigachat_utils.py
import os
import uuid
import requests
import re
import hashlib
import time
from typing import Optional
from dotenv import load_dotenv
import warnings
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
warnings.filterwarnings('ignore', message='Unverified HTTPS request')

load_dotenv()

GIGACHAT_AUTH_KEY = os.getenv("GIGACHAT_AUTH_KEY")

class GigaChatImageGenerator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ GigaChat + Kandinsky 3.1
    """
    
    def __init__(self):
        self.access_token = None
        self.token_expiry = 0
        self.token_url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        self.chat_url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
        self.files_url = "https://gigachat.devices.sberbank.ru/api/v1/files"
        
        # –°–æ–∑–¥–∞–µ–º session —Å retry-–º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        self.session = self._create_retry_session()
    
    def _create_retry_session(self, retries=3, backoff_factor=1.0):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        """
        session = requests.Session()
        
        retry_strategy = Retry(
            total=retries,
            backoff_factor=backoff_factor,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["HEAD", "GET", "POST", "PUT", "DELETE", "OPTIONS", "TRACE"]
        )
        
        adapter = HTTPAdapter(max_retries=retry_strategy)
        session.mount("http://", adapter)
        session.mount("https://", adapter)
        
        return session
    
    def _get_access_token(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ access token –¥–ª—è GigaChat API
        """
        try:
            if not GIGACHAT_AUTH_KEY:
                print("‚ùå GIGACHAT_AUTH_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
                return None
            
            headers = {
                "Authorization": f"Basic {GIGACHAT_AUTH_KEY}",
                "RqUID": str(uuid.uuid4()),
                "Content-Type": "application/x-www-form-urlencoded"
            }
            
            data = {
                "scope": "GIGACHAT_API_PERS"
            }
            
            response = self.session.post(
                self.token_url,
                headers=headers,
                data=data,
                verify=False,
                timeout=(10, 15)
            )
            
            if response.status_code == 200:
                result = response.json()
                self.access_token = result["access_token"]
                self.token_expiry = time.time() + 1740  # 29 –º–∏–Ω—É—Ç
                print(f"‚úÖ GigaChat —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                return self.access_token
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat auth: {e}")
            return None
    
    def _ensure_token(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        """
        if not self.access_token or time.time() >= self.token_expiry:
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ GigaChat...")
            return self._get_access_token() is not None
        return True
    
    def _clean_prompt(self, prompt: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –æ—Ç —Å–ª–æ–≤, –≤—ã–∑—ã–≤–∞—é—â–∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
        
        Args:
            prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —É–∫–∞–∑–∞–Ω–∏—è–º–∏
        """
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞
        clean = prompt.replace("–∫–∞—Ä—Ç–∞", "—Å–∏—Ç—É–∞—Ü–∏—è")
        clean = clean.replace("–ö–∞—Ä—Ç–∞", "–°–∏—Ç—É–∞—Ü–∏—è")
        clean = clean.replace("–∫–∞—Ä—Ç—É", "—Å–∏—Ç—É–∞—Ü–∏—é")
        clean = clean.replace("–∏–≥—Ä–∞", "—Å—Ü–µ–Ω–∞")
        clean = clean.replace("–ò–≥—Ä–∞", "–°—Ü–µ–Ω–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        negative_prompt = ". –í–ê–ñ–ù–û: –ë–ï–ó –∏–≥—Ä–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç, –ë–ï–ó –ø–æ–∫–µ—Ä–∞, –ë–ï–ó –∫–∞—Ä—Ç–æ—á–µ–∫, –ë–ï–ó —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –ë–ï–ó –Ω–∞–¥–ø–∏—Å–µ–π. –ü—Ä–æ—Å—Ç–∞—è —è—Ä–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å—Ç–∏–ª–µ –º–µ–º–∞"
        
        return clean + negative_prompt
    
    def generate_image(self, prompt: str, max_attempts=2) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GigaChat + Kandinsky 3.1
        
        Args:
            prompt: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        for attempt in range(max_attempts):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
                if not self._ensure_token():
                    return None
                
                # –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–ø—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª–æ–≤
                clean_prompt = self._clean_prompt(prompt)
                
                print(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ GigaChat + Kandinsky (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})...")
                print(f"   –ü—Ä–æ–º–ø—Ç: {clean_prompt[:100]}...")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                headers = {
                    "Authorization": f"Bearer {self.access_token}",
                    "Content-Type": "application/json"
                }
                
                data = {
                    "model": "GigaChat",
                    "messages": [
                        {
                            "role": "system",
                            "content": "–¢—ã —Ö—É–¥–æ–∂–Ω–∏–∫-–∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–µ–º–æ–≤. –ù–ï —Ä–∏—Å—É–π –∏–≥—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã, –ø–æ–∫–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã, –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö. –°–æ–∑–¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç—ã–µ —è—Ä–∫–∏–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å—Ç–∏–ª–µ –º–µ–º–æ–≤."
                        },
                        {
                            "role": "user",
                            "content": f"–ù–∞—Ä–∏—Å—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {clean_prompt}"
                        }
                    ],
                    "function_call": "auto"
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout
                response = self.session.post(
                    self.chat_url,
                    headers=headers,
                    json=data,
                    verify=False,
                    timeout=(15, 90)  # connect: 15s, read: 90s
                )
                
                if response.status_code != 200:
                    print(f"‚ö†Ô∏è GigaChat –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    
                    if attempt == max_attempts - 1:
                        return None
                    
                    print(f"   –û–∂–∏–¥–∞–Ω–∏–µ {(attempt + 1) * 3} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    time.sleep((attempt + 1) * 3)
                    continue
                
                result = response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                content = result["choices"][0]["message"]["content"]
                
                # –ò—â–µ–º file_id –≤ –æ—Ç–≤–µ—Ç–µ
                file_id_match = re.search(r'<img src="([^"]+)"', content)
                
                if not file_id_match:
                    print("‚ö†Ô∏è GigaChat –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    print(f"   –û—Ç–≤–µ—Ç: {content}")
                    
                    if attempt == max_attempts - 1:
                        return None
                    
                    time.sleep((attempt + 1) * 3)
                    continue
                
                file_id = file_id_match.group(1)
                print(f"üìé –ü–æ–ª—É—á–µ–Ω file_id: {file_id}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_url = f"{self.files_url}/{file_id}/content"
                image_response = self.session.get(
                    image_url,
                    headers=headers,
                    verify=False,
                    timeout=(10, 30)
                )
                
                if image_response.status_code == 200:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    file_hash = hashlib.md5(prompt.encode()).hexdigest()[:10]
                    temp_path = f"temp_gigachat_{file_hash}.jpg"
                    
                    with open(temp_path, 'wb') as f:
                        f.write(image_response.content)
                    
                    print(f"‚úÖ GigaChat –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_path}")
                    return temp_path
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_response.status_code}")
                    
                    if attempt == max_attempts - 1:
                        return None
                    
                    time.sleep((attempt + 1) * 3)
                    continue
                    
            except requests.exceptions.ReadTimeout:
                print(f"‚è±Ô∏è Timeout –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{max_attempts}")
                if attempt == max_attempts - 1:
                    print("‚ùå GigaChat: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    return None
                print(f"   –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {(attempt + 1) * 5} —Å–µ–∫—É–Ω–¥...")
                time.sleep((attempt + 1) * 5)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                if attempt == max_attempts - 1:
                    import traceback
                    traceback.print_exc()
                    return None
                time.sleep((attempt + 1) * 3)
        
        return None

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
gigachat_generator = GigaChatImageGenerator()
