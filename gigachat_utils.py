# gigachat_utils.py
import os
import base64
import uuid
import requests
from typing import Optional
from dotenv import load_dotenv

load_dotenv()

GIGACHAT_CLIENT_ID = os.getenv("GIGACHAT_CLIENT_ID")
GIGACHAT_CLIENT_SECRET = os.getenv("GIGACHAT_CLIENT_SECRET")

class GigaChatImageGenerator:
    def __init__(self):
        self.access_token = None
        self.token_url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        self.chat_url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
        self.files_url = "https://gigachat.devices.sberbank.ru/api/v1/files"
    
    def _get_access_token(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ access token –¥–ª—è GigaChat API"""
        try:
            # –°–æ–∑–¥–∞–µ–º Basic Auth —Ç–æ–∫–µ–Ω
            credentials = f"{GIGACHAT_CLIENT_ID}:{GIGACHAT_CLIENT_SECRET}"
            encoded_credentials = base64.b64encode(credentials.encode()).decode()
            
            headers = {
                "Authorization": f"Basic {encoded_credentials}",
                "RqUID": str(uuid.uuid4()),
                "Content-Type": "application/x-www-form-urlencoded"
            }
            
            data = {
                "scope": "GIGACHAT_API_PERS"
            }
            
            response = requests.post(
                self.token_url,
                headers=headers,
                data=data,
                verify=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL (–Ω—É–∂–Ω–æ –¥–ª—è GigaChat)
            )
            
            if response.status_code == 200:
                self.access_token = response.json()["access_token"]
                print(f"‚úÖ GigaChat —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                return self.access_token
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat auth: {e}")
            return None
    
    def generate_image(self, prompt: str) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GigaChat + Kandinsky
        
        Args:
            prompt: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not self.access_token:
                if not self._get_access_token():
                    return None
            
            print(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ GigaChat...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            headers = {
                "Authorization": f"Bearer {self.access_token}",
                "Content-Type": "application/json"
            }
            
            data = {
                "model": "GigaChat",
                "messages": [
                    {
                        "role": "user",
                        "content": f"–ù–∞—Ä–∏—Å—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {prompt}"
                    }
                ],
                "function_call": "auto"
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                self.chat_url,
                headers=headers,
                json=data,
                verify=False,
                timeout=30
            )
            
            if response.status_code != 200:
                print(f"‚ö†Ô∏è GigaChat –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}")
                return None
            
            result = response.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            content = result["choices"][0]["message"]["content"]
            
            # –ò—â–µ–º file_id –≤ –æ—Ç–≤–µ—Ç–µ (—Ñ–æ—Ä–º–∞—Ç: <img src="file_id"/>)
            import re
            file_id_match = re.search(r'<img src="([^"]+)"', content)
            
            if not file_id_match:
                print("‚ö†Ô∏è GigaChat –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return None
            
            file_id = file_id_match.group(1)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_url = f"{self.files_url}/{file_id}/content"
            image_response = requests.get(
                image_url,
                headers=headers,
                verify=False
            )
            
            if image_response.status_code == 200:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                import hashlib
                file_hash = hashlib.md5(prompt.encode()).hexdigest()[:10]
                temp_path = f"temp_gigachat_{file_hash}.jpg"
                
                with open(temp_path, 'wb') as f:
                    f.write(image_response.content)
                
                print(f"‚úÖ GigaChat –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_path}")
                return temp_path
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return None

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
gigachat_generator = GigaChatImageGenerator()
