import random
from pathlib import Path
from typing import Optional
from PIL import Image, ImageDraw, ImageFont

import openai
import os

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ .env, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ:
# from dotenv import load_dotenv; load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")

# –ü—É—Ç–∏
BASE_DIR = Path(__file__).parent
FONT_PATH = BASE_DIR / "arial.ttf"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ –ª—é–±–æ–π –∫—Ä–∞—Å–∏–≤—ã–π —à—Ä–∏—Ñ—Ç

# üé® –ü–∞–ª–∏—Ç—Ä—ã (—Ñ–æ–Ω + –∞–∫—Ü–µ–Ω—Ç—ã)
PALETTES = [
    ((30, 30, 30), (255, 20, 147)),   # —á—ë—Ä–Ω—ã–π —Ñ–æ–Ω + —Ä–æ–∑–æ–≤—ã–π –Ω–µ–æ–Ω
    ((20, 20, 40), (0, 255, 200)),    # —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω + –±–∏—Ä—é–∑–∞
    ((255, 240, 200), (255, 80, 80)), # –ø–∞—Å—Ç–µ–ª—å + –∫—Ä–∞—Å–Ω—ã–π
    ((240, 240, 240), (0, 0, 0)),     # –±–µ–ª—ã–π —Ñ–æ–Ω + —á—ë—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
]

# üé≠ –≠–º–æ–¥–∑–∏ –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è
EMOJIS = ["üòÇ", "üî•", "üé≠", "üç∑", "üëë", "üí•", "ü§Ø", "‚ú®"]

def generate_image_file(situation: str, answer: str, out_path: Path) -> Optional[Path]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–æ—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–≥—Ä—ã —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ Pillow.
    """
    try:
        out_path.parent.mkdir(parents=True, exist_ok=True)

        # üé® –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É
        bg_color, accent_color = random.choice(PALETTES)

        # –°–æ–∑–¥–∞—ë–º —Ñ–æ–Ω
        img = Image.new("RGB", (1024, 1024), color=bg_color)
        draw = ImageDraw.Draw(img)

        # –®—Ä–∏—Ñ—Ç—ã
        try:
            font_title = ImageFont.truetype(str(FONT_PATH), 60)
            font_body = ImageFont.truetype(str(FONT_PATH), 42)
        except IOError:
            font_title = ImageFont.load_default()
            font_body = ImageFont.load_default()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_text = f"–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞ {random.choice(EMOJIS)}"
        draw.text((40, 40), title_text, fill=accent_color, font=font_title)

        # –û–±—ë—Ä—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        def wrap(text: str, width: int = 25):
            words, lines, buf = text.split(), [], []
            for w in words:
                buf.append(w)
                if len(" ".join(buf)) > width:
                    lines.append(" ".join(buf[:-1]))
                    buf = [w]
            if buf:
                lines.append(" ".join(buf))
            return lines

        y = 180
        draw.text((40, y), "üé≠ –°–∏—Ç—É–∞—Ü–∏—è:", fill=accent_color, font=font_body)
        y += 60
        for line in wrap(situation):
            draw.text((60, y), line, fill=(255, 255, 255), font=font_body)
            y += 50

        y += 40
        draw.text((40, y), "üëâ –û—Ç–≤–µ—Ç:", fill=accent_color, font=font_body)
        y += 60
        for line in wrap(answer):
            draw.text((60, y), line, fill=(255, 255, 255), font=font_body)
            y += 50

        # –£–∫—Ä–∞—à–∞–µ–º —Ä–∞–º–∫–æ–π
        draw.rectangle([20, 20, 1004, 1004], outline=accent_color, width=10)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        img.save(out_path)
        return out_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        return None

def generate_image_openai(situation: str, answer: str, save_path: Optional[Path] = None, size: str = "1024x1024") -> Optional[str]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ OpenAI —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏/–æ—Ç–≤–µ—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ª–∏–±–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –µ—Å–ª–∏ —Å–∫–∞—á–∞–Ω–æ.
    """
    prompt = f"–°–∏—Ç—É–∞—Ü–∏—è: {situation}. –û—Ç–≤–µ—Ç: {answer}. –°—Ç–∏–ª—å –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã, –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ."
    try:
        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size=size
        )
        image_url = response['data'][0]['url']
        if save_path:
            import requests
            img_data = requests.get(image_url).content
            save_path.parent.mkdir(parents=True, exist_ok=True)
            with open(save_path, 'wb') as handler:
                handler.write(img_data)
            return str(save_path)
        return image_url
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenAI: {e}")
        return None
