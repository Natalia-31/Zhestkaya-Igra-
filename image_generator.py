import requests
import google.generativeai as genai
import urllib.parse
import time
import random

# 1. –ö–ª—é—á Gemini (Google AI Studio)
GEMINI_API_KEY = "AIzaSyB8Bnk0wR1aKA4tNSjhdtzGJZQ6gmlGGB8"
genai.configure(api_key=GEMINI_API_KEY)

# –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî Gemini 2.5 Flash Lite
gemini_model = genai.GenerativeModel("gemini-2.5-flash-lite-preview-09-2025")

# 2. –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
def refine_visual_prompt(situation, answer):
    prompt = (
        f"Situation: {situation}. Player answer: {answer}. "
        f"Create short English scene description for image generation. "
        f"Focus: character, action, atmosphere. Style: cartoon, board game art, minimalism. "
        f"Output only scene description, maximum 15 words."
    )
    try:
        response = gemini_model.generate_content(prompt)
        text = response.text.strip() if response and response.text else ""
        if not text or len(text) > 200:
            text = f"Cartoon board game illustration, {situation}, {answer}"
        return text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Gemini: {e}")
        return f"Cartoon board game illustration, {situation}, {answer}"

# 3. –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ Pollinations —Å retry –ª–æ–≥–∏–∫–æ–π
def generate_pollinations_image(situation, answer, max_retries=3):
    visual_prompt = refine_visual_prompt(situation, answer)
    print(f"[Visual prompt]: {visual_prompt}")

    # –ö–æ–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è URL
    encoded_prompt = urllib.parse.quote(visual_prompt)

    # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã API endpoints
    endpoints = [
        f"https://image.pollinations.ai/prompt/{encoded_prompt}",
        f"https://image.pollinations.ai/prompt/{encoded_prompt}?width=512&height=512",
        f"https://image.pollinations.ai/prompt/{encoded_prompt}?model=flux&width=512&height=512"
    ]

    for attempt in range(max_retries):
        for endpoint in endpoints:
            try:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {endpoint[:80]}...")
                if attempt > 0:
                    time.sleep(random.uniform(2, 5))
                response = requests.get(endpoint, timeout=30)
                if response.status_code == 200:
                    content_type = response.headers.get("content-type", "")
                    if "image" in content_type:
                        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ")
                        return endpoint
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {content_type}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
            except requests.exceptions.Timeout:
                print("‚è∞ –¢–∞–π–º–∞—É—Ç")
            except requests.exceptions.RequestException as e:
                print(f"üî¥ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
            except Exception as e:
                print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if attempt < max_retries - 1:
            wait = (attempt + 1) * 5
            print(f"‚è≥ –ñ–¥—ë–º {wait} —Å–µ–∫")
            time.sleep(wait)
    print("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
    return None

# 4. Fallback –Ω–∞ Craiyon –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
def generate_fallback_image(situation, answer):
    visual_prompt = refine_visual_prompt(situation, answer)
    try:
        url = "https://api.craiyon.com/v3"
        payload = {"prompt": visual_prompt, "model": "art", "negative_prompt": ""}
        resp = requests.post(url, json=payload, timeout=60)
        if resp.status_code == 200:
            imgs = resp.json().get("images", [])
            if imgs:
                return f"data:image/jpeg;base64,{imgs[0]}"
    except Exception as e:
        print(f"‚ùå Fallback –æ—à–∏–±–∫–∞: {e}")
    return None

def generate_image_with_fallback(situation, answer):
    img = generate_pollinations_image(situation, answer)
    if not img:
        print("üîÑ Fallback –Ω–∞ Craiyon")
        img = generate_fallback_image(situation, answer)
    return img

def generate_card_joke(situation, answer):
    prompt = (
        f"–ü—Ä–∏–¥—É–º–∞–π —à—É—Ç–∫—É –¥–ª—è —Å–∏—Ç—É–∞—Ü–∏–∏: '{situation}', –æ—Ç–≤–µ—Ç: '{answer}'. "
        "–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π, —Ñ–æ—Ä–º–∞—Ç –º–µ–º–∞, –¥–æ 2 —Å—Ç—Ä–æ–∫."
    )
    try:
        resp = gemini_model.generate_content(prompt)
        joke = resp.text.strip() if resp and resp.text else "¬Ø\\_(„ÉÑ)_/¬Ø"
        print("[Gemini] Joke:", joke)
        return joke
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —à—É—Ç–∫–∏: {e}")
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ —ç—Ç–æ —Ç–æ–∂–µ —Å–º–µ—à–Ω–æ! üòÖ"

def generate_card_content(situation, answer):
    return generate_image_with_fallback(situation, answer), generate_card_joke(situation, answer)

if __name__ == "__main__":
    sit = "–í–∞—Å –Ω–∞ —Å–≤–∞–¥—å–±–µ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –º–∞–∫–∞—Ä–µ–Ω—É –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ –≥–æ—Å—Ç—è–º–∏"
    ans = "–Ø –æ—Ç–∫–ª–æ–Ω—è—é—Å—å –Ω–∞–∑–∞–¥ –∏ –≥–æ–≤–æ—Ä—é, —á—Ç–æ —ç—Ç–æ —Ç—Ä–∞–¥–∏—Ü–∏—è –º–æ–µ–≥–æ –Ω–∞—Ä–æ–¥–∞"
    img_url, joke = generate_card_content(sit, ans)
    print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", img_url)
    print("–®—É—Ç–∫–∞:", joke)
