import random
from pathlib import Path
from typing import Optional
from PIL import Image, ImageDraw, ImageFont
import requests
import base64
import os

# –ü—É—Ç–∏
BASE_DIR = Path(__file__).parent
FONT_PATH = BASE_DIR / "arial.ttf"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —à—Ä–∏—Ñ—Ç
GENERATED_DIR = BASE_DIR / "generated_images"
GENERATED_DIR.mkdir(exist_ok=True)

# üé® –ü–∞–ª–∏—Ç—Ä—ã (—Ñ–æ–Ω + –∞–∫—Ü–µ–Ω—Ç—ã)
PALETTES = [
    ((30, 30, 30), (255, 20, 147)),   # —á—ë—Ä–Ω—ã–π —Ñ–æ–Ω + —Ä–æ–∑–æ–≤—ã–π –Ω–µ–æ–Ω
    ((20, 20, 40), (0, 255, 200)),    # —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω + –±–∏—Ä—é–∑–∞
    ((255, 240, 200), (255, 80, 80)), # –ø–∞—Å—Ç–µ–ª—å + –∫—Ä–∞—Å–Ω—ã–π
    ((240, 240, 240), (0, 0, 0)),     # –±–µ–ª—ã–π —Ñ–æ–Ω + —á—ë—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
]

# üé≠ –≠–º–æ–¥–∑–∏ –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è
EMOJIS = ["üòÇ", "üî•", "üé≠", "üç∑", "üëë", "üí•", "ü§Ø", "‚ú®"]

# ‚û°Ô∏è Gemini (Google) API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY") or "–í–ê–®_API_–ö–õ–Æ–ß"
GEMINI_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent"

def wrap(text: str, width: int = 25) -> list[str]:
    words, lines, buf = text.split(), [], []
    for w in words:
        buf.append(w)
        if len(" ".join(buf)) > width:
            lines.append(" ".join(buf[:-1]))
            buf = [w]
    if buf:
        lines.append(" ".join(buf))
    return lines

def generate_image_file(situation: str, answer: str, out_path: Path) -> Optional[Path]:
    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Pillow, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    try:
        out_path.parent.mkdir(parents=True, exist_ok=True)
        bg_color, accent_color = random.choice(PALETTES)
        img = Image.new("RGB", (1024, 1024), color=bg_color)
        draw = ImageDraw.Draw(img)

        # –®—Ä–∏—Ñ—Ç—ã
        try:
            font_title = ImageFont.truetype(str(FONT_PATH), 60)
            font_body = ImageFont.truetype(str(FONT_PATH), 42)
        except IOError:
            font_title = ImageFont.load_default()
            font_body = ImageFont.load_default()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_text = f"–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞ {random.choice(EMOJIS)}"
        draw.text((40, 40), title_text, fill=accent_color, font=font_title)

        # –°–∏—Ç—É–∞—Ü–∏—è
        y = 160
        draw.text((40, y), "üé≠ –°–∏—Ç—É–∞—Ü–∏—è:", fill=accent_color, font=font_body)
        y += 60
        for line in wrap(situation):
            draw.text((60, y), line, fill=(255, 255, 255), font=font_body)
            y += 50

        # –û—Ç–≤–µ—Ç
        y += 40
        draw.text((40, y), "üëâ –û—Ç–≤–µ—Ç:", fill=accent_color, font=font_body)
        y += 60
        for line in wrap(answer):
            draw.text((60, y), line, fill=(255, 255, 255), font=font_body)
            y += 50

        draw.rectangle([20, 20, 1004, 1004], outline=accent_color, width=10)
        img.save(out_path)
        return out_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        return None

def generate_image_via_gemini(prompt: str) -> Optional[bytes]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gemini API (Google‚Äôs multimodal model)
    """
    headers = {
        "Content-Type": "application/json",
        "x-goog-api-key": GEMINI_API_KEY,
    }
    data = {
        "contents": [
            {
                "parts": [
                    {"text": prompt}
                ]
            }
        ]
    }
    try:
        r = requests.post(GEMINI_URL, headers=headers, json=data)
        r.raise_for_status()
        response_json = r.json()
        # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ ‚Äî –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, –Ω–∏–∂–µ —Ç–∏–ø–æ–≤–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
        # –†–∞—Å–ø–µ—á–∞—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
        # print(response_json)
        parts = response_json.get("candidates", [])[0]["content"]["parts"]
        for part in parts:
            if "inlineData" in part:
                img_b64 = part["inlineData"].get("data")
                if img_b64:
                    return base64.b64decode(img_b64)
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—è inlineData —Å base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Gemini –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return None

def create_card(situation: str, answer: str, use_api: bool = True) -> Optional[Path]:
    filename = f"{random.randint(0,999999)}.png"
    out_path = GENERATED_DIR / filename

    if use_api:
        # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π prompt –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        prompt = (
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π python base64 image –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π —Ä—É—Å—Å–∫–æ–π –∏–≥—Ä—ã, "
            f"—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '–ñ–µ—Å—Ç–∫–∞—è –ò–≥—Ä–∞', —Å–∏—Ç—É–∞—Ü–∏–µ–π: '{situation}', –æ—Ç–≤–µ—Ç–æ–º: '{answer}'. "
            "–°—Ç–∏–ª—å: —Ü–≤–µ—Ç–Ω–∞—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã, —Å–º–µ—à–Ω–æ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."
        )
        data = generate_image_via_gemini(prompt)
        if data:
            out_path.write_bytes(data)
            return out_path
        # fallback –Ω–∞ Pillow
    return generate_image_file(situation, answer, out_path)

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    situation = "–í–∞—Å –Ω–∞ —Å–≤–∞–¥—å–±–µ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –º–∞–∫–∞—Ä–µ–Ω—É –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ –≥–æ—Å—Ç—è–º–∏"
    answer = "–Ø –æ—Ç–∫–ª–æ–Ω—è—é—Å—å –Ω–∞–∑–∞–¥ –∏ –≥–æ–≤–æ—Ä—é, —á—Ç–æ —ç—Ç–æ —Ç—Ä–∞–¥–∏—Ü–∏—è –º–æ–µ–≥–æ –Ω–∞—Ä–æ–¥–∞"
    card_path = create_card(situation, answer, use_api=True)
    if card_path:
        print(f"–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {card_path}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É.")
