import aiohttp
from io import BytesIO
import google.generativeai as genai
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils import executor
from dotenv import load_dotenv

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π =====
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel("gemini-2.5-flash-lite-preview-09-2025")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç BytesIO
async def generate_pollinations_image_file(scene_description: str) -> BytesIO | None:
    url = "https://api.pollinations.ai/prompt"
    params = {"prompt": scene_description}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=20) as response:
                if response.status == 200:
                    img_bytes = await response.read()
                    img_file = BytesIO(img_bytes)
                    img_file.name = "image.jpg"
                    img_file.seek(0)
                    return img_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—É—Ç–∫–∏ —á–µ—Ä–µ–∑ Gemini
async def generate_card_joke(situation: str, answer: str) -> str:
    prompt = (
        f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —è—Ä–∫—É—é —à—É—Ç–∫—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏: '{situation}', "
        f"–∏ –æ—Ç–≤–µ—Ç—É –∏–≥—Ä–æ–∫–∞: '{answer}'. –Ø–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π, —Ñ–æ—Ä–º–∞—Ç ‚Äì –º–µ–º, –¥–æ 2 —Å—Ç—Ä–æ–∫."
    )
    try:
        response = await asyncio.to_thread(gemini_model.generate_content, prompt)
        text = response.text.strip() if response and response.text else "–®—É—Ç–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–∞—Å—å ü§∑"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Gemini: {e}")
        text = "–®—É—Ç–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å ü§∑"
    return text

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
async def send_generated_card(chat_id: int, situation: str, answer: str):
    scene_desc = f"Cartoon style, humorous, minimalistic: {situation} with answer {answer}"
    
    image_file = await generate_pollinations_image_file(scene_desc)
    joke = await generate_card_joke(situation, answer)

    if image_file:
        await bot.send_photo(chat_id, photo=image_file, caption=joke)
    else:
        await bot.send_message(chat_id, f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n–®—É—Ç–∫–∞: {joke}")

# –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∞
@dp.message(Command("testcard"))
async def cmd_testcard(message: types.Message):
    situation = "–í–∞—Å –Ω–∞ —Å–≤–∞–¥—å–±–µ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –º–∞–∫–∞—Ä–µ–Ω—É –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ –≥–æ—Å—Ç—è–º–∏"
    answer = "–Ø –æ—Ç–∫–ª–æ–Ω—è—é—Å—å –Ω–∞–∑–∞–¥ –∏ –≥–æ–≤–æ—Ä—é, —á—Ç–æ —ç—Ç–æ —Ç—Ä–∞–¥–∏—Ü–∏—è –º–æ–µ–≥–æ –Ω–∞—Ä–æ–¥–∞"
    await send_generated_card(message.chat.id, situation, answer)

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
